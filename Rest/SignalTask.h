////////////////////////////////////////////////////////////////////////////////
/// @brief tasks used to handle signals
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2011 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Achim Brandt
/// @author Copyright 2008-2011, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef TRIAGENS_FYN_REST_SIGNAL_TASK_H
#define TRIAGENS_FYN_REST_SIGNAL_TASK_H 1

#include <Rest/Task.h>

#include <Basics/Mutex.h>

namespace triagens {
  namespace rest {

    ////////////////////////////////////////////////////////////////////////////////
    /// @ingroup Scheduler
    /// @brief task used to handle signals
    ////////////////////////////////////////////////////////////////////////////////

    class  SignalTask : virtual public Task {
      public:

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief maximal number of signals per task
        ////////////////////////////////////////////////////////////////////////////////

        static size_t const MAX_SIGNALS = 10;

      public:

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief constructs a new task
        ////////////////////////////////////////////////////////////////////////////////

        SignalTask ();

      public:

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief adds a signal which will be handled
        ///
        /// Note that this method can be called on a signal task, which has already
        /// been set up.
        ////////////////////////////////////////////////////////////////////////////////

        bool addSignal (int signal);

      protected:

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief called when the signal is received
        ////////////////////////////////////////////////////////////////////////////////

        virtual bool handleSignal () = 0;

      protected:

        ////////////////////////////////////////////////////////////////////////////////
        /// destructor
        ////////////////////////////////////////////////////////////////////////////////

        ~SignalTask ();

      protected:

        ////////////////////////////////////////////////////////////////////////////////
        /// {@inheritDoc}
        ////////////////////////////////////////////////////////////////////////////////

        void setup (Scheduler*, EventLoop);

        ////////////////////////////////////////////////////////////////////////////////
        /// {@inheritDoc}
        ////////////////////////////////////////////////////////////////////////////////

        void cleanup ();

        ////////////////////////////////////////////////////////////////////////////////
        /// {@inheritDoc}
        ////////////////////////////////////////////////////////////////////////////////

        bool handleEvent (EventToken, EventType);

        ////////////////////////////////////////////////////////////////////////////////
        /// {@inheritDoc}
        ////////////////////////////////////////////////////////////////////////////////

        bool needsMainEventLoop () const;

      protected:

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief signal event
        ////////////////////////////////////////////////////////////////////////////////

        EventToken watcher[MAX_SIGNALS];

      private:
        set<int> signals;
        basics::Mutex changeLock;
    };
  }
}

#endif
