////////////////////////////////////////////////////////////////////////////////
/// @brief write slots
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2011 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Copyright 2011-2010, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef TRIAGENS_DURHAM_VOCBASE_WRITE_SLOTS_H
#define TRIAGENS_DURHAM_VOCBASE_WRITE_SLOTS_H 1

#include <Basics/Common.h>

#include <Basics/vector.h>
#include <Basics/locks.h>

#include <VocBase/vocbase.h>

#ifdef __cplusplus
extern "C" {
#endif

// -----------------------------------------------------------------------------
// --SECTION--                                                  public constants
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup VocBase VocBase
/// @{
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// @brief default write slots
////////////////////////////////////////////////////////////////////////////////

#define TRI_COL_WRITE_SLOTS     (10)

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                      public types
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup VocBase VocBase
/// @{
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// @brief single write slot
////////////////////////////////////////////////////////////////////////////////

typedef struct TRI_col_write_slot_s {
  struct TRI_col_write_slot_s* _forward;
  struct TRI_col_write_slot_s* _backward;

  void* _begin;
  void* _end; // excluding
}
TRI_col_write_slot_t;

////////////////////////////////////////////////////////////////////////////////
/// @brief write slots
////////////////////////////////////////////////////////////////////////////////

typedef struct TRI_col_write_slots_s {
  TRI_col_write_slot_t* _free;
  TRI_col_write_slot_t* _used;

  void* _position; // position of finished writes (excluding)
  void* _synced;  // position of synced writes (excluding)
}
TRI_col_write_slots_t;

// -----------------------------------------------------------------------------
// --SECTION--                                                  public functions
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup VocBase VocBase
/// @{
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/// @brief initialses a write slots
////////////////////////////////////////////////////////////////////////////////

void TRI_InitWriteSlots (TRI_col_write_slots_t*);

////////////////////////////////////////////////////////////////////////////////
/// @brief destroys the writes slots, but does not free the pointer
////////////////////////////////////////////////////////////////////////////////

void TRI_DestroyWriteSlots (TRI_col_write_slots_t*);

////////////////////////////////////////////////////////////////////////////////
/// @brief destroys the writes slots
////////////////////////////////////////////////////////////////////////////////

void TRI_FreeWriteSlots (TRI_col_write_slots_t*);

////////////////////////////////////////////////////////////////////////////////
/// @brief acquires a free write slot, returns 0 if none is free
////////////////////////////////////////////////////////////////////////////////

TRI_col_write_slot_t* TRI_AcquireWriteSlots (TRI_col_write_slots_t*, void* begin, void* end);

////////////////////////////////////////////////////////////////////////////////
/// @brief releases a write slot
////////////////////////////////////////////////////////////////////////////////

void* TRI_ReleaseWriteSlots (TRI_col_write_slots_t*, TRI_col_write_slot_t*);

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

#ifdef __cplusplus
}
#endif

#endif

// Local Variables:
// mode: outline-minor
// outline-regexp: "^\\(/// @brief\\|/// @addtogroup\\|// --SECTION--\\)"
// End:
