
<!-- filename: v8-query.cpp -->
@startDocuBlock collection_checksum

`collection.checksum(withRevisions, withData)`
<br />
The *checksum* operation calculates a CRC32 checksum of the keys
contained in collection *collection*.
<br />
If the optional argument *withRevisions* is set to *true*, then the
revision ids of the documents are also included in the checksumming.
<br />
If the optional argument *withData* is set to *true*, then the
actual document data is also checksummed. Including the document data in
checksumming will make the calculation slower, but is more accurate.
<br />
Note: this method is not available in a cluster.
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock documents_collectionName

`collection.document(document)`
<br />
The *document* method finds a document given its identifier or a document
object containing the *_id* or *_key* attribute. The method returns
the document if it can be found.
<br />
An error is thrown if *_rev* is specified but the document found has a
different revision already. An error is also thrown if no document exists
with the given *_id* or *_key* value.
<br />
Please note that if the method is executed on the arangod server (e.g. from
inside a Foxx application), an immutable document object will be returned
for performance reasons. It is not possible to change attributes of this
immutable object. To update or patch the returned document, it needs to be
cloned/copied into a regular JavaScript object first. This is not necessary
if the *document* method is called from out of arangosh or from any other
client.
<br />
`collection.document(document-handle)`
<br />
As before. Instead of document a *document-handle* can be passed as
first argument.
<br />
*Examples*
<br />
Returns the document for a document-handle:
<br />
@code
arango> db.example.document("example/2873916");
{ "_id" : "example/2873916", "_key" : "2873916", "_rev" : "2873916", "Hello" : "World" }
@endcode
<br />
An error is raised if the document is unknown:
<br />
@code
arango> db.example.document("example/123456");
JavaScript exception in file '(arango)' at 1,12:
[ArangoError 1202: document not found: document not found]
!db.example.document("example/123456");
!           ^
@endcode
<br />
An error is raised if the handle is invalid:
<br />
@code
arango> db.example.document("");
JavaScript exception in file '(arango)' at 1,28: [ArangoError 1205: illegal document handle]
!db.example.document("");
!           ^
@endcode
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock documents_collectionExists

`collection.exists(document)`
<br />
The *exists* method determines whether a document exists given its
identifier.  Instead of returning the found document or an error, this
method will return either *true* or *false*. It can thus be used
for easy existence checks.
<br />
The *document* method finds a document given its identifier.  It returns
the document. Note that the returned document contains two
pseudo-attributes, namely *_id* and *_rev*. *_id* contains the
document-handle and *_rev* the revision of the document.
<br />
No error will be thrown if the sought document or collection does not
exist.
Still this method will throw an error if used improperly, e.g. when called
with a non-document handle, a non-document, or when a cross-collection
request is performed.
<br />
`collection.exists(document-handle)`
<br />
As before. Instead of document a *document-handle* can be passed as
first argument.
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock clollection_figures

`collection.figures()`
<br />
Returns an object containing all collection figures.
<br />
* *alive.count*: The number of living documents.
* *alive.size*: The total size in bytes used by all
living documents.
* *dead.count*: The number of dead documents.
* *dead.size*: The total size in bytes used by all
dead documents.
* *dead.deletion*: The total number of deletion markers.
* *datafiles.count*: The number of active datafiles.
* *datafiles.fileSize*: The total filesize of the active datafiles
(in bytes).
* *journals.count*: The number of journal files.
* *journals.fileSize*: The total filesize of the journal files
(in bytes).
* *compactors.count*: The number of compactor files.
* *compactors.fileSize*: The total filesize of the compactor files
(in bytes).
* *shapefiles.count*: The number of shape files. This value is
deprecated and kept for compatibility reasons only. The value will always
be 0.
* *shapefiles.fileSize*: The total filesize of the shape files. This
value is deprecated and kept for compatibility reasons only. The value will
always be 0.
* *shapes.count*: The total number of shapes used in the collection.
This includes shapes that are not in use anymore.
* *shapes.size*: The total size of all shapes (in bytes). This includes
shapes that are not in use anymore.
* *attributes.count*: The total number of attributes used in the
collection. Note: the value includes data of attributes that are not in use
anymore.
* *attributes.size*: The total size of the attribute data (in bytes).
Note: the value includes data of attributes that are not in use anymore.
* *indexes.count*: The total number of indexes defined for the
collection, including the pre-defined indexes (e.g. primary index).
* *indexes.size*: The total memory allocated for indexes in bytes.
<br />
*Examples*
<br />
@verbinclude shell_collection-figures
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock collection_properties

`collection.properties()`
<br />
Returns an object containing all collection properties.
<br />
* *waitForSync*: If *true* creating a document will only return
after the data was synced to disk.
<br />
* *journalSize* : The size of the journal in bytes.
<br />
* *isVolatile*: If *true* then the collection data will be
kept in memory only and ArangoDB will not write or sync the data
to disk.
<br />
* *keyOptions* (optional) additional options for key generation. This is
a JSON array containing the following attributes (note: some of the
attributes are optional):
* *type*: the type of the key generator used for the collection.
* *allowUserKeys*: if set to *true*, then it is allowed to supply
own key values in the *_key* attribute of a document. If set to
*false*, then the key generator will solely be responsible for
generating keys and supplying own key values in the *_key* attribute
of documents is considered an error.
* *increment*: increment value for *autoincrement* key generator.
Not used for other key generator types.
* *offset*: initial offset value for *autoincrement* key generator.
Not used for other key generator types.
<br />
In a cluster setup, the result will also contain the following attributes:
<br />
* *numberOfShards*: the number of shards of the collection.
<br />
* *shardKeys*: contains the names of document attributes that are used to
determine the target shard for documents.
<br />
`collection.properties(properties)`
<br />
Changes the collection properties. *properties* must be a object with
one or more of the following attribute(s):
<br />
* *waitForSync*: If *true* creating a document will only return
after the data was synced to disk.
<br />
* *journalSize* : The size of the journal in bytes.
<br />
*Note*: it is not possible to change the journal size after the journal or
datafile has been created. Changing this parameter will only effect newly
created journals. Also note that you cannot lower the journal size to less
then size of the largest document already stored in the collection.
<br />
*Note*: some other collection properties, such as *type*, *isVolatile*,
or *keyOptions* cannot be changed once the collection is created.
<br />
*Examples*
<br />
Read all properties
<br />
@verbinclude shell_collection-properties
<br />
Change a property
<br />
@verbinclude shell_collection-properties-change
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock collection_rename

`collection.rename(new-name)`
<br />
Renames a collection using the *new-name*. The *new-name* must not
already be used for a different collection. *new-name* must also be a
valid collection name. For more information on valid collection names please refer
to the [naming conventions](../NamingConventions/README.md).
<br />
If renaming fails for any reason, an error is thrown.
<br />
Note: this method is not available in a cluster.
<br />
*Examples*
<br />
@verbinclude shell_collection-rename
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock documents_collectionReplace

`collection.replace(document, data)`
<br />
Replaces an existing *document*. The *document* must be a document in
the current collection. This document is then replaced with the
*data* given as second argument.
<br />
The method returns a document with the attributes *_id*, *_rev* and
*{_oldRev*.  The attribute *_id* contains the document handle of the
updated document, the attribute *_rev* contains the document revision of
the updated document, the attribute *_oldRev* contains the revision of
the old (now replaced) document.
<br />
If there is a conflict, i. e. if the revision of the *document* does not
match the revision in the collection, then an error is thrown.
<br />
@FUN{@FA{collection}.replace(@FA{document}, @FA{data}, true)} or
@FUN{@FA{collection}.replace(@FA{document}, @FA{data}, {@FA{overwrite}: true})}
<br />
As before, but in case of a conflict, the conflict is ignored and the old
document is overwritten.
<br />
`collection.replace(document, data, true, waitForSync)` or
`collection.replace(document, data, overwrite: true, waitForSync: true or false)`
<br />
The optional *waitForSync* parameter can be used to force
synchronisation of the document replacement operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* parameter can be used to force synchronisation
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronisation for collections that have a default *waitForSync* value
of *true*.
<br />
`collection.replace(document-handle, data)`
<br />
As before. Instead of document a @FA{document-handle} can be passed as
first argument.
<br />
*Examples*
<br />
Create and update a document:
<br />
@TINYEXAMPLE{shell_replace-document,replacing a document}
<br />
Use a document handle:
<br />
@TINYEXAMPLE{shell_replace-document-handle,replacing a document}
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock collection_load

`collection.revision()`
<br />
Returns the revision id of the collection
<br />
The revision id is updated when the document data is modified, either by
inserting, deleting, updating or replacing documents in it.
<br />
The revision id of a collection can be used by clients to check whether
data in a collection has changed or if it is still unmodified since a
previous fetch of the revision id.
<br />
The revision id returned is a string value. Clients should treat this value
as an opaque string, and only use it for equality/non-equality comparisons.
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock collection_rotate

`collection.rotate()`
<br />
Rotates the current journal of a collection (i.e. makes the journal a
read-only datafile). The purpose of the rotation is to include the
datafile in a following compaction run and perform earlier garbage
collection.
<br />
Note: this method is not available in a cluster.
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock documents_collectionUpdate

`collection.update(document, data, overwrite, keepNull, waitForSync)` or
`collection.update(document, data,
overwrite: true or false, keepNull: true or false, waitForSync: true or false)`
<br />
Updates an existing *document*. The *document* must be a document in
the current collection. This document is then patched with the
*data* given as second argument. The optional *overwrite* parameter can
be used to control the behavior in case of version conflicts (see below).
The optional *keepNull* parameter can be used to modify the behavior when
handling *null* values. Normally, *null* values are stored in the
database. By setting the *keepNull* parameter to *false*, this behavior
can be changed so that all attributes in *data* with *null* values will
be removed from the target document.
<br />
The optional *waitForSync* parameter can be used to force
synchronisation of the document update operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* parameter can be used to force synchronisation
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronisation for collections that have a default *waitForSync* value
of *true*.
<br />
The method returns a document with the attributes *_id*, *_rev* and
*_oldRev*.  The attribute *_id* contains the document handle of the
updated document, the attribute *_rev* contains the document revision of
the updated document, the attribute *_oldRev* contains the revision of
the old (now replaced) document.
<br />
If there is a conflict, i. e. if the revision of the *document* does not
match the revision in the collection, then an error is thrown.
<br />
`collection.update(document, data, true)`
<br />
As before, but in case of a conflict, the conflict is ignored and the old
document is overwritten.
<br />
collection.update(document-handle, data)`
<br />
As before. Instead of document a document-handle can be passed as
first argument.
<br />
*Examples*
<br />
Create and update a document:
<br />
@TINYEXAMPLE{shell_update-document,updating a document}
<br />
Use a document handle:
<br />
@TINYEXAMPLE{shell_update-document-handle,updating a document}
<br />
Use the keepNull parameter to remove attributes with null values:
<br />
@TINYEXAMPLE{shell_update-document-keep-null,updating a document}
<br />
Patching array values:
<br />
@TINYEXAMPLE{shell_update-document-array,updating a document}
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock documents_collectionSave

`collection.save(data)`
<br />
Creates a new document in the *collection* from the given *data*. The
*data* must be a hash array. It must not contain attributes starting
with *_*.
<br />
The method returns a document with the attributes *_id* and *_rev*.
The attribute *_id* contains the document handle of the newly created
document, the attribute *_rev* contains the document revision.
<br />
`collection.save(data, waitForSync)`
<br />
Creates a new document in the *collection* from the given *data* as
above. The optional *waitForSync* parameter can be used to force
synchronisation of the document creation operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* parameter can be used to force synchronisation
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronisation for collections that have a default *waitForSync* value
of *true*.
<br />
*Examples*
<br />
@verbinclude shell_create-document
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock collection_unload

`collection.unload()`
<br />
Starts unloading a collection from memory. Note that unloading is deferred
until all query have finished.
<br />
*Examples*
<br />
@verbinclude shell_collection-unload
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock collection_databaseCollectionName

`db.collection-name`
<br />
Returns the collection with the given *collection-name*. If no such
collection exists, create a collection named *collection-name* with the
default properties.
<br />
*Examples*
<br />
@verbinclude shell_read-collection-short-cut
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock collections_databaseName

`db._collections()`
<br />
Returns all collections of the given database.
<br />
*Examples*
<br />
@verbinclude shell_read-collection-all
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock documents_collectionRemove

`db._remove(document)`
<br />
Removes a document. If there is revision mismatch, then an error is thrown.
<br />
`db._remove(document, true)`
<br />
Removes a document. If there is revision mismatch, then mismatch is ignored
and document is deleted. The function returns *true* if the document
existed and was deleted. It returns *false*, if the document was already
deleted.
<br />
`db._remove(document, true, waitForSync)` or
`db._remove(document, {overwrite: true or false, waitForSynca: true or false})`
<br />
The optional *waitForSync* parameter can be used to force synchronization
of the document deletion operation to disk even in case that the
*waitForSync* flag had been disabled for the entire collection.  Thus,
the *waitForSync* parameter can be used to force synchronisation of just
specific operations. To use this, set the *waitForSync* parameter to
*true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronisation for collections that have a default *waitForSync* value
of *true*.
<br />
`db._remove(document-handle, data)`
<br />
As before. Instead of document a *document-handle* can be passed as first
argument.
<br />
*Examples*
<br />
Remove a document:
<br />
@code
arango> a1 = db.example.save({ a : 1 });
{ "_id" : "116308/4214943", "_rev" : "4214943" }
arango> db._remove(a1);
true
arango> db._remove(a1);
JavaScript exception in file '(arango)' at 1,4: [ArangoError 1202: document not found: cannot remove document]
!db._remove(a1);
!   ^
arango> db._remove(a1, true);
false
@endcode
<br />
Remove a document with a conflict:
<br />
@code
arango> a1 = db.example.save({ a : 1 });
{ "_id" : "116308/4042634", "_rev" : "4042634" }
arango> a2 = db._replace(a1, { a : 2 });
{ "_id" : "116308/4042634", "_rev" : "4108170", "_oldRev" : 4042634 }
arango> db._delete(a1);
JavaScript exception in file '(arango)' at 1,4: [ArangoError 1200: conflict: cannot delete document]
!db._delete(a1);
!   ^
arango> db._delete(a1, true);
true
arango> db._document(a1);
JavaScript exception in file '(arango)' at 1,4: [ArangoError 1202: document not found: document not found]
!db._document(a1);
!   ^
@endcode
<br />
Remove a document using new signature:
@code
arangod> db.example.save({ a:  1 } );
{
"_id" : "example/11265325374",
"_rev" : "11265325374",
"_key" : "11265325374"
}
arangod> db.example.remove("example/11265325374", {overwrite: true, waitForSync: false})
true
@endcode
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock documents_documentName

`db._document(document)`
<br />
This method finds a document given its identifier.  It returns the document
if the document exists. An error is throw if no document with the given
identifier exists, or if the specified *_rev* value does not match the
current revision of the document.
<br />
Please note that if the method is executed on the arangod server (e.g. from
inside a Foxx application), an immutable document object will be returned
for performance reasons. It is not possible to change attributes of this
immutable object. To update or patch the returned document, it needs to be
cloned/copied into a regular JavaScript object first. This is not necessary
if the *_document* method is called from out of arangosh or from any
other client.
<br />
`db._document(document-handle)`
<br />
As before. Instead of document a *document-handle* can be passed as
first argument.
<br />
*Examples*
<br />
Returns the document:
<br />
@verbinclude shell_read-document-db
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock documents_documentExists

`db._exists(document)`
<br />
This method determines whether a document exists given its identifier.
Instead of returning the found document or an error, this method will
return either *true* or *false*. It can thus be used
for easy existence checks.
<br />
No error will be thrown if the sought document or collection does not
exist.
Still this method will throw an error if used improperly, e.g. when called
with a non-document handle.
<br />
`db._exists(document-handle)`
<br />
As before, but instead of a document a document-handle can be passed.
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock documents_documentReplace

`db._replace(document, data)`
<br />
The method returns a document with the attributes *_id*, *_rev* and
*_oldRev*.  The attribute *_id* contains the document handle of the
updated document, the attribute *_rev* contains the document revision of
the updated document, the attribute *_oldRev* contains the revision of
the old (now replaced) document.
<br />
If there is a conflict, i. e. if the revision of the *document* does not
match the revision in the collection, then an error is thrown.
<br />
`db._replace(document, data, true)`
<br />
As before, but in case of a conflict, the conflict is ignored and the old
document is overwritten.
<br />
`db._replace(document, data, true, waitForSync)`
<br />
The optional *waitForSync* parameter can be used to force
synchronisation of the document replacement operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* parameter can be used to force synchronisation
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
*false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronisation for collections that have a default *waitForSync* value
of *true*.
<br />
`db._replace(document-handle, data)`
<br />
As before. Instead of document a *document-handle* can be passed as
first argument.
<br />
*ExamplesÜ
<br />
Create and replace a document:
<br />
@TINYEXAMPLE{shell_replace-document-db,replacing a document}
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock documents_documentUpdate

`db._update(document, data, overwrite, keepNull, waitForSync)`
<br />
Updates an existing *document*. The *document* must be a document in
the current collection. This document is then patched with the
*data* given as second argument. The optional *overwrite* parameter can
be used to control the behavior in case of version conflicts (see below).
The optional *keepNull* parameter can be used to modify the behavior when
handling *null* values. Normally, *null* values are stored in the
database. By setting the *keepNull* parameter to *false*, this behavior
can be changed so that all attributes in *data* with *null* values will
be removed from the target document.
<br />
The optional *waitForSync* parameter can be used to force
synchronisation of the document update operation to disk even in case
that the *waitForSync* flag had been disabled for the entire collection.
Thus, the *waitForSync* parameter can be used to force synchronisation
of just specific operations. To use this, set the *waitForSync* parameter
to *true*. If the *waitForSync* parameter is not specified or set to
false*, then the collection's default *waitForSync* behavior is
applied. The *waitForSync* parameter cannot be used to disable
synchronisation for collections that have a default *waitForSync* value
of *true*.
<br />
The method returns a document with the attributes *_id*, *_rev* and
*_oldRev*. The attribute *_id* contains the document handle of the
updated document, the attribute *_rev* contains the document revision of
the updated document, the attribute *_oldRev* contains the revision of
the old (now replaced) document.
<br />
If there is a conflict, i. e. if the revision of the *document* does not
match the revision in the collection, then an error is thrown.
<br />
`db._update(document, data, true)`
<br />
As before, but in case of a conflict, the conflict is ignored and the old
document is overwritten.
<br />
`db._update(document-handle, data)`
<br />
As before. Instead of document a *document-handle* can be passed as
first argument.
<br />
*Examples*
<br />
Create and update a document:
<br />
@TINYEXAMPLE{shell_update-document-db,updating a document}
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock database_path

*db._path()*
<br />
Returns the filesystem path of the current database as a string.
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock database_id

*db._id()*
<br />
Returns the id of the current database as a string.
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock database_name

*db._name()*
<br />
Returns the name of the current database as a string.
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock database_isSystem

*db._isSystem()*
<br />
Returns whether the currently used database is the `_system` database.
The system database has some special privileges and properties, for example,
database management operations such as create or drop can only be executed
from within this database. Additionally, the `_system` database itself
cannot be dropped.
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock database_useDatabase

*db._useDatabase(name)*
<br />
Changes the current database to the database specified by *name*. Note
that the database specified by *name* must already exist.
<br />
Changing the database might be disallowed in some contexts, for example
server-side actions (including Foxx).
<br />
When performing this command from arangosh, the current credentials (username
and password) will be re-used. These credentials might not be valid to
connect to the database specified by *name*. Additionally, the database
only be accessed from certain endpoints only. In this case, switching the
database might not work, and the connection / session should be closed and
restarted with different username and password credentials and/or
endpoint data.
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock database_listDatabase

*db._listDatabases()*
<br />
Returns the list of all databases. This method can only be used from within
the *_system* database.
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock database_createDatabase

*db._createDatabase(name, options, users)*
<br />
Creates a new database with the name specified by *name*.
There are restrictions for database names
(see [DatabaseNames](../NamingConventions/DatabaseNames.md)).
<br />
Note that even if the database is created successfully, there will be no
change into the current database to the new database. Changing the current
database must explicitly be requested by using the
*db._useDatabase* method.
<br />
The *options* attribute currently has no meaning and is reserved for
future use.
<br />
The optional *users* attribute can be used to create initial users for
the new database. If specified, it must be a list of user objects. Each user
object can contain the following attributes:
<br />
* *username*: the user name as a string. This attribute is mandatory.
<br />
* *passwd*: the user password as a string. If not specified, then it defaults
to the empty string.
<br />
* *active*: a boolean flag indicating whether the user account should be
actived or not. The default value is *true*.
<br />
* *extra*: an optional JSON object with extra user information. The data
contained in *extra* will be stored for the user but not be interpreted
further by ArangoDB.
<br />
If no initial users are specified, a default user *root* will be created
with an empty string password. This ensures that the new database will be
accessible via HTTP after it is created.
<br />
This method can only be used from within the *_system* database.
@endDocuBlock


<!-- filename: v8-vocbase.cpp -->
@startDocuBlock database_dropDatabase

*db._dropDatabase(name)*
<br />
Drops the database specified by *name*. The database specified by
*name* must exist.
<br />
Note that dropping databases is only possible from within the *_system*
database. The *_system* database itself cannot be dropped.
<br />
Databases are dropped asynchronously, and will be physically removed if
all clients have disconnected and references have been garbage-collected.
@endDocuBlock


<!-- filename: ArangoServer.h -->
@startDocuBlock server_authentication

`--server.disable-authentication`
<br />
Setting value to true will turn off authentication on the server side
so all clients can execute any action without authorization and privilege
checks.
<br />
The default value is *false*.
@endDocuBlock


<!-- filename: ApplicationEndpointServer.h -->
@startDocuBlock keep_alive_timeout

`--server.keep-alive-timeout`
<br />
Allows to specify the timeout for HTTP keep-alive connections. The timeout
value must be specified in seconds.
Idle keep-alive connections will be closed by the server automatically when
the timeout is reached. A keep-alive-timeout value 0 will disable the keep
alive feature entirely.
@endDocuBlock


<!-- filename: api-traversal.js -->
@startDocuBlock JSF_HTTP_API_TRAVERSAL

<br />
@RESTHEADER{POST /_api/traversal,executes a traversal}
<br />
@RESTBODYPARAM{body,string,required}
<br />
@RESTDESCRIPTION
Starts a traversal starting from a given vertex and following.
edges contained in a given edgeCollection. The request must
contain the following attributes.
<br />
- *startVertex*: id of the startVertex, e.g. *"users/foo"*.
<br />
- *edgeCollection*: **Deprecated** name of the collection that contains the edges.
<br />
- *graphName*: name of the graph that contains the edges.
<br />
- *filter* (optional, default is to include all nodes):
body (JavaScript code) of custom filter function
function signature: (config, vertex, path) -> mixed
can return four different string values:
- *"exclude"* -> this vertex will not be visited.
- *"prune"* -> the edges of this vertex will not be followed.
- *""* or *undefined* -> visit the vertex and follow it's edges.
- *Array* -> containing any combination of the above.
If there is at least one *"exclude"* or *"prune"* respectivly
is contained, it's effect will occur.
<br />
- *minDepth* (optional, ANDed with any existing filters):
visits only nodes in at least the given depth
<br />
- *maxDepth* (optional, ANDed with any existing filters):
visits only nodes in at most the given depth
<br />
- *visitor* (optional): body (JavaScript) code of custom visitor function
function signature: (config, result, vertex, path) -> void
visitor function can do anything, but its return value is ignored. To
populate a result, use the *result* variable by reference
<br />
- *direction* (optional): direction for traversal
- *if set*, must be either *"outbound"*, *"inbound"*, or *"any"*
- *if not set*, the *expander* attribute must be specified
<br />
- *init* (optional): body (JavaScript) code of custom result initialisation function
function signature: (config, result) -> void
initialise any values in result with what is required
<br />
- *expander* (optional): body (JavaScript) code of custom expander function
*must* be set if *direction* attribute is **not** set
function signature: (config, vertex, path) -> array
expander must return an array of the connections for *vertex*
each connection is an object with the attributes *edge* and *vertex*
- *sort* (optional): body (JavaScript) code of a custom comparison function
for the edges. The signature of this function is
(l, r) -> integer (where l and r are edges) and must
return -1 if l is smaller than, +1 if l is greater than,
and 0 if l and r are equal. The reason for this is the
following: The order of edges returned for a certain
vertex is undefined. This is because there is no natural
order of edges for a vertex with multiple connected edges.
To explicitly define the order in which edges on the
vertex are followed, you can specify an edge comparator
function with this attribute. Note that the value here has
to be a string to conform to the JSON standard, which in
turn is parsed as function body on the server side. Furthermore
note that this attribute is only used for the standard
expanders. If you use your custom expander you have to
do the sorting yourself within the expander code.
<br />
- *strategy* (optional): traversal strategy
can be *"depthfirst"* or *"breadthfirst"*
<br />
- *order* (optional): traversal order
can be *"preorder"* or *"postorder"*
<br />
- *itemOrder* (optional): item iteration order
can be *"forward"* or *"backward"*
<br />
- *uniqueness* (optional): specifies uniqueness for vertices and edges visited
if set, must be an object like this:
*"uniqueness": {"vertices": "none"|"global"|path", "edges": "none"|"global"|"path"}*
<br />
- *maxIterations* (optional): Maximum number of iterations in each traversal. This number can be
set to prevent endless loops in traversal of cyclic graphs. When a traversal performs
as many iterations as the *maxIterations* value, the traversal will abort with an
error. If *maxIterations* is not set, a server-defined value may be used.
<br />
<br />
If the Traversal is successfully executed *HTTP 200* will be returned.
Additionally the *result* object will be returned by the traversal.
<br />
For successful traversals, the returned JSON object has the
following properties:
<br />
- *error*: boolean flag to indicate if an error occurred (*false*
in this case)
<br />
- *code*: the HTTP status code
<br />
- *result*: the return value of the traversal
<br />
If the traversal specification is either missing or malformed, the server
will respond with *HTTP 400*.
<br />
The body of the response will then contain a JSON object with additional error
details. The object has the following attributes:
<br />
- *error*: boolean flag to indicate that an error occurred (*true* in this case)
<br />
- *code*: the HTTP status code
<br />
- *errorNum*: the server error number
<br />
- *errorMessage*: a descriptive error message
<br />
@RESTRETURNCODES
<br />
@RESTRETURNCODE{200}
If the traversal is fully executed
*HTTP 200* will be returned.
<br />
@RESTRETURNCODE{400}
If the traversal specification is either missing or malformed, the server
will respond with *HTTP 400*.
<br />
@RESTRETURNCODE{404}
The server will responded with *HTTP 404* if the specified edge collection
does not exist, or the specified start vertex cannot be found.
<br />
@RESTRETURNCODE{500}
The server will responded with *HTTP 500* when an error occurs inside the
traversal or if a traversal performs more than *maxIterations* iterations.
<br />
*Examples*
<br />
In the following examples the underlying graph will contain five persons
*Alice*, *Bob*, *Charlie*, *Dave* and *Eve*.
We will have the following directed relations:
- *Alice* knows *Bob*
- *Bob* knows *Charlie*
- *Bob* knows *Dave*
- *Eve* knows *Alice*
- *Eve* knows *Bob*
<br />
The starting vertex will always be Alice.
<br />
Follow only outbound edges:
<br />

<div id="RestTraversalOutbound_container">
<div id="RestTraversalOutbound_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{ "startVertex": "persons/alice", "graphName" : "knows_graph", "direction" : "outbound"}

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

{ 
  "result" : { 
    "visited" : { 
      "vertices" : [ 
        { 
          "_id" : "persons/alice", 
          "_rev" : "700978586", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/bob", 
          "_rev" : "701175194", 
          "_key" : "bob", 
          "name" : "Bob" 
        }, 
        { 
          "_id" : "persons/charlie", 
          "_rev" : "701437338", 
          "_key" : "charlie", 
          "name" : "Charlie" 
        }, 
        { 
          "_id" : "persons/dave", 
          "_rev" : "701633946", 
          "_key" : "dave", 
          "name" : "Dave" 
        } 
      ], 
      "paths" : [ 
        { 
          "edges" : [ ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "700978586", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/702158234", 
              "_rev" : "702158234", 
              "_key" : "702158234", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "700978586", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "701175194", 
              "_key" : "bob", 
              "name" : "Bob" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/702158234", 
              "_rev" : "702158234", 
              "_key" : "702158234", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/702354842", 
              "_rev" : "702354842", 
              "_key" : "702354842", 
              "_from" : "persons/bob", 
              "_to" : "persons/charlie" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "700978586", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "701175194", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/charlie", 
              "_rev" : "701437338", 
              "_key" : "charlie", 
              "name" : "Charlie" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/702158234", 
              "_rev" : "702158234", 
              "_key" : "702158234", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/702551450", 
              "_rev" : "702551450", 
              "_key" : "702551450", 
              "_from" : "persons/bob", 
              "_to" : "persons/dave" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "700978586", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "701175194", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/dave", 
              "_rev" : "701633946", 
              "_key" : "dave", 
              "name" : "Dave" 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  "error" : false, 
  "code" : 200 
}

```
</pre>
</div>
</div>

<br />
Follow only inbound edges:
<br />

<div id="RestTraversalInbound_container">
<div id="RestTraversalInbound_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{ "startVertex": "persons/alice", "graphName" : "knows_graph", "direction" : "inbound"}

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

{ 
  "result" : { 
    "visited" : { 
      "vertices" : [ 
        { 
          "_id" : "persons/alice", 
          "_rev" : "705303962", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/eve", 
          "_rev" : "706155930", 
          "_key" : "eve", 
          "name" : "Eve" 
        } 
      ], 
      "paths" : [ 
        { 
          "edges" : [ ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "705303962", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/707073434", 
              "_rev" : "707073434", 
              "_key" : "707073434", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "705303962", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "706155930", 
              "_key" : "eve", 
              "name" : "Eve" 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  "error" : false, 
  "code" : 200 
}

```
</pre>
</div>
</div>

<br />
Follow any direction of edges:
<br />

<div id="RestTraversalAny_container">
<div id="RestTraversalAny_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{"startVertex":"persons/alice","graphName":"knows_graph","direction":"any","uniqueness":{"vertices":"none","edges":"global"}}

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

{ 
  "result" : { 
    "visited" : { 
      "vertices" : [ 
        { 
          "_id" : "persons/alice", 
          "_rev" : "709367194", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/eve", 
          "_rev" : "710219162", 
          "_key" : "eve", 
          "name" : "Eve" 
        }, 
        { 
          "_id" : "persons/bob", 
          "_rev" : "709563802", 
          "_key" : "bob", 
          "name" : "Bob" 
        }, 
        { 
          "_id" : "persons/alice", 
          "_rev" : "709367194", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/charlie", 
          "_rev" : "709825946", 
          "_key" : "charlie", 
          "name" : "Charlie" 
        }, 
        { 
          "_id" : "persons/dave", 
          "_rev" : "710022554", 
          "_key" : "dave", 
          "name" : "Dave" 
        } 
      ], 
      "paths" : [ 
        { 
          "edges" : [ ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "709367194", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/711136666", 
              "_rev" : "711136666", 
              "_key" : "711136666", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "709367194", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "710219162", 
              "_key" : "eve", 
              "name" : "Eve" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/711136666", 
              "_rev" : "711136666", 
              "_key" : "711136666", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/711333274", 
              "_rev" : "711333274", 
              "_key" : "711333274", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "709367194", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "710219162", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "709563802", 
              "_key" : "bob", 
              "name" : "Bob" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/711136666", 
              "_rev" : "711136666", 
              "_key" : "711136666", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/711333274", 
              "_rev" : "711333274", 
              "_key" : "711333274", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/710546842", 
              "_rev" : "710546842", 
              "_key" : "710546842", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "709367194", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "710219162", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "709563802", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/alice", 
              "_rev" : "709367194", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/711136666", 
              "_rev" : "711136666", 
              "_key" : "711136666", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/711333274", 
              "_rev" : "711333274", 
              "_key" : "711333274", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/710743450", 
              "_rev" : "710743450", 
              "_key" : "710743450", 
              "_from" : "persons/bob", 
              "_to" : "persons/charlie" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "709367194", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "710219162", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "709563802", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/charlie", 
              "_rev" : "709825946", 
              "_key" : "charlie", 
              "name" : "Charlie" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/711136666", 
              "_rev" : "711136666", 
              "_key" : "711136666", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/711333274", 
              "_rev" : "711333274", 
              "_key" : "711333274", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/710940058", 
              "_rev" : "710940058", 
              "_key" : "710940058", 
              "_from" : "persons/bob", 
              "_to" : "persons/dave" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "709367194", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "710219162", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "709563802", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/dave", 
              "_rev" : "710022554", 
              "_key" : "dave", 
              "name" : "Dave" 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  "error" : false, 
  "code" : 200 
}

```
</pre>
</div>
</div>

<br />
Excluding *Charlie* and *Bob*:
<br />

<div id="RestTraversalFilterExclude_container">
<div id="RestTraversalFilterExclude_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{ "startVertex": "persons/alice", "graphName" : "knows_graph", "direction" : "outbound", "filter" : "if (vertex.name === \"Bob\" || vertex.name === \"Charlie\") {return \"exclude\";}return;"}

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

{ 
  "result" : { 
    "visited" : { 
      "vertices" : [ 
        { 
          "_id" : "persons/alice", 
          "_rev" : "714413466", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/dave", 
          "_rev" : "715068826", 
          "_key" : "dave", 
          "name" : "Dave" 
        } 
      ], 
      "paths" : [ 
        { 
          "edges" : [ ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "714413466", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/715593114", 
              "_rev" : "715593114", 
              "_key" : "715593114", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/715986330", 
              "_rev" : "715986330", 
              "_key" : "715986330", 
              "_from" : "persons/bob", 
              "_to" : "persons/dave" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "714413466", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "714610074", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/dave", 
              "_rev" : "715068826", 
              "_key" : "dave", 
              "name" : "Dave" 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  "error" : false, 
  "code" : 200 
}

```
</pre>
</div>
</div>

<br />
Do not follow edges from *Bob*:
<br />

<div id="RestTraversalFilterPrune_container">
<div id="RestTraversalFilterPrune_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{ "startVertex": "persons/alice", "graphName" : "knows_graph", "direction" : "outbound", "filter" : "if (vertex.name === \"Bob\") {return \"prune\";}return;"}

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

{ 
  "result" : { 
    "visited" : { 
      "vertices" : [ 
        { 
          "_id" : "persons/alice", 
          "_rev" : "718738842", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/bob", 
          "_rev" : "718935450", 
          "_key" : "bob", 
          "name" : "Bob" 
        } 
      ], 
      "paths" : [ 
        { 
          "edges" : [ ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "718738842", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/719918490", 
              "_rev" : "719918490", 
              "_key" : "719918490", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "718738842", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "718935450", 
              "_key" : "bob", 
              "name" : "Bob" 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  "error" : false, 
  "code" : 200 
}

```
</pre>
</div>
</div>

<br />
Visit only nodes in a depth of at least 2:
<br />

<div id="RestTraversalMinDepth_container">
<div id="RestTraversalMinDepth_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{ "startVertex": "persons/alice", "graphName" : "knows_graph", "direction" : "outbound", "minDepth" : 2}

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

{ 
  "result" : { 
    "visited" : { 
      "vertices" : [ 
        { 
          "_id" : "persons/charlie", 
          "_rev" : "723195290", 
          "_key" : "charlie", 
          "name" : "Charlie" 
        }, 
        { 
          "_id" : "persons/dave", 
          "_rev" : "723391898", 
          "_key" : "dave", 
          "name" : "Dave" 
        } 
      ], 
      "paths" : [ 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/723916186", 
              "_rev" : "723916186", 
              "_key" : "723916186", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/724112794", 
              "_rev" : "724112794", 
              "_key" : "724112794", 
              "_from" : "persons/bob", 
              "_to" : "persons/charlie" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "722736538", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "722933146", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/charlie", 
              "_rev" : "723195290", 
              "_key" : "charlie", 
              "name" : "Charlie" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/723916186", 
              "_rev" : "723916186", 
              "_key" : "723916186", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/724309402", 
              "_rev" : "724309402", 
              "_key" : "724309402", 
              "_from" : "persons/bob", 
              "_to" : "persons/dave" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "722736538", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "722933146", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/dave", 
              "_rev" : "723391898", 
              "_key" : "dave", 
              "name" : "Dave" 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  "error" : false, 
  "code" : 200 
}

```
</pre>
</div>
</div>

<br />
Visit only nodes in a depth of at most 1:
<br />

<div id="RestTraversalMaxDepth_container">
<div id="RestTraversalMaxDepth_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{ "startVertex": "persons/alice", "graphName" : "knows_graph", "direction" : "outbound", "maxDepth" : 1}

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

{ 
  "result" : { 
    "visited" : { 
      "vertices" : [ 
        { 
          "_id" : "persons/alice", 
          "_rev" : "727061914", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/bob", 
          "_rev" : "727258522", 
          "_key" : "bob", 
          "name" : "Bob" 
        } 
      ], 
      "paths" : [ 
        { 
          "edges" : [ ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "727061914", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/728241562", 
              "_rev" : "728241562", 
              "_key" : "728241562", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "727061914", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "727258522", 
              "_key" : "bob", 
              "name" : "Bob" 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  "error" : false, 
  "code" : 200 
}

```
</pre>
</div>
</div>

<br />
Count all visited nodes and return a list of nodes only:
<br />

<div id="RestTraversalVisitorCountAndList_container">
<div id="RestTraversalVisitorCountAndList_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{ "startVertex": "persons/alice", "graphName" : "knows_graph", "direction" : "outbound", "init" : "result.visited = 0; result.myVertices = [ ];", "visitor" : "result.visited++; result.myVertices.push(vertex);"}

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

{ 
  "result" : { 
    "visited" : 4, 
    "myVertices" : [ 
      { 
        "_id" : "persons/alice", 
        "_rev" : "731059610", 
        "_key" : "alice", 
        "name" : "Alice" 
      }, 
      { 
        "_id" : "persons/bob", 
        "_rev" : "731256218", 
        "_key" : "bob", 
        "name" : "Bob" 
      }, 
      { 
        "_id" : "persons/charlie", 
        "_rev" : "731518362", 
        "_key" : "charlie", 
        "name" : "Charlie" 
      }, 
      { 
        "_id" : "persons/dave", 
        "_rev" : "731714970", 
        "_key" : "dave", 
        "name" : "Dave" 
      } 
    ] 
  }, 
  "error" : false, 
  "code" : 200 
}

```
</pre>
</div>
</div>

<br />
Expand only inbound edges of *Alice* and outbound edges of *Eve*:
<br />

<div id="RestTraversalVisitorExpander_container">
<div id="RestTraversalVisitorExpander_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{"startVertex":"persons/alice","graphName":"knows_graph","expander":"var connections = [ ];if (vertex.name === \"Alice\") {config.datasource.getInEdges(vertex).forEach(function (e) {connections.push({ vertex: require(\"internal\").db._document(e._from), edge: e});});}if (vertex.name === \"Eve\") {config.datasource.getOutEdges(vertex).forEach(function (e) {connections.push({vertex: require(\"internal\").db._document(e._to), edge: e});});}return connections;"}

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

{ 
  "result" : { 
    "visited" : { 
      "vertices" : [ 
        { 
          "_id" : "persons/alice", 
          "_rev" : "735384986", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/eve", 
          "_rev" : "736236954", 
          "_key" : "eve", 
          "name" : "Eve" 
        }, 
        { 
          "_id" : "persons/bob", 
          "_rev" : "735581594", 
          "_key" : "bob", 
          "name" : "Bob" 
        } 
      ], 
      "paths" : [ 
        { 
          "edges" : [ ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "735384986", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/737154458", 
              "_rev" : "737154458", 
              "_key" : "737154458", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "735384986", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "736236954", 
              "_key" : "eve", 
              "name" : "Eve" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/737154458", 
              "_rev" : "737154458", 
              "_key" : "737154458", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/737351066", 
              "_rev" : "737351066", 
              "_key" : "737351066", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "735384986", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "736236954", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "735581594", 
              "_key" : "bob", 
              "name" : "Bob" 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  "error" : false, 
  "code" : 200 
}

```
</pre>
</div>
</div>

<br />
Follow the *depthfirst* strategy:
<br />

<div id="RestTraversalDepthFirst_container">
<div id="RestTraversalDepthFirst_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{"startVertex":"persons/alice","graphName":"knows_graph","direction":"any","strategy":"depthfirst"}

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

{ 
  "result" : { 
    "visited" : { 
      "vertices" : [ 
        { 
          "_id" : "persons/alice", 
          "_rev" : "739579290", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/eve", 
          "_rev" : "740431258", 
          "_key" : "eve", 
          "name" : "Eve" 
        }, 
        { 
          "_id" : "persons/bob", 
          "_rev" : "739775898", 
          "_key" : "bob", 
          "name" : "Bob" 
        }, 
        { 
          "_id" : "persons/alice", 
          "_rev" : "739579290", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/charlie", 
          "_rev" : "740038042", 
          "_key" : "charlie", 
          "name" : "Charlie" 
        }, 
        { 
          "_id" : "persons/dave", 
          "_rev" : "740234650", 
          "_key" : "dave", 
          "name" : "Dave" 
        }, 
        { 
          "_id" : "persons/bob", 
          "_rev" : "739775898", 
          "_key" : "bob", 
          "name" : "Bob" 
        }, 
        { 
          "_id" : "persons/eve", 
          "_rev" : "740431258", 
          "_key" : "eve", 
          "name" : "Eve" 
        }, 
        { 
          "_id" : "persons/alice", 
          "_rev" : "739579290", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/charlie", 
          "_rev" : "740038042", 
          "_key" : "charlie", 
          "name" : "Charlie" 
        }, 
        { 
          "_id" : "persons/dave", 
          "_rev" : "740234650", 
          "_key" : "dave", 
          "name" : "Dave" 
        } 
      ], 
      "paths" : [ 
        { 
          "edges" : [ ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "739579290", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/741348762", 
              "_rev" : "741348762", 
              "_key" : "741348762", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "739579290", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "740431258", 
              "_key" : "eve", 
              "name" : "Eve" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/741348762", 
              "_rev" : "741348762", 
              "_key" : "741348762", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/741545370", 
              "_rev" : "741545370", 
              "_key" : "741545370", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "739579290", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "740431258", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "739775898", 
              "_key" : "bob", 
              "name" : "Bob" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/741348762", 
              "_rev" : "741348762", 
              "_key" : "741348762", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/741545370", 
              "_rev" : "741545370", 
              "_key" : "741545370", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/740758938", 
              "_rev" : "740758938", 
              "_key" : "740758938", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "739579290", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "740431258", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "739775898", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/alice", 
              "_rev" : "739579290", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/741348762", 
              "_rev" : "741348762", 
              "_key" : "741348762", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/741545370", 
              "_rev" : "741545370", 
              "_key" : "741545370", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/740955546", 
              "_rev" : "740955546", 
              "_key" : "740955546", 
              "_from" : "persons/bob", 
              "_to" : "persons/charlie" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "739579290", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "740431258", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "739775898", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/charlie", 
              "_rev" : "740038042", 
              "_key" : "charlie", 
              "name" : "Charlie" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/741348762", 
              "_rev" : "741348762", 
              "_key" : "741348762", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/741545370", 
              "_rev" : "741545370", 
              "_key" : "741545370", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/741152154", 
              "_rev" : "741152154", 
              "_key" : "741152154", 
              "_from" : "persons/bob", 
              "_to" : "persons/dave" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "739579290", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "740431258", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "739775898", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/dave", 
              "_rev" : "740234650", 
              "_key" : "dave", 
              "name" : "Dave" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/740758938", 
              "_rev" : "740758938", 
              "_key" : "740758938", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "739579290", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "739775898", 
              "_key" : "bob", 
              "name" : "Bob" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/740758938", 
              "_rev" : "740758938", 
              "_key" : "740758938", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/741545370", 
              "_rev" : "741545370", 
              "_key" : "741545370", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "739579290", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "739775898", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "740431258", 
              "_key" : "eve", 
              "name" : "Eve" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/740758938", 
              "_rev" : "740758938", 
              "_key" : "740758938", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/741545370", 
              "_rev" : "741545370", 
              "_key" : "741545370", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/741348762", 
              "_rev" : "741348762", 
              "_key" : "741348762", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "739579290", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "739775898", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "740431258", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/alice", 
              "_rev" : "739579290", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/740758938", 
              "_rev" : "740758938", 
              "_key" : "740758938", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/740955546", 
              "_rev" : "740955546", 
              "_key" : "740955546", 
              "_from" : "persons/bob", 
              "_to" : "persons/charlie" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "739579290", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "739775898", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/charlie", 
              "_rev" : "740038042", 
              "_key" : "charlie", 
              "name" : "Charlie" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/740758938", 
              "_rev" : "740758938", 
              "_key" : "740758938", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/741152154", 
              "_rev" : "741152154", 
              "_key" : "741152154", 
              "_from" : "persons/bob", 
              "_to" : "persons/dave" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "739579290", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "739775898", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/dave", 
              "_rev" : "740234650", 
              "_key" : "dave", 
              "name" : "Dave" 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  "error" : false, 
  "code" : 200 
}

```
</pre>
</div>
</div>

<br />
Using *postorder* ordering:
<br />

<div id="RestTraversalPostorder_container">
<div id="RestTraversalPostorder_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{"startVertex":"persons/alice","graphName":"knows_graph","direction":"any","order":"postorder"}

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

{ 
  "result" : { 
    "visited" : { 
      "vertices" : [ 
        { 
          "_id" : "persons/alice", 
          "_rev" : "745608602", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/charlie", 
          "_rev" : "746067354", 
          "_key" : "charlie", 
          "name" : "Charlie" 
        }, 
        { 
          "_id" : "persons/dave", 
          "_rev" : "746263962", 
          "_key" : "dave", 
          "name" : "Dave" 
        }, 
        { 
          "_id" : "persons/bob", 
          "_rev" : "745805210", 
          "_key" : "bob", 
          "name" : "Bob" 
        }, 
        { 
          "_id" : "persons/eve", 
          "_rev" : "746460570", 
          "_key" : "eve", 
          "name" : "Eve" 
        }, 
        { 
          "_id" : "persons/alice", 
          "_rev" : "745608602", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/eve", 
          "_rev" : "746460570", 
          "_key" : "eve", 
          "name" : "Eve" 
        }, 
        { 
          "_id" : "persons/charlie", 
          "_rev" : "746067354", 
          "_key" : "charlie", 
          "name" : "Charlie" 
        }, 
        { 
          "_id" : "persons/dave", 
          "_rev" : "746263962", 
          "_key" : "dave", 
          "name" : "Dave" 
        }, 
        { 
          "_id" : "persons/bob", 
          "_rev" : "745805210", 
          "_key" : "bob", 
          "name" : "Bob" 
        }, 
        { 
          "_id" : "persons/alice", 
          "_rev" : "745608602", 
          "_key" : "alice", 
          "name" : "Alice" 
        } 
      ], 
      "paths" : [ 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/747378074", 
              "_rev" : "747378074", 
              "_key" : "747378074", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/747574682", 
              "_rev" : "747574682", 
              "_key" : "747574682", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/746788250", 
              "_rev" : "746788250", 
              "_key" : "746788250", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "745608602", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "746460570", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "745805210", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/alice", 
              "_rev" : "745608602", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/747378074", 
              "_rev" : "747378074", 
              "_key" : "747378074", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/747574682", 
              "_rev" : "747574682", 
              "_key" : "747574682", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/746984858", 
              "_rev" : "746984858", 
              "_key" : "746984858", 
              "_from" : "persons/bob", 
              "_to" : "persons/charlie" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "745608602", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "746460570", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "745805210", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/charlie", 
              "_rev" : "746067354", 
              "_key" : "charlie", 
              "name" : "Charlie" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/747378074", 
              "_rev" : "747378074", 
              "_key" : "747378074", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/747574682", 
              "_rev" : "747574682", 
              "_key" : "747574682", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/747181466", 
              "_rev" : "747181466", 
              "_key" : "747181466", 
              "_from" : "persons/bob", 
              "_to" : "persons/dave" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "745608602", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "746460570", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "745805210", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/dave", 
              "_rev" : "746263962", 
              "_key" : "dave", 
              "name" : "Dave" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/747378074", 
              "_rev" : "747378074", 
              "_key" : "747378074", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/747574682", 
              "_rev" : "747574682", 
              "_key" : "747574682", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "745608602", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "746460570", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "745805210", 
              "_key" : "bob", 
              "name" : "Bob" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/747378074", 
              "_rev" : "747378074", 
              "_key" : "747378074", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "745608602", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "746460570", 
              "_key" : "eve", 
              "name" : "Eve" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/746788250", 
              "_rev" : "746788250", 
              "_key" : "746788250", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/747574682", 
              "_rev" : "747574682", 
              "_key" : "747574682", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/747378074", 
              "_rev" : "747378074", 
              "_key" : "747378074", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "745608602", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "745805210", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "746460570", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/alice", 
              "_rev" : "745608602", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/746788250", 
              "_rev" : "746788250", 
              "_key" : "746788250", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/747574682", 
              "_rev" : "747574682", 
              "_key" : "747574682", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "745608602", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "745805210", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "746460570", 
              "_key" : "eve", 
              "name" : "Eve" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/746788250", 
              "_rev" : "746788250", 
              "_key" : "746788250", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/746984858", 
              "_rev" : "746984858", 
              "_key" : "746984858", 
              "_from" : "persons/bob", 
              "_to" : "persons/charlie" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "745608602", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "745805210", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/charlie", 
              "_rev" : "746067354", 
              "_key" : "charlie", 
              "name" : "Charlie" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/746788250", 
              "_rev" : "746788250", 
              "_key" : "746788250", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/747181466", 
              "_rev" : "747181466", 
              "_key" : "747181466", 
              "_from" : "persons/bob", 
              "_to" : "persons/dave" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "745608602", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "745805210", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/dave", 
              "_rev" : "746263962", 
              "_key" : "dave", 
              "name" : "Dave" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/746788250", 
              "_rev" : "746788250", 
              "_key" : "746788250", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "745608602", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "745805210", 
              "_key" : "bob", 
              "name" : "Bob" 
            } 
          ] 
        }, 
        { 
          "edges" : [ ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "745608602", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  "error" : false, 
  "code" : 200 
}

```
</pre>
</div>
</div>

<br />
Using *backward* item-ordering:
<br />

<div id="RestTraversalBackwardItemOrder_container">
<div id="RestTraversalBackwardItemOrder_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{"startVertex":"persons/alice","graphName":"knows_graph","direction":"any","itemOrder":"backward"}

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

{ 
  "result" : { 
    "visited" : { 
      "vertices" : [ 
        { 
          "_id" : "persons/alice", 
          "_rev" : "751637914", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/bob", 
          "_rev" : "751834522", 
          "_key" : "bob", 
          "name" : "Bob" 
        }, 
        { 
          "_id" : "persons/dave", 
          "_rev" : "752293274", 
          "_key" : "dave", 
          "name" : "Dave" 
        }, 
        { 
          "_id" : "persons/charlie", 
          "_rev" : "752096666", 
          "_key" : "charlie", 
          "name" : "Charlie" 
        }, 
        { 
          "_id" : "persons/eve", 
          "_rev" : "752489882", 
          "_key" : "eve", 
          "name" : "Eve" 
        }, 
        { 
          "_id" : "persons/alice", 
          "_rev" : "751637914", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/eve", 
          "_rev" : "752489882", 
          "_key" : "eve", 
          "name" : "Eve" 
        }, 
        { 
          "_id" : "persons/bob", 
          "_rev" : "751834522", 
          "_key" : "bob", 
          "name" : "Bob" 
        }, 
        { 
          "_id" : "persons/dave", 
          "_rev" : "752293274", 
          "_key" : "dave", 
          "name" : "Dave" 
        }, 
        { 
          "_id" : "persons/charlie", 
          "_rev" : "752096666", 
          "_key" : "charlie", 
          "name" : "Charlie" 
        }, 
        { 
          "_id" : "persons/alice", 
          "_rev" : "751637914", 
          "_key" : "alice", 
          "name" : "Alice" 
        } 
      ], 
      "paths" : [ 
        { 
          "edges" : [ ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "751637914", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/752817562", 
              "_rev" : "752817562", 
              "_key" : "752817562", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "751637914", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "751834522", 
              "_key" : "bob", 
              "name" : "Bob" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/752817562", 
              "_rev" : "752817562", 
              "_key" : "752817562", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/753210778", 
              "_rev" : "753210778", 
              "_key" : "753210778", 
              "_from" : "persons/bob", 
              "_to" : "persons/dave" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "751637914", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "751834522", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/dave", 
              "_rev" : "752293274", 
              "_key" : "dave", 
              "name" : "Dave" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/752817562", 
              "_rev" : "752817562", 
              "_key" : "752817562", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/753014170", 
              "_rev" : "753014170", 
              "_key" : "753014170", 
              "_from" : "persons/bob", 
              "_to" : "persons/charlie" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "751637914", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "751834522", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/charlie", 
              "_rev" : "752096666", 
              "_key" : "charlie", 
              "name" : "Charlie" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/752817562", 
              "_rev" : "752817562", 
              "_key" : "752817562", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/753603994", 
              "_rev" : "753603994", 
              "_key" : "753603994", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "751637914", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "751834522", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "752489882", 
              "_key" : "eve", 
              "name" : "Eve" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/752817562", 
              "_rev" : "752817562", 
              "_key" : "752817562", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/753603994", 
              "_rev" : "753603994", 
              "_key" : "753603994", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/753407386", 
              "_rev" : "753407386", 
              "_key" : "753407386", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "751637914", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "751834522", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "752489882", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/alice", 
              "_rev" : "751637914", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/753407386", 
              "_rev" : "753407386", 
              "_key" : "753407386", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "751637914", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "752489882", 
              "_key" : "eve", 
              "name" : "Eve" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/753407386", 
              "_rev" : "753407386", 
              "_key" : "753407386", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/753603994", 
              "_rev" : "753603994", 
              "_key" : "753603994", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "751637914", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "752489882", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "751834522", 
              "_key" : "bob", 
              "name" : "Bob" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/753407386", 
              "_rev" : "753407386", 
              "_key" : "753407386", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/753603994", 
              "_rev" : "753603994", 
              "_key" : "753603994", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/753210778", 
              "_rev" : "753210778", 
              "_key" : "753210778", 
              "_from" : "persons/bob", 
              "_to" : "persons/dave" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "751637914", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "752489882", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "751834522", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/dave", 
              "_rev" : "752293274", 
              "_key" : "dave", 
              "name" : "Dave" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/753407386", 
              "_rev" : "753407386", 
              "_key" : "753407386", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/753603994", 
              "_rev" : "753603994", 
              "_key" : "753603994", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/753014170", 
              "_rev" : "753014170", 
              "_key" : "753014170", 
              "_from" : "persons/bob", 
              "_to" : "persons/charlie" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "751637914", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "752489882", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "751834522", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/charlie", 
              "_rev" : "752096666", 
              "_key" : "charlie", 
              "name" : "Charlie" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/753407386", 
              "_rev" : "753407386", 
              "_key" : "753407386", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/753603994", 
              "_rev" : "753603994", 
              "_key" : "753603994", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/752817562", 
              "_rev" : "752817562", 
              "_key" : "752817562", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "751637914", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "752489882", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "751834522", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/alice", 
              "_rev" : "751637914", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  "error" : false, 
  "code" : 200 
}

```
</pre>
</div>
</div>

<br />
Edges should only be included once globally,
but nodes are included every time they are visited:
<br />

<div id="RestTraversalEdgeUniqueness_container">
<div id="RestTraversalEdgeUniqueness_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{"startVertex":"persons/alice","graphName":"knows_graph","direction":"any","uniqueness":{"vertices":"none","edges":"global"}}

HTTP/1.1 200 OK
content-type: application/json; charset=utf-8

{ 
  "result" : { 
    "visited" : { 
      "vertices" : [ 
        { 
          "_id" : "persons/alice", 
          "_rev" : "757667226", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/eve", 
          "_rev" : "758519194", 
          "_key" : "eve", 
          "name" : "Eve" 
        }, 
        { 
          "_id" : "persons/bob", 
          "_rev" : "757863834", 
          "_key" : "bob", 
          "name" : "Bob" 
        }, 
        { 
          "_id" : "persons/alice", 
          "_rev" : "757667226", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "persons/charlie", 
          "_rev" : "758125978", 
          "_key" : "charlie", 
          "name" : "Charlie" 
        }, 
        { 
          "_id" : "persons/dave", 
          "_rev" : "758322586", 
          "_key" : "dave", 
          "name" : "Dave" 
        } 
      ], 
      "paths" : [ 
        { 
          "edges" : [ ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "757667226", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/759436698", 
              "_rev" : "759436698", 
              "_key" : "759436698", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "757667226", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "758519194", 
              "_key" : "eve", 
              "name" : "Eve" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/759436698", 
              "_rev" : "759436698", 
              "_key" : "759436698", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/759633306", 
              "_rev" : "759633306", 
              "_key" : "759633306", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "757667226", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "758519194", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "757863834", 
              "_key" : "bob", 
              "name" : "Bob" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/759436698", 
              "_rev" : "759436698", 
              "_key" : "759436698", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/759633306", 
              "_rev" : "759633306", 
              "_key" : "759633306", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/758846874", 
              "_rev" : "758846874", 
              "_key" : "758846874", 
              "_from" : "persons/alice", 
              "_to" : "persons/bob" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "757667226", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "758519194", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "757863834", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/alice", 
              "_rev" : "757667226", 
              "_key" : "alice", 
              "name" : "Alice" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/759436698", 
              "_rev" : "759436698", 
              "_key" : "759436698", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/759633306", 
              "_rev" : "759633306", 
              "_key" : "759633306", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/759043482", 
              "_rev" : "759043482", 
              "_key" : "759043482", 
              "_from" : "persons/bob", 
              "_to" : "persons/charlie" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "757667226", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "758519194", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "757863834", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/charlie", 
              "_rev" : "758125978", 
              "_key" : "charlie", 
              "name" : "Charlie" 
            } 
          ] 
        }, 
        { 
          "edges" : [ 
            { 
              "_id" : "knows/759436698", 
              "_rev" : "759436698", 
              "_key" : "759436698", 
              "_from" : "persons/eve", 
              "_to" : "persons/alice" 
            }, 
            { 
              "_id" : "knows/759633306", 
              "_rev" : "759633306", 
              "_key" : "759633306", 
              "_from" : "persons/eve", 
              "_to" : "persons/bob" 
            }, 
            { 
              "_id" : "knows/759240090", 
              "_rev" : "759240090", 
              "_key" : "759240090", 
              "_from" : "persons/bob", 
              "_to" : "persons/dave" 
            } 
          ], 
          "vertices" : [ 
            { 
              "_id" : "persons/alice", 
              "_rev" : "757667226", 
              "_key" : "alice", 
              "name" : "Alice" 
            }, 
            { 
              "_id" : "persons/eve", 
              "_rev" : "758519194", 
              "_key" : "eve", 
              "name" : "Eve" 
            }, 
            { 
              "_id" : "persons/bob", 
              "_rev" : "757863834", 
              "_key" : "bob", 
              "name" : "Bob" 
            }, 
            { 
              "_id" : "persons/dave", 
              "_rev" : "758322586", 
              "_key" : "dave", 
              "name" : "Dave" 
            } 
          ] 
        } 
      ] 
    } 
  }, 
  "error" : false, 
  "code" : 200 
}

```
</pre>
</div>
</div>

<br />
If the underlying graph is cyclic, *maxIterations* should be set:
<br />
The underlying graph has two vertices *Alice* and *Bob*.
With the directed edges:
- *Alice* knows *Bob*
_ *Bob* knows *Alice*
<br />
<br />

<div id="RestTraversalMaxIterations_container">
<div id="RestTraversalMaxIterations_long">
<pre>
```
unix> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/traversal
{"startVertex":"persons/alice","graphName":"knows_graph","direction":"any","uniqueness":{"vertices":"none","edges":"none"},"maxIterations":5}

HTTP/1.1 500 Internal Error
content-type: application/json; charset=utf-8

{ 
  "error" : true, 
  "code" : 500, 
  "errorNum" : 1909, 
  "errorMessage" : "too many iterations" 
}

```
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_list_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_create_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_drop_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_list_vertex_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_vertex_collection_add_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_vertex_collection_remove_http_examples

<br />
You can remove vertex collections that are not used in any edge collection:
<br />
<br />
You cannot remove vertex collections that are used in edge collections:
<br />
<br />
@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_list_edge_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_edge_definition_add_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_edge_definition_modify_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_edge_definition_remove_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_vertex_create_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_vertex_get_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_vertex_replace_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_vertex_modify_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_vertex_delete_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_edge_create_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_edge_get_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_edge_replace_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_edge_modify_http_examples

@endDocuBlock


<!-- filename: gharial.js -->
@startDocuBlock JSF_general_graph_edge_delete_http_examples

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_edges

Select all edges for the vertices selected before.
<br />
`graph-query.edges(examples)`
<br />
Creates an AQL statement to select all edges for each of the vertices selected
in the step before.
This will include *inbound* as well as *outbound* edges.
The resulting set of edges can be filtered by defining one or more *examples*.
<br />
*examples* can have the following values:
<br />
* Empty, there is no matching executed all edges are valid.
* A string, only the edge having this value as it's id is returned.
* An example object, defining a set of attributes.
Only edges having these attributes are matched.
* A list containing example objects and/or strings.
All edges matching at least one of the elements in the list are returned.
<br />
*Examples*
<br />
To request unfiltered edges:
<br />

<div id="generalGraphFluentAQLEdgesUnfiltered_container">
<div id="generalGraphFluentAQLEdgesUnfiltered_long" onclick="$('#generalGraphFluentAQLEdgesUnfiltered_long').hide(); $('#generalGraphFluentAQLEdgesUnfiltered_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.edges().toArray();
[ 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "157685146", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  }, 
  { 
    "_id" : "relation/aliceAndCharly", 
    "_rev" : "157947290", 
    "_key" : "aliceAndCharly", 
    "_from" : "female/alice", 
    "_to" : "male/charly", 
    "type" : "friend" 
  }, 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "157685146", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  }, 
  { 
    "_id" : "relation/bobAndDiana", 
    "_rev" : "158340506", 
    "_key" : "bobAndDiana", 
    "_from" : "male/bob", 
    "_to" : "female/diana", 
    "type" : "friend" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLEdgesUnfiltered_short" onclick="$('#generalGraphFluentAQLEdgesUnfiltered_short').hide(); $('#generalGraphFluentAQLEdgesUnfiltered_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.edges().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered edges by a single example:
<br />

<div id="generalGraphFluentAQLEdgesFilteredSingle_container">
<div id="generalGraphFluentAQLEdgesFilteredSingle_long" onclick="$('#generalGraphFluentAQLEdgesFilteredSingle_long').hide(); $('#generalGraphFluentAQLEdgesFilteredSingle_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.edges({type: "married"}).toArray();
[ 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "318576026", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  }, 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "318576026", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLEdgesFilteredSingle_short" onclick="$('#generalGraphFluentAQLEdgesFilteredSingle_short').hide(); $('#generalGraphFluentAQLEdgesFilteredSingle_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.edges({type: "married"}).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered edges by multiple examples:
<br />

<div id="generalGraphFluentAQLEdgesFilteredMultiple_container">
<div id="generalGraphFluentAQLEdgesFilteredMultiple_long" onclick="$('#generalGraphFluentAQLEdgesFilteredMultiple_long').hide(); $('#generalGraphFluentAQLEdgesFilteredMultiple_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.edges([{type: "married"}, {type: "friend"}]).toArray();
[ 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "414193050", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  }, 
  { 
    "_id" : "relation/aliceAndCharly", 
    "_rev" : "414455194", 
    "_key" : "aliceAndCharly", 
    "_from" : "female/alice", 
    "_to" : "male/charly", 
    "type" : "friend" 
  }, 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "414193050", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  }, 
  { 
    "_id" : "relation/bobAndDiana", 
    "_rev" : "414848410", 
    "_key" : "bobAndDiana", 
    "_from" : "male/bob", 
    "_to" : "female/diana", 
    "type" : "friend" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLEdgesFilteredMultiple_short" onclick="$('#generalGraphFluentAQLEdgesFilteredMultiple_short').hide(); $('#generalGraphFluentAQLEdgesFilteredMultiple_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.edges([{type: "married"}, {type: "friend"}]).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_outEdges

Select all outbound edges for the vertices selected before.
<br />
`graph-query.outEdges(examples)`
<br />
Creates an AQL statement to select all *outbound* edges for each of the vertices selected
in the step before.
The resulting set of edges can be filtered by defining one or more *examples*.
<br />
*examples* can have the following values:
<br />
* Empty, there is no matching executed all edges are valid.
* A string, only the edge having this value as it's id is returned.
* An example object, defining a set of attributes.
Only edges having these attributes are matched.
* A list containing example objects and/or strings.
All edges matching at least one of the elements in the list are returned.
<br />
*Examples*
<br />
To request unfiltered outbound edges:
<br />

<div id="generalGraphFluentAQLOutEdgesUnfiltered_container">
<div id="generalGraphFluentAQLOutEdgesUnfiltered_long" onclick="$('#generalGraphFluentAQLOutEdgesUnfiltered_long').hide(); $('#generalGraphFluentAQLOutEdgesUnfiltered_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.outEdges().toArray();
[ 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "150607258", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  }, 
  { 
    "_id" : "relation/aliceAndCharly", 
    "_rev" : "150869402", 
    "_key" : "aliceAndCharly", 
    "_from" : "female/alice", 
    "_to" : "male/charly", 
    "type" : "friend" 
  }, 
  { 
    "_id" : "relation/bobAndDiana", 
    "_rev" : "151262618", 
    "_key" : "bobAndDiana", 
    "_from" : "male/bob", 
    "_to" : "female/diana", 
    "type" : "friend" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLOutEdgesUnfiltered_short" onclick="$('#generalGraphFluentAQLOutEdgesUnfiltered_short').hide(); $('#generalGraphFluentAQLOutEdgesUnfiltered_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.outEdges().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered outbound edges by a single example:
<br />

<div id="generalGraphFluentAQLOutEdgesFilteredSingle_container">
<div id="generalGraphFluentAQLOutEdgesFilteredSingle_long" onclick="$('#generalGraphFluentAQLOutEdgesFilteredSingle_long').hide(); $('#generalGraphFluentAQLOutEdgesFilteredSingle_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.outEdges({type: "married"}).toArray();
[ 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "245568922", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLOutEdgesFilteredSingle_short" onclick="$('#generalGraphFluentAQLOutEdgesFilteredSingle_short').hide(); $('#generalGraphFluentAQLOutEdgesFilteredSingle_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.outEdges({type: "married"}).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered outbound edges by multiple examples:
<br />

<div id="generalGraphFluentAQLOutEdgesFilteredMultiple_container">
<div id="generalGraphFluentAQLOutEdgesFilteredMultiple_long" onclick="$('#generalGraphFluentAQLOutEdgesFilteredMultiple_long').hide(); $('#generalGraphFluentAQLOutEdgesFilteredMultiple_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.outEdges([{type: "married"}, {type: "friend"}]).toArray();
[ 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "360715674", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  }, 
  { 
    "_id" : "relation/aliceAndCharly", 
    "_rev" : "360977818", 
    "_key" : "aliceAndCharly", 
    "_from" : "female/alice", 
    "_to" : "male/charly", 
    "type" : "friend" 
  }, 
  { 
    "_id" : "relation/bobAndDiana", 
    "_rev" : "361371034", 
    "_key" : "bobAndDiana", 
    "_from" : "male/bob", 
    "_to" : "female/diana", 
    "type" : "friend" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLOutEdgesFilteredMultiple_short" onclick="$('#generalGraphFluentAQLOutEdgesFilteredMultiple_short').hide(); $('#generalGraphFluentAQLOutEdgesFilteredMultiple_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.outEdges([{type: "married"}, {type: "friend"}]).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_inEdges

Select all inbound edges for the vertices selected before.
<br />
`graph-query.inEdges(examples)`
<br />
Creates an AQL statement to select all *inbound* edges for each of the vertices selected
in the step before.
The resulting set of edges can be filtered by defining one or more *examples*.
<br />
*examples* can have the following values:
<br />
* Empty, there is no matching executed all edges are valid.
* A string, only the edge having this value as it's id is returned.
* An example object, defining a set of attributes.
Only edges having these attributes are matched.
* A list containing example objects and/or strings.
All edges matching at least one of the elements in the list are returned.
<br />
*Examples*
<br />
To request unfiltered inbound edges:
<br />

<div id="generalGraphFluentAQLInEdgesUnfiltered_container">
<div id="generalGraphFluentAQLInEdgesUnfiltered_long" onclick="$('#generalGraphFluentAQLInEdgesUnfiltered_long').hide(); $('#generalGraphFluentAQLInEdgesUnfiltered_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.inEdges().toArray();
[ 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "147068314", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLInEdgesUnfiltered_short" onclick="$('#generalGraphFluentAQLInEdgesUnfiltered_short').hide(); $('#generalGraphFluentAQLInEdgesUnfiltered_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.inEdges().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered inbound edges by a single example:
<br />

<div id="generalGraphFluentAQLInEdgesFilteredSingle_container">
<div id="generalGraphFluentAQLInEdgesFilteredSingle_long" onclick="$('#generalGraphFluentAQLInEdgesFilteredSingle_long').hide(); $('#generalGraphFluentAQLInEdgesFilteredSingle_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.inEdges({type: "married"}).toArray();
[ 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "54465946", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLInEdgesFilteredSingle_short" onclick="$('#generalGraphFluentAQLInEdgesFilteredSingle_short').hide(); $('#generalGraphFluentAQLInEdgesFilteredSingle_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.inEdges({type: "married"}).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered inbound edges by multiple examples:
<br />

<div id="generalGraphFluentAQLInEdgesFilteredMultiple_container">
<div id="generalGraphFluentAQLInEdgesFilteredMultiple_long" onclick="$('#generalGraphFluentAQLInEdgesFilteredMultiple_long').hide(); $('#generalGraphFluentAQLInEdgesFilteredMultiple_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.inEdges([{type: "married"}, {type: "friend"}]).toArray();
[ 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "136385946", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLInEdgesFilteredMultiple_short" onclick="$('#generalGraphFluentAQLInEdgesFilteredMultiple_short').hide(); $('#generalGraphFluentAQLInEdgesFilteredMultiple_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices([{name: "Alice"}, {name: "Bob"}]);
arangosh> query.inEdges([{type: "married"}, {type: "friend"}]).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_vertices

Select all vertices connected to the edges selected before.
<br />
`graph-query.vertices(examples)`
<br />
Creates an AQL statement to select all vertices for each of the edges selected
in the step before.
This includes all vertices contained in *_from* as well as *_to* attribute of the edges.
The resulting set of vertices can be filtered by defining one or more *examples*.
<br />
*examples* can have the following values:
<br />
* Empty, there is no matching executed all vertices are valid.
* A string, only the vertex having this value as it's id is returned.
* An example object, defining a set of attributes.
Only vertices having these attributes are matched.
* A list containing example objects and/or strings.
All vertices matching at least one of the elements in the list are returned.
<br />
*Examples*
<br />
To request unfiltered vertices:
<br />

<div id="generalGraphFluentAQLVerticesUnfiltered_container">
<div id="generalGraphFluentAQLVerticesUnfiltered_long" onclick="$('#generalGraphFluentAQLVerticesUnfiltered_long').hide(); $('#generalGraphFluentAQLVerticesUnfiltered_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.vertices().toArray();
[ 
  { 
    "_id" : "female/alice", 
    "_rev" : "286659994", 
    "_key" : "alice", 
    "name" : "Alice" 
  }, 
  { 
    "_id" : "male/bob", 
    "_rev" : "287053210", 
    "_key" : "bob", 
    "name" : "Bob" 
  }, 
  { 
    "_id" : "female/diana", 
    "_rev" : "287446426", 
    "_key" : "diana", 
    "name" : "Diana" 
  }, 
  { 
    "_id" : "male/charly", 
    "_rev" : "287249818", 
    "_key" : "charly", 
    "name" : "Charly" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLVerticesUnfiltered_short" onclick="$('#generalGraphFluentAQLVerticesUnfiltered_short').hide(); $('#generalGraphFluentAQLVerticesUnfiltered_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.vertices().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered vertices by a single example:
<br />

<div id="generalGraphFluentAQLVerticesFilteredSingle_container">
<div id="generalGraphFluentAQLVerticesFilteredSingle_long" onclick="$('#generalGraphFluentAQLVerticesFilteredSingle_long').hide(); $('#generalGraphFluentAQLVerticesFilteredSingle_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.vertices({name: "Alice"}).toArray();
[ 
  { 
    "_id" : "female/alice", 
    "_rev" : "142349722", 
    "_key" : "alice", 
    "name" : "Alice" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLVerticesFilteredSingle_short" onclick="$('#generalGraphFluentAQLVerticesFilteredSingle_short').hide(); $('#generalGraphFluentAQLVerticesFilteredSingle_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.vertices({name: "Alice"}).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered vertices by multiple examples:
<br />

<div id="generalGraphFluentAQLVerticesFilteredMultiple_container">
<div id="generalGraphFluentAQLVerticesFilteredMultiple_long" onclick="$('#generalGraphFluentAQLVerticesFilteredMultiple_long').hide(); $('#generalGraphFluentAQLVerticesFilteredMultiple_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.vertices([{name: "Alice"}, {name: "Charly"}]).toArray();
[ 
  { 
    "_id" : "female/alice", 
    "_rev" : "152966554", 
    "_key" : "alice", 
    "name" : "Alice" 
  }, 
  { 
    "_id" : "male/charly", 
    "_rev" : "153556378", 
    "_key" : "charly", 
    "name" : "Charly" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLVerticesFilteredMultiple_short" onclick="$('#generalGraphFluentAQLVerticesFilteredMultiple_short').hide(); $('#generalGraphFluentAQLVerticesFilteredMultiple_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.vertices([{name: "Alice"}, {name: "Charly"}]).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_fromVertices

Select all vertices where the edges selected before start.
<br />
`graph-query.vertices(examples)`
<br />
Creates an AQL statement to select the set of vertices where the edges selected
in the step before start at.
This includes all vertices contained in *_from* attribute of the edges.
The resulting set of vertices can be filtered by defining one or more *examples*.
<br />
*examples* can have the following values:
<br />
* Empty, there is no matching executed all vertices are valid.
* A string, only the vertex having this value as it's id is returned.
* An example object, defining a set of attributes.
Only vertices having these attributes are matched.
* A list containing example objects and/or strings.
All vertices matching at least one of the elements in the list are returned.
<br />
*Examples*
<br />
To request unfiltered starting vertices:
<br />

<div id="generalGraphFluentAQLFromVerticesUnfiltered_container">
<div id="generalGraphFluentAQLFromVerticesUnfiltered_long" onclick="$('#generalGraphFluentAQLFromVerticesUnfiltered_long').hide(); $('#generalGraphFluentAQLFromVerticesUnfiltered_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.fromVertices().toArray();
[ 
  { 
    "_id" : "female/alice", 
    "_rev" : "126490010", 
    "_key" : "alice", 
    "name" : "Alice" 
  }, 
  { 
    "_id" : "male/charly", 
    "_rev" : "127079834", 
    "_key" : "charly", 
    "name" : "Charly" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLFromVerticesUnfiltered_short" onclick="$('#generalGraphFluentAQLFromVerticesUnfiltered_short').hide(); $('#generalGraphFluentAQLFromVerticesUnfiltered_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.fromVertices().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered starting vertices by a single example:
<br />

<div id="generalGraphFluentAQLFromVerticesFilteredSingle_container">
<div id="generalGraphFluentAQLFromVerticesFilteredSingle_long" onclick="$('#generalGraphFluentAQLFromVerticesFilteredSingle_long').hide(); $('#generalGraphFluentAQLFromVerticesFilteredSingle_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.fromVertices({name: "Alice"}).toArray();
[ 
  { 
    "_id" : "female/alice", 
    "_rev" : "381687194", 
    "_key" : "alice", 
    "name" : "Alice" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLFromVerticesFilteredSingle_short" onclick="$('#generalGraphFluentAQLFromVerticesFilteredSingle_short').hide(); $('#generalGraphFluentAQLFromVerticesFilteredSingle_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.fromVertices({name: "Alice"}).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered starting vertices by multiple examples:
<br />

<div id="generalGraphFluentAQLFromVerticesFilteredMultiple_container">
<div id="generalGraphFluentAQLFromVerticesFilteredMultiple_long" onclick="$('#generalGraphFluentAQLFromVerticesFilteredMultiple_long').hide(); $('#generalGraphFluentAQLFromVerticesFilteredMultiple_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.fromVertices([{name: "Alice"}, {name: "Charly"}]).toArray();
[ 
  { 
    "_id" : "female/alice", 
    "_rev" : "416552346", 
    "_key" : "alice", 
    "name" : "Alice" 
  }, 
  { 
    "_id" : "male/charly", 
    "_rev" : "417142170", 
    "_key" : "charly", 
    "name" : "Charly" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLFromVerticesFilteredMultiple_short" onclick="$('#generalGraphFluentAQLFromVerticesFilteredMultiple_short').hide(); $('#generalGraphFluentAQLFromVerticesFilteredMultiple_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.fromVertices([{name: "Alice"}, {name: "Charly"}]).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_toVertices

Select all vertices targeted by the edges selected before.
<br />
`graph-query.vertices(examples)`
<br />
Creates an AQL statement to select the set of vertices where the edges selected
in the step before end in.
This includes all vertices contained in *_to* attribute of the edges.
The resulting set of vertices can be filtered by defining one or more *examples*.
<br />
*examples* can have the following values:
<br />
* Empty, there is no matching executed all vertices are valid.
* A string, only the vertex having this value as it's id is returned.
* An example object, defining a set of attributes.
Only vertices having these attributes are matched.
* A list containing example objects and/or strings.
All vertices matching at least one of the elements in the list are returned.
<br />
*Examples*
<br />
To request unfiltered starting vertices:
<br />

<div id="generalGraphFluentAQLToVerticesUnfiltered_container">
<div id="generalGraphFluentAQLToVerticesUnfiltered_long" onclick="$('#generalGraphFluentAQLToVerticesUnfiltered_long').hide(); $('#generalGraphFluentAQLToVerticesUnfiltered_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.toVertices().toArray();
[ 
  { 
    "_id" : "male/bob", 
    "_rev" : "90183066", 
    "_key" : "bob", 
    "name" : "Bob" 
  }, 
  { 
    "_id" : "female/diana", 
    "_rev" : "90576282", 
    "_key" : "diana", 
    "name" : "Diana" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLToVerticesUnfiltered_short" onclick="$('#generalGraphFluentAQLToVerticesUnfiltered_short').hide(); $('#generalGraphFluentAQLToVerticesUnfiltered_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.toVertices().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered starting vertices by a single example:
<br />

<div id="generalGraphFluentAQLToVerticesFilteredSingle_container">
<div id="generalGraphFluentAQLToVerticesFilteredSingle_long">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.toVertices({name: "Alice"}).toArray();
[ ]
```
</pre>
</div>
</div>

<br />
To request filtered starting vertices by multiple examples:
<br />

<div id="generalGraphFluentAQLToVerticesFilteredMultiple_container">
<div id="generalGraphFluentAQLToVerticesFilteredMultiple_long">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.toVertices([{name: "Alice"}, {name: "Charly"}]).toArray();
[ ]
```
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_path

The result of the query is the path to all elements.
<br />
By defaut the result of the generated AQL query is the set of elements passing the last matches.
So having a `vertices()` query as the last step the result will be set of vertices.
Using `path()` as the last action before requesting the result
will modify the result such that the path required to find the set vertices is returned.
<br />
*Examples*
<br />
Request the iteratively explored path using vertices and edges:
<br />

<div id="generalGraphFluentAQLPathSimple_container">
<div id="generalGraphFluentAQLPathSimple_long" onclick="$('#generalGraphFluentAQLPathSimple_long').hide(); $('#generalGraphFluentAQLPathSimple_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices({name: "Alice"});
arangosh> query.outEdges().toVertices().path().toArray();
[ 
  [ 
    { 
      "_id" : "female/alice", 
      "_rev" : "169088410", 
      "_key" : "alice", 
      "name" : "Alice" 
    }, 
    { 
      "_id" : "relation/aliceAndBob", 
      "_rev" : "170268058", 
      "_key" : "aliceAndBob", 
      "_from" : "female/alice", 
      "_to" : "male/bob", 
      "type" : "married" 
    }, 
    { 
      "_id" : "male/bob", 
      "_rev" : "169481626", 
      "_key" : "bob", 
      "name" : "Bob" 
    } 
  ], 
  [ 
    { 
      "_id" : "female/alice", 
      "_rev" : "169088410", 
      "_key" : "alice", 
      "name" : "Alice" 
    }, 
    { 
      "_id" : "relation/aliceAndCharly", 
      "_rev" : "170530202", 
      "_key" : "aliceAndCharly", 
      "_from" : "female/alice", 
      "_to" : "male/charly", 
      "type" : "friend" 
    }, 
    { 
      "_id" : "male/charly", 
      "_rev" : "169678234", 
      "_key" : "charly", 
      "name" : "Charly" 
    } 
  ] 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLPathSimple_short" onclick="$('#generalGraphFluentAQLPathSimple_short').hide(); $('#generalGraphFluentAQLPathSimple_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices({name: "Alice"});
arangosh> query.outEdges().toVertices().path().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
When requesting neighbors the path to these neighbors is expanded:
<br />

<div id="generalGraphFluentAQLPathNeighbors_container">
<div id="generalGraphFluentAQLPathNeighbors_long" onclick="$('#generalGraphFluentAQLPathNeighbors_long').hide(); $('#generalGraphFluentAQLPathNeighbors_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices({name: "Alice"});
arangosh> query.neighbors().path().toArray();
[ 
  [ 
    { 
      "_id" : "female/alice", 
      "_rev" : "44570010", 
      "_key" : "alice", 
      "name" : "Alice" 
    }, 
    { 
      "edges" : [ 
        { 
          "_id" : "relation/aliceAndBob", 
          "_rev" : "45749658", 
          "_key" : "aliceAndBob", 
          "_from" : "female/alice", 
          "_to" : "male/bob", 
          "type" : "married" 
        } 
      ], 
      "vertices" : [ 
        { 
          "_id" : "female/alice", 
          "_rev" : "44570010", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "male/bob", 
          "_rev" : "44963226", 
          "_key" : "bob", 
          "name" : "Bob" 
        } 
      ] 
    } 
  ], 
  [ 
    { 
      "_id" : "female/alice", 
      "_rev" : "44570010", 
      "_key" : "alice", 
      "name" : "Alice" 
    }, 
    { 
      "edges" : [ 
        { 
          "_id" : "relation/aliceAndCharly", 
          "_rev" : "46011802", 
          "_key" : "aliceAndCharly", 
          "_from" : "female/alice", 
          "_to" : "male/charly", 
          "type" : "friend" 
        } 
      ], 
      "vertices" : [ 
        { 
          "_id" : "female/alice", 
          "_rev" : "44570010", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "male/charly", 
          "_rev" : "45159834", 
          "_key" : "charly", 
          "name" : "Charly" 
        } 
      ] 
    } 
  ] 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLPathNeighbors_short" onclick="$('#generalGraphFluentAQLPathNeighbors_short').hide(); $('#generalGraphFluentAQLPathNeighbors_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices({name: "Alice"});
arangosh> query.neighbors().path().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_neighbors

Select all neighbors of the vertices selected in the step before.
<br />
`graph-query.neighbors(examples)`
<br />
Creates an AQL statement to select all neighbors for each of the vertices selected
in the step before.
The resulting set of vertices can be filtered by defining one or more *examples*.
<br />
*examples* can have the following values:
<br />
* Empty, there is no matching executed all vertices are valid.
* A string, only the vertex having this value as it's id is returned.
* An example object, defining a set of attributes.
Only vertices having these attributes are matched.
* A list containing example objects and/or strings.
All vertices matching at least one of the elements in the list are returned.
<br />
*Examples*
<br />
To request unfiltered neighbors:
<br />

<div id="generalGraphFluentAQLNeighborsUnfiltered_container">
<div id="generalGraphFluentAQLNeighborsUnfiltered_long" onclick="$('#generalGraphFluentAQLNeighborsUnfiltered_long').hide(); $('#generalGraphFluentAQLNeighborsUnfiltered_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices({name: "Alice"});
arangosh> query.neighbors().toArray();
[ 
  { 
    "_id" : "male/bob", 
    "_rev" : "218961306", 
    "_key" : "bob", 
    "name" : "Bob" 
  }, 
  { 
    "_id" : "male/charly", 
    "_rev" : "219157914", 
    "_key" : "charly", 
    "name" : "Charly" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLNeighborsUnfiltered_short" onclick="$('#generalGraphFluentAQLNeighborsUnfiltered_short').hide(); $('#generalGraphFluentAQLNeighborsUnfiltered_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices({name: "Alice"});
arangosh> query.neighbors().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered neighbors by a single example:
<br />

<div id="generalGraphFluentAQLNeighborsFilteredSingle_container">
<div id="generalGraphFluentAQLNeighborsFilteredSingle_long" onclick="$('#generalGraphFluentAQLNeighborsFilteredSingle_long').hide(); $('#generalGraphFluentAQLNeighborsFilteredSingle_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices({name: "Alice"});
arangosh> query.neighbors({name: "Bob"}).toArray();
[ 
  { 
    "_id" : "male/bob", 
    "_rev" : "93853082", 
    "_key" : "bob", 
    "name" : "Bob" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLNeighborsFilteredSingle_short" onclick="$('#generalGraphFluentAQLNeighborsFilteredSingle_short').hide(); $('#generalGraphFluentAQLNeighborsFilteredSingle_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices({name: "Alice"});
arangosh> query.neighbors({name: "Bob"}).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered neighbors by multiple examples:
<br />

<div id="generalGraphFluentAQLNeighborsFilteredMultiple_container">
<div id="generalGraphFluentAQLNeighborsFilteredMultiple_long" onclick="$('#generalGraphFluentAQLNeighborsFilteredMultiple_long').hide(); $('#generalGraphFluentAQLNeighborsFilteredMultiple_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.vertices([{name: "Bob"}, {name: "Charly"}]).toArray();
[ 
  { 
    "_id" : "male/bob", 
    "_rev" : "41424282", 
    "_key" : "bob", 
    "name" : "Bob" 
  }, 
  { 
    "_id" : "male/charly", 
    "_rev" : "41620890", 
    "_key" : "charly", 
    "name" : "Charly" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLNeighborsFilteredMultiple_short" onclick="$('#generalGraphFluentAQLNeighborsFilteredMultiple_short').hide(); $('#generalGraphFluentAQLNeighborsFilteredMultiple_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.vertices([{name: "Bob"}, {name: "Charly"}]).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_restrict

Restricts the last statement in the chain to return
only elements of a specified set of collections
<br />
`graph-query.restrict(restrictions)`
<br />
By default all collections in the graph are searched for matching elements
whenever vertices and edges are requested.
Using *restrict* after such a statement allows to restrict the search
to a specific set of collections within the graph.
Restriction is only applied to this one part of the query.
It does not effect earlier or later statements.
<br />
*restrictions* can have the following values:
<br />
* A string defining the name of one specific collection in the graph.
Only elements from this collection are used for matching
* A list of strings defining a set of collection names.
Elements from all collections in this set are used for matching
<br />
*Examples*
<br />
Request all directly connected vertices unrestricted:
<br />

<div id="generalGraphFluentAQLUnrestricted_container">
<div id="generalGraphFluentAQLUnrestricted_long" onclick="$('#generalGraphFluentAQLUnrestricted_long').hide(); $('#generalGraphFluentAQLUnrestricted_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices({name: "Alice"});
arangosh> query.edges().vertices().toArray();
[ 
  { 
    "_id" : "female/alice", 
    "_rev" : "463345050", 
    "_key" : "alice", 
    "name" : "Alice" 
  }, 
  { 
    "_id" : "male/bob", 
    "_rev" : "463738266", 
    "_key" : "bob", 
    "name" : "Bob" 
  }, 
  { 
    "_id" : "female/alice", 
    "_rev" : "463345050", 
    "_key" : "alice", 
    "name" : "Alice" 
  }, 
  { 
    "_id" : "male/charly", 
    "_rev" : "463934874", 
    "_key" : "charly", 
    "name" : "Charly" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLUnrestricted_short" onclick="$('#generalGraphFluentAQLUnrestricted_short').hide(); $('#generalGraphFluentAQLUnrestricted_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices({name: "Alice"});
arangosh> query.edges().vertices().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Apply a restriction to the directly connected vertices:
<br />

<div id="generalGraphFluentAQLRestricted_container">
<div id="generalGraphFluentAQLRestricted_long" onclick="$('#generalGraphFluentAQLRestricted_long').hide(); $('#generalGraphFluentAQLRestricted_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices({name: "Alice"});
arangosh> query.edges().vertices().restrict("female").toArray();
[ 
  { 
    "_id" : "female/alice", 
    "_rev" : "206771610", 
    "_key" : "alice", 
    "name" : "Alice" 
  }, 
  { 
    "_id" : "female/alice", 
    "_rev" : "206771610", 
    "_key" : "alice", 
    "name" : "Alice" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLRestricted_short" onclick="$('#generalGraphFluentAQLRestricted_short').hide(); $('#generalGraphFluentAQLRestricted_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices({name: "Alice"});
arangosh> query.edges().vertices().restrict("female").toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Restriction of a query is only valid for collections known to the graph:
//

<div id="generalGraphFluentAQLRestrictedUnknown_container">
<div id="generalGraphFluentAQLRestrictedUnknown_long">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices({name: "Alice"});
arangosh> query.edges().vertices().restrict(["female", "male", "products"]).toArray();
[ArangoError 10: vertex collections: products are not known to the graph]
```
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_filter

Filter the result of the query
<br />
`graph-query.filter(examples)`
<br />
This can be used to further specfiy the expected result of the query.
The result set is reduced to the set of elements that matches the given *examples*.
<br />
*examples* can have the following values:
<br />
* A string, only the elements having this value as it's id is returned.
* An example object, defining a set of attributes.
Only elements having these attributes are matched.
* A list containing example objects and/or strings.
All elements matching at least one of the elements in the list are returned.
<br />
*Examples*
<br />
Request vertices unfiltered:
<br />

<div id="generalGraphFluentAQLUnfilteredVertices_container">
<div id="generalGraphFluentAQLUnfilteredVertices_long" onclick="$('#generalGraphFluentAQLUnfilteredVertices_long').hide(); $('#generalGraphFluentAQLUnfilteredVertices_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.toVertices().toArray();
[ 
  { 
    "_id" : "male/bob", 
    "_rev" : "409867674", 
    "_key" : "bob", 
    "name" : "Bob" 
  }, 
  { 
    "_id" : "female/diana", 
    "_rev" : "410260890", 
    "_key" : "diana", 
    "name" : "Diana" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLUnfilteredVertices_short" onclick="$('#generalGraphFluentAQLUnfilteredVertices_short').hide(); $('#generalGraphFluentAQLUnfilteredVertices_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.toVertices().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Request vertices filtered:
<br />

<div id="generalGraphFluentAQLFilteredVertices_container">
<div id="generalGraphFluentAQLFilteredVertices_long">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.toVertices().filter({name: "Alice"}).toArray();
[ ]
```
</pre>
</div>
</div>

<br />
Request edges unfiltered:
<br />

<div id="generalGraphFluentAQLUnfilteredEdges_container">
<div id="generalGraphFluentAQLUnfilteredEdges_long" onclick="$('#generalGraphFluentAQLUnfilteredEdges_long').hide(); $('#generalGraphFluentAQLUnfilteredEdges_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.toVertices().outEdges().toArray();
[ 
  { 
    "_id" : "relation/bobAndDiana", 
    "_rev" : "212145562", 
    "_key" : "bobAndDiana", 
    "_from" : "male/bob", 
    "_to" : "female/diana", 
    "type" : "friend" 
  } 
]
```
</pre>
</div>
<div id="generalGraphFluentAQLUnfilteredEdges_short" onclick="$('#generalGraphFluentAQLUnfilteredEdges_short').hide(); $('#generalGraphFluentAQLUnfilteredEdges_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.toVertices().outEdges().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Request edges filtered:
<br />

<div id="generalGraphFluentAQLFilteredEdges_container">
<div id="generalGraphFluentAQLFilteredEdges_long">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._edges({type: "married"});
arangosh> query.toVertices().outEdges().filter({type: "married"}).toArray();
[ ]
```
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_toArray

Returns an array containing the complete result.
<br />
`graph-query.toArray()`
<br />
This function executes the generated query and returns the
entire result as one array.
ToArray does not return the generated query anymore and
hence can only be the endpoint of a query.
However keeping a reference to the query before
executing allows to chain further statements to it.
<br />
*Examples*
<br />
To collect the entire result of a query toArray can be used:
<br />

<div id="generalGraphFluentAQLToArray_container">
<div id="generalGraphFluentAQLToArray_long">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
[ArangoError 1210: cannot create document, unique constraint violated]
```
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_count

Returns the number of returned elements if the query is executed.
<br />
`graph-query.count()`
<br />
This function determines the amount of elements to be expected within the result of the query.
It can be used at the beginning of execution of the query
before using *next()* or in between *next()* calls.
The query object maintains a cursor of the query for you.
*count()* does not change the cursor position.
<br />
*Examples*
<br />
To count the number of matched elements:
<br />

<div id="generalGraphFluentAQLCount_container">
<div id="generalGraphFluentAQLCount_long">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices();
arangosh> query.count();
4
```
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_hasNext

Checks if the query has further results.
<br />
`graph-query.neighbors(examples)`
<br />
The generated statement maintains a cursor for you.
If this cursor is already present *hasNext()* will
use this cursors position to determine if there are
further results available.
If the query has not yet been executed *hasNext()*
will execute it and create the cursor for you.
<br />
*Examples*
<br />
Start query execution with hasNext:
<br />

<div id="generalGraphFluentAQLHasNext_container">
<div id="generalGraphFluentAQLHasNext_long">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices();
arangosh> query.hasNext();
true
```
</pre>
</div>
</div>

<br />
Iterate over the result as long as it has more elements:
<br />

<div id="generalGraphFluentAQLHasNextIteration_container">
<div id="generalGraphFluentAQLHasNextIteration_long">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices();
arangosh> while (query.hasNext()) {query.next();}
```
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_fluent_aql_next

Request the next element in the result.
<br />
`graph-query.next()`
<br />
The generated statement maintains a cursor for you.
If this cursor is already present *next()* will
use this cursors position to deliver the next result.
Also the cursor position will be moved by one.
If the query has not yet been executed *next()*
will execute it and create the cursor for you.
It will throw an error of your query has no further results.
<br />
*Examples*
<br />
Request some elements with next:
<br />

<div id="generalGraphFluentAQLNext_container">
<div id="generalGraphFluentAQLNext_long" onclick="$('#generalGraphFluentAQLNext_long').hide(); $('#generalGraphFluentAQLNext_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices();
arangosh> query.next();
{ 
  "_id" : "female/alice", 
  "_rev" : "283121050", 
  "_key" : "alice", 
  "name" : "Alice" 
}
arangosh> query.next();
{ 
  "_id" : "female/diana", 
  "_rev" : "283907482", 
  "_key" : "diana", 
  "name" : "Diana" 
}
arangosh> query.next();
{ 
  "_id" : "male/bob", 
  "_rev" : "283514266", 
  "_key" : "bob", 
  "name" : "Bob" 
}
arangosh> query.next();
{ 
  "_id" : "male/charly", 
  "_rev" : "283710874", 
  "_key" : "charly", 
  "name" : "Charly" 
}
```
</pre>
</div>
<div id="generalGraphFluentAQLNext_short" onclick="$('#generalGraphFluentAQLNext_short').hide(); $('#generalGraphFluentAQLNext_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices();
arangosh> query.next();
arangosh> query.next();
arangosh> query.next();
arangosh> query.next();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
The cursor is recreated if the query is changed:
<br />

<div id="generalGraphFluentAQLNextRecreate_container">
<div id="generalGraphFluentAQLNextRecreate_long" onclick="$('#generalGraphFluentAQLNextRecreate_long').hide(); $('#generalGraphFluentAQLNextRecreate_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices();
arangosh> query.next();
{ 
  "_id" : "female/alice", 
  "_rev" : "213849498", 
  "_key" : "alice", 
  "name" : "Alice" 
}
arangosh> query.edges();
[ GraphAQL social
.vertices()
.edges() ] 
arangosh> query.next();
{ 
  "_id" : "relation/aliceAndBob", 
  "_rev" : "215029146", 
  "_key" : "aliceAndBob", 
  "_from" : "female/alice", 
  "_to" : "male/bob", 
  "type" : "married" 
}
```
</pre>
</div>
<div id="generalGraphFluentAQLNextRecreate_short" onclick="$('#generalGraphFluentAQLNextRecreate_short').hide(); $('#generalGraphFluentAQLNextRecreate_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> var query = g._vertices();
arangosh> query.next();
arangosh> query.edges();
arangosh> query.next();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_undirectedRelation

<br />
`general-graph._undirectedRelation(relationName, vertexCollections)`
*Define an undirected relation.*
<br />
Defines an undirected relation with the name *relationName* using the
list of *vertexCollections*. This relation allows the user to store
edges in any direction between any pair of vertices within the
*vertexCollections*.
<br />
*Examples*
<br />
To define simple relation with only one vertex collection:
<br />

<div id="generalGraphUndirectedRelationDefinition1_container">
<div id="generalGraphUndirectedRelationDefinition1_long" onclick="$('#generalGraphUndirectedRelationDefinition1_long').hide(); $('#generalGraphUndirectedRelationDefinition1_short').show();" style="Display: none;">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> graph._undirectedRelationDefinition("friend", "user");
{ 
  "collection" : "friend", 
  "from" : [ 
    "user" 
  ], 
  "to" : [ 
    "user" 
  ] 
}
```
</pre>
</div>
<div id="generalGraphUndirectedRelationDefinition1_short" onclick="$('#generalGraphUndirectedRelationDefinition1_short').hide(); $('#generalGraphUndirectedRelationDefinition1_long').show();">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> graph._undirectedRelationDefinition("friend", "user");
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To define a relation between several vertex collections:
<br />

<div id="generalGraphUndirectedRelationDefinition2_container">
<div id="generalGraphUndirectedRelationDefinition2_long" onclick="$('#generalGraphUndirectedRelationDefinition2_long').hide(); $('#generalGraphUndirectedRelationDefinition2_short').show();" style="Display: none;">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> graph._undirectedRelationDefinition("marriage", ["female", "male"]);
{ 
  "collection" : "marriage", 
  "from" : [ 
    "female", 
    "male" 
  ], 
  "to" : [ 
    "female", 
    "male" 
  ] 
}
```
</pre>
</div>
<div id="generalGraphUndirectedRelationDefinition2_short" onclick="$('#generalGraphUndirectedRelationDefinition2_short').hide(); $('#generalGraphUndirectedRelationDefinition2_long').show();">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> graph._undirectedRelationDefinition("marriage", ["female", "male"]);
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_directedRelation

<br />
`general-graph._directedRelation(relationName, fromVertexCollections, toVertexCollections)`
*Define a directed relation.*
<br />
The *relationName* defines the name of this relation and references to the underlying edge collection.
The *fromVertexCollections* is an Array of document collections holding the start vertices.
The *toVertexCollections* is an Array of document collections holding the target vertices.
Relations are only allowed in the direction from any collection in *fromVertexCollections*
to any collection in *toVertexCollections*.
<br />
*Examples*
<br />

<div id="generalGraphDirectedRelationDefinition_container">
<div id="generalGraphDirectedRelationDefinition_long" onclick="$('#generalGraphDirectedRelationDefinition_long').hide(); $('#generalGraphDirectedRelationDefinition_short').show();" style="Display: none;">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> graph._directedRelationDefinition("has_bought", ["Customer", "Company"], ["Groceries", "Electronics"]);
{ 
  "collection" : "has_bought", 
  "from" : [ 
    "Customer", 
    "Company" 
  ], 
  "to" : [ 
    "Groceries", 
    "Electronics" 
  ] 
}
```
</pre>
</div>
<div id="generalGraphDirectedRelationDefinition_short" onclick="$('#generalGraphDirectedRelationDefinition_short').hide(); $('#generalGraphDirectedRelationDefinition_long').show();">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> graph._directedRelationDefinition("has_bought", ["Customer", "Company"], ["Groceries", "Electronics"]);
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_list_call

`general-graph._list()`
*List all graphs.*
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_list_info

Lists all graph names stored in this database.
<br />
*Examples*
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_list_examples

<br />

<div id="generalGraphList_container">
<div id="generalGraphList_long" onclick="$('#generalGraphList_long').hide(); $('#generalGraphList_short').show();" style="Display: none;">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> graph._list();
[ 
  "routeplanner", 
  "social" 
]
```
</pre>
</div>
<div id="generalGraphList_short" onclick="$('#generalGraphList_short').hide(); $('#generalGraphList_long').show();">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> graph._list();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_edge_definitions

<br />
The edge definitions for a graph is an array containing arbitrary many directed
and/or undirected relations as defined below.
The list of edge definitions of a graph can be managed by the graph module itself.
This function is the entry point for the management and will return the correct list.
<br />
*Examples*
<br />
<br />

<div id="generalGraphEdgeDefinitions_container">
<div id="generalGraphEdgeDefinitions_long" onclick="$('#generalGraphEdgeDefinitions_long').hide(); $('#generalGraphEdgeDefinitions_short').show();" style="Display: none;">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> directed_relation = graph._directedRelationDefinition("lives_in", "user", "city");
{ 
  "collection" : "lives_in", 
  "from" : [ 
    "user" 
  ], 
  "to" : [ 
    "city" 
  ] 
}
arangosh> undirected_relation = graph._directedRelationDefinition("knows", "user");
method _directedRelationDefinition expects 3 arguments
```
</pre>
</div>
<div id="generalGraphEdgeDefinitions_short" onclick="$('#generalGraphEdgeDefinitions_short').hide(); $('#generalGraphEdgeDefinitions_long').show();">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> directed_relation = graph._directedRelationDefinition("lives_in", "user", "city");
arangosh> undirected_relation = graph._directedRelationDefinition("knows", "user");
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_extend_edge_definitions

<br />
In order to add more edge definitions to the graph before creating
this function can be used to add more definitions to the initial list.
<br />
*Examples*
<br />

<div id="generalGraphEdgeDefinitionsExtend_container">
<div id="generalGraphEdgeDefinitionsExtend_long" onclick="$('#generalGraphEdgeDefinitionsExtend_long').hide(); $('#generalGraphEdgeDefinitionsExtend_short').show();" style="Display: none;">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> directed_relation = graph._directedRelationDefinition("lives_in", "user", "city");
{ 
  "collection" : "lives_in", 
  "from" : [ 
    "user" 
  ], 
  "to" : [ 
    "city" 
  ] 
}
arangosh> undirected_relation = graph._directedRelationDefinition("knows", "user");
method _directedRelationDefinition expects 3 arguments
```
</pre>
</div>
<div id="generalGraphEdgeDefinitionsExtend_short" onclick="$('#generalGraphEdgeDefinitionsExtend_short').hide(); $('#generalGraphEdgeDefinitionsExtend_long').show();">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> directed_relation = graph._directedRelationDefinition("lives_in", "user", "city");
arangosh> undirected_relation = graph._directedRelationDefinition("knows", "user");
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_create

`general-graph._create(graph-name, edge-definitions, orphan-collections)`
*Create a graph*
<br />
<br />
The creation of a graph requires the name of the graph and a definition of its edges.
<br />
For every type of edge definition a convenience method exists that can be used to create a graph.
Optionaly a list of vertex collections can be added, which are not used in any edge definition.
These collections are refered to as orphan collections within this chapter.
All collections used within the creation process are created if they do not exist.
<br />
* *graph-name*: string - unique identifier of the graph
* *edge-definitions*: array - list of edge definition objects
* *orphan-collections*: array - list of additonal vertex collection names
<br />
*Examples*
<br />
Create an empty graph, edge definitions can be added at runtime:
<br />

<div id="generalGraphCreateGraph_container">
<div id="generalGraphCreateGraph_long">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> g = graph._create("mygraph");
[ Graph mygraph EdgeDefinitions: [ ] ]
true
```
</pre>
</div>
</div>

<br />
Create a graph with edge definitions and orphan collections:
<br />

<div id="generalGraphCreateGraph2_container">
<div id="generalGraphCreateGraph2_long">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> g = graph._create("mygraph", [graph._undirectedRelationDefinition("relation", ["male", "female"])], ["sessions"]);
[ArangoError 1921: relationedge collection already used in edge def]
```
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_vertex_collection_save

Creates and saves a new vertex in collection *vertexCollectionName*
<br />
`general-graph.vertexCollectionName.save(data)`
<br />
*data*: json - data of vertex
<br />
*Examples*
<br />

<div id="generalGraphVertexCollectionSave_container">
<div id="generalGraphVertexCollectionSave_long" onclick="$('#generalGraphVertexCollectionSave_long').hide(); $('#generalGraphVertexCollectionSave_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.male.save({name: "Floyd", _key: "floyd"});
{ 
  "error" : false, 
  "_id" : "male/floyd", 
  "_rev" : "299963802", 
  "_key" : "floyd" 
}
```
</pre>
</div>
<div id="generalGraphVertexCollectionSave_short" onclick="$('#generalGraphVertexCollectionSave_short').hide(); $('#generalGraphVertexCollectionSave_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.male.save({name: "Floyd", _key: "floyd"});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_vertex_collection_replace

Replaces the data of a vertex in collection *vertexCollectionName*
<br />
`general-graph.vertexCollectionName.replace(vertexId, data, options)`
<br />
*vertexId*: string - id of the vertex
*data*: json - data of vertex
*options*: json - (optional) - see collection documentation
<br />
*Examples*
<br />

<div id="generalGraphVertexCollectionReplace_container">
<div id="generalGraphVertexCollectionReplace_long" onclick="$('#generalGraphVertexCollectionReplace_long').hide(); $('#generalGraphVertexCollectionReplace_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.male.save({neym: "Jon", _key: "john"});
{ 
  "error" : false, 
  "_id" : "male/john", 
  "_rev" : "352523674", 
  "_key" : "john" 
}
arangosh> g.male.replace("male/john", {name: "John"});
{ 
  "error" : false, 
  "_id" : "male/john", 
  "_rev" : "352720282", 
  "_key" : "john" 
}
```
</pre>
</div>
<div id="generalGraphVertexCollectionReplace_short" onclick="$('#generalGraphVertexCollectionReplace_short').hide(); $('#generalGraphVertexCollectionReplace_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.male.save({neym: "Jon", _key: "john"});
arangosh> g.male.replace("male/john", {name: "John"});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_vertex_collection_update

Updates the data of a vertex in collection *vertexCollectionName*
<br />
`general-graph.vertexCollectionName.update(vertexId, data, options)`
<br />
*vertexId*: string - id of the vertex
*data*: json - data of vertex
*options*: json - (optional) - see collection documentation
<br />
*Examples*
<br />

<div id="generalGraphVertexCollectionUpdate_container">
<div id="generalGraphVertexCollectionUpdate_long" onclick="$('#generalGraphVertexCollectionUpdate_long').hide(); $('#generalGraphVertexCollectionUpdate_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.female.save({name: "Lynda", _key: "linda"});
{ 
  "error" : false, 
  "_id" : "female/linda", 
  "_rev" : "365106586", 
  "_key" : "linda" 
}
arangosh> g.female.update("female/linda", {name: "Linda", _key: "linda"});
{ 
  "error" : false, 
  "_id" : "female/linda", 
  "_rev" : "365303194", 
  "_key" : "linda" 
}
```
</pre>
</div>
<div id="generalGraphVertexCollectionUpdate_short" onclick="$('#generalGraphVertexCollectionUpdate_short').hide(); $('#generalGraphVertexCollectionUpdate_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.female.save({name: "Lynda", _key: "linda"});
arangosh> g.female.update("female/linda", {name: "Linda", _key: "linda"});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_vertex_collection_remove

Removes a vertex in collection *vertexCollectionName*
<br />
`general-graph.vertexCollectionName.remove(vertexId, options)`
<br />
Additionally removes all ingoing and outgoing edges of the vertex recursively
(see [edge remove](#edge.remove)).
<br />
*Examples*
<br />

<div id="generalGraphVertexCollectionRemove_container">
<div id="generalGraphVertexCollectionRemove_long" onclick="$('#generalGraphVertexCollectionRemove_long').hide(); $('#generalGraphVertexCollectionRemove_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.male.save({name: "Kermit", _key: "kermit"});
{ 
  "error" : false, 
  "_id" : "male/kermit", 
  "_rev" : "368973210", 
  "_key" : "kermit" 
}
arangosh> db._exists("male/kermit")
true
arangosh> g.male.remove("male/kermit")
true
arangosh> db._exists("male/kermit")
false
```
</pre>
</div>
<div id="generalGraphVertexCollectionRemove_short" onclick="$('#generalGraphVertexCollectionRemove_short').hide(); $('#generalGraphVertexCollectionRemove_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.male.save({name: "Kermit", _key: "kermit"});
arangosh> db._exists("male/kermit")
arangosh> g.male.remove("male/kermit")
arangosh> db._exists("male/kermit")
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_edge_collection_save

Creates and saves a new edge from vertex *from* to vertex *to* in
collection *edgeCollectionName*
<br />
`general-graph.edgeCollectionName.save(from, to, data)`
<br />
*from*: string - id of outgoing vertex
*to*: string -  of ingoing vertex
*data*: json - data of edge
<br />
*Examples*
<br />

<div id="generalGraphEdgeCollectionSave1_container">
<div id="generalGraphEdgeCollectionSave1_long" onclick="$('#generalGraphEdgeCollectionSave1_long').hide(); $('#generalGraphEdgeCollectionSave1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.relation.save("male/bob", "female/alice", {type: "married", _key: "bobAndAlice"});
{ 
  "error" : false, 
  "_id" : "relation/bobAndAlice", 
  "_rev" : "422122906", 
  "_key" : "bobAndAlice" 
}
```
</pre>
</div>
<div id="generalGraphEdgeCollectionSave1_short" onclick="$('#generalGraphEdgeCollectionSave1_short').hide(); $('#generalGraphEdgeCollectionSave1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.relation.save("male/bob", "female/alice", {type: "married", _key: "bobAndAlice"});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
If the collections of *from* and *to* are not defined in an edgeDefinition of the graph,
the edge will not be stored.
<br />
<br />

<div id="generalGraphEdgeCollectionSave2_container">
<div id="generalGraphEdgeCollectionSave2_long">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.relation.save("relation/aliceAndBob", "female/alice", {type: "married", _key: "bobAndAlice"});
Edge is not allowed between relation/aliceAndBob and female/alice.
```
</pre>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_edge_collection_replace

Replaces the data of an edge in collection *edgeCollectionName*
<br />
`general-graph.edgeCollectionName.replace(edgeId, data, options)`
<br />
*edgeId*: string - id of the edge
*data*: json - data of edge
*options*: json - (optional) - see collection documentation
<br />
*Examples*
<br />

<div id="generalGraphEdgeCollectionReplace_container">
<div id="generalGraphEdgeCollectionReplace_long" onclick="$('#generalGraphEdgeCollectionReplace_long').hide(); $('#generalGraphEdgeCollectionReplace_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.relation.save("female/alice", "female/diana", {typo: "nose", _key: "aliceAndDiana"});
{ 
  "error" : false, 
  "_id" : "relation/aliceAndDiana", 
  "_rev" : "27334042", 
  "_key" : "aliceAndDiana" 
}
arangosh> g.relation.replace("relation/aliceAndDiana", {type: "knows"});
{ 
  "error" : false, 
  "_id" : "relation/aliceAndDiana", 
  "_rev" : "27530650", 
  "_key" : "aliceAndDiana" 
}
```
</pre>
</div>
<div id="generalGraphEdgeCollectionReplace_short" onclick="$('#generalGraphEdgeCollectionReplace_short').hide(); $('#generalGraphEdgeCollectionReplace_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.relation.save("female/alice", "female/diana", {typo: "nose", _key: "aliceAndDiana"});
arangosh> g.relation.replace("relation/aliceAndDiana", {type: "knows"});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_edge_collection_update

Updates the data of an edge in collection *edgeCollectionName*
<br />
`general-graph.edgeCollectionName.update(edgeId, data, options)`
<br />
*edgeId*: string - id of the edge
*data*: json - data of edge
*options*: json - (optional) - see collection documentation
<br />
*Examples*
<br />

<div id="generalGraphEdgeCollectionUpdate_container">
<div id="generalGraphEdgeCollectionUpdate_long" onclick="$('#generalGraphEdgeCollectionUpdate_long').hide(); $('#generalGraphEdgeCollectionUpdate_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.relation.save("female/alice", "female/diana", {type: "knows", _key: "aliceAndDiana"});
{ 
  "error" : false, 
  "_id" : "relation/aliceAndDiana", 
  "_rev" : "167253402", 
  "_key" : "aliceAndDiana" 
}
arangosh> g.relation.update("relation/aliceAndDiana", {type: "quarrelled", _key: "aliceAndDiana"});
{ 
  "error" : false, 
  "_id" : "relation/aliceAndDiana", 
  "_rev" : "167450010", 
  "_key" : "aliceAndDiana" 
}
```
</pre>
</div>
<div id="generalGraphEdgeCollectionUpdate_short" onclick="$('#generalGraphEdgeCollectionUpdate_short').hide(); $('#generalGraphEdgeCollectionUpdate_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.relation.save("female/alice", "female/diana", {type: "knows", _key: "aliceAndDiana"});
arangosh> g.relation.update("relation/aliceAndDiana", {type: "quarrelled", _key: "aliceAndDiana"});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_edge_collection_remove

Removes an edge in collection *edgeCollectionName*
<br />
`general-graph.edgeCollectionName.remove(edgeId, options)`
<br />
If this edge is used as a vertex by another edge, the other edge will be removed (recursively).
<br />
*Examples*
<br />

<div id="generalGraphEdgeCollectionRemove_container">
<div id="generalGraphEdgeCollectionRemove_long" onclick="$('#generalGraphEdgeCollectionRemove_long').hide(); $('#generalGraphEdgeCollectionRemove_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.relation.save("female/alice", "female/diana", {_key: "aliceAndDiana"});
{ 
  "error" : false, 
  "_id" : "relation/aliceAndDiana", 
  "_rev" : "250025370", 
  "_key" : "aliceAndDiana" 
}
arangosh> db._exists("relation/aliceAndDiana")
true
arangosh> g.relation.remove("relation/aliceAndDiana")
true
arangosh> db._exists("relation/aliceAndDiana")
false
```
</pre>
</div>
<div id="generalGraphEdgeCollectionRemove_short" onclick="$('#generalGraphEdgeCollectionRemove_short').hide(); $('#generalGraphEdgeCollectionRemove_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g.relation.save("female/alice", "female/diana", {_key: "aliceAndDiana"});
arangosh> db._exists("relation/aliceAndDiana")
arangosh> g.relation.remove("relation/aliceAndDiana")
arangosh> db._exists("relation/aliceAndDiana")
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_graph

`general-graph._graph(graph-name)`
*Load a graph*
<br />
A graph can be loaded by its name.
<br />
* *graph-name*: string - unique identifier of the graph
<br />
*Examples*
<br />
Load a graph:
<br />

<div id="generalGraphLoadGraph_container">
<div id="generalGraphLoadGraph_long" onclick="$('#generalGraphLoadGraph_long').hide(); $('#generalGraphLoadGraph_short').show();" style="Display: none;">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> g = graph._graph("social");
[ Graph social EdgeDefinitions: [ 
  "relation: [female, male] -> [female, male]" 
] ]
```
</pre>
</div>
<div id="generalGraphLoadGraph_short" onclick="$('#generalGraphLoadGraph_short').hide(); $('#generalGraphLoadGraph_long').show();">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> g = graph._graph("social");
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_drop

`general-graph._drop(graphName, dropCollections)`
*Remove a graph*
<br />
A graph can be dropped by its name.
This will automatically drop al collections contained in the graph as
long as they are not used within other graphs.
To drop the collections, the optional parameter *drop-collections* can be set to *true*.
<br />
* *graphName*: string - unique identifier of the graph
* *dropCollections*: boolean (optional) - define if collections should be dropped (default: false)
<br />
*Examples*
<br />
Drop a graph:
<br />

<div id="generalGraphDropGraph_container">
<div id="generalGraphDropGraph_long">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph");
arangosh> graph._drop("social");
true
```
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_edges

Select some edges from the graph.
<br />
`graph.edges(examples)`
<br />
Creates an AQL statement to select a subset of the edges stored in the graph.
This is one of the entry points for the fluent AQL interface.
It will return a mutable AQL statement which can be further refined, using the
functions described below.
The resulting set of edges can be filtered by defining one or more *examples*.
<br />
*examples* can have the following values:
<br />
* Empty, there is no matching executed all edges are valid.
* A string, only the edge having this value as it's id is returned.
* An example object, defining a set of attributes.
Only edges having these attributes are matched.
* A list containing example objects and/or strings.
All edges matching at least one of the elements in the list are returned.
<br />
*Examples*
<br />
In the examples the *toArray* function is used to print the result.
The description of this module can be found below.
<br />
To request unfiltered edges:
<br />

<div id="generalGraphEdgesUnfiltered_container">
<div id="generalGraphEdgesUnfiltered_long" onclick="$('#generalGraphEdgesUnfiltered_long').hide(); $('#generalGraphEdgesUnfiltered_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g._edges().toArray();
[ 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "295572890", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  }, 
  { 
    "_id" : "relation/aliceAndCharly", 
    "_rev" : "295835034", 
    "_key" : "aliceAndCharly", 
    "_from" : "female/alice", 
    "_to" : "male/charly", 
    "type" : "friend" 
  }, 
  { 
    "_id" : "relation/bobAndDiana", 
    "_rev" : "296228250", 
    "_key" : "bobAndDiana", 
    "_from" : "male/bob", 
    "_to" : "female/diana", 
    "type" : "friend" 
  }, 
  { 
    "_id" : "relation/charlyAndDiana", 
    "_rev" : "296031642", 
    "_key" : "charlyAndDiana", 
    "_from" : "male/charly", 
    "_to" : "female/diana", 
    "type" : "married" 
  } 
]
```
</pre>
</div>
<div id="generalGraphEdgesUnfiltered_short" onclick="$('#generalGraphEdgesUnfiltered_short').hide(); $('#generalGraphEdgesUnfiltered_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g._edges().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered edges:
<br />

<div id="generalGraphEdgesFiltered_container">
<div id="generalGraphEdgesFiltered_long" onclick="$('#generalGraphEdgesFiltered_long').hide(); $('#generalGraphEdgesFiltered_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g._edges({type: "married"}).toArray();
[ 
  { 
    "_id" : "relation/aliceAndBob", 
    "_rev" : "58004890", 
    "_key" : "aliceAndBob", 
    "_from" : "female/alice", 
    "_to" : "male/bob", 
    "type" : "married" 
  }, 
  { 
    "_id" : "relation/charlyAndDiana", 
    "_rev" : "58463642", 
    "_key" : "charlyAndDiana", 
    "_from" : "male/charly", 
    "_to" : "female/diana", 
    "type" : "married" 
  } 
]
```
</pre>
</div>
<div id="generalGraphEdgesFiltered_short" onclick="$('#generalGraphEdgesFiltered_short').hide(); $('#generalGraphEdgesFiltered_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g._edges({type: "married"}).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_vertices

Select some vertices from the graph.
<br />
`graph.vertices(examples)`
<br />
Creates an AQL statement to select a subset of the vertices stored in the graph.
This is one of the entry points for the fluent AQL interface.
It will return a mutable AQL statement which can be further refined, using the
functions described below.
The resulting set of edges can be filtered by defining one or more *examples*.
<br />
*examples* can have the following values:
<br />
* Empty, there is no matching executed all vertices are valid.
* A string, only the vertex having this value as it's id is returned.
* An example object, defining a set of attributes.
Only vertices having these attributes are matched.
* A list containing example objects and/or strings.
All vertices matching at least one of the elements in the list are returned.
<br />
*Examples*
<br />
In the examples the *toArray* function is used to print the result.
The description of this module can be found below.
<br />
To request unfiltered vertices:
<br />

<div id="generalGraphVerticesUnfiltered_container">
<div id="generalGraphVerticesUnfiltered_long" onclick="$('#generalGraphVerticesUnfiltered_long').hide(); $('#generalGraphVerticesUnfiltered_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g._vertices().toArray();
[ 
  { 
    "_id" : "female/alice", 
    "_rev" : "395580826", 
    "_key" : "alice", 
    "name" : "Alice" 
  }, 
  { 
    "_id" : "female/diana", 
    "_rev" : "396367258", 
    "_key" : "diana", 
    "name" : "Diana" 
  }, 
  { 
    "_id" : "male/bob", 
    "_rev" : "395974042", 
    "_key" : "bob", 
    "name" : "Bob" 
  }, 
  { 
    "_id" : "male/charly", 
    "_rev" : "396170650", 
    "_key" : "charly", 
    "name" : "Charly" 
  } 
]
```
</pre>
</div>
<div id="generalGraphVerticesUnfiltered_short" onclick="$('#generalGraphVerticesUnfiltered_short').hide(); $('#generalGraphVerticesUnfiltered_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g._vertices().toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
To request filtered vertices:
<br />

<div id="generalGraphVerticesFiltered_container">
<div id="generalGraphVerticesFiltered_long" onclick="$('#generalGraphVerticesFiltered_long').hide(); $('#generalGraphVerticesFiltered_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g._vertices([{name: "Alice"}, {name: "Bob"}]).toArray();
[ 
  { 
    "_id" : "female/alice", 
    "_rev" : "290854298", 
    "_key" : "alice", 
    "name" : "Alice" 
  }, 
  { 
    "_id" : "male/bob", 
    "_rev" : "291247514", 
    "_key" : "bob", 
    "name" : "Bob" 
  } 
]
```
</pre>
</div>
<div id="generalGraphVerticesFiltered_short" onclick="$('#generalGraphVerticesFiltered_short').hide(); $('#generalGraphVerticesFiltered_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g._vertices([{name: "Alice"}, {name: "Bob"}]).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_getFromVertex

Get the vertex of an edge defined as *_from*
<br />
`general-graph._getFromVertex(edgeId)`
<br />
Returns the vertex defined with the attribute *_from* of the edge with *edgeId* as its *_id*.
<br />
*Examples*
<br />

<div id="generalGraphGetFromVertex_container">
<div id="generalGraphGetFromVertex_long" onclick="$('#generalGraphGetFromVertex_long').hide(); $('#generalGraphGetFromVertex_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g._getFromVertex("relation/aliceAndBob")
{ 
  "name" : "Alice", 
  "_id" : "female/alice", 
  "_rev" : "240784794", 
  "_key" : "alice" 
}
```
</pre>
</div>
<div id="generalGraphGetFromVertex_short" onclick="$('#generalGraphGetFromVertex_short').hide(); $('#generalGraphGetFromVertex_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g._getFromVertex("relation/aliceAndBob")
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_getToVertex

Get the vertex of an edge defined as *_to*
<br />
`general-graph._getToVertex(edgeId)`
<br />
Returns the vertex defined with the attribute *_to* of the edge with *edgeId* as its *_id*.
<br />
*Examples*
<br />

<div id="generalGraphGetToVertex_container">
<div id="generalGraphGetToVertex_long" onclick="$('#generalGraphGetToVertex_long').hide(); $('#generalGraphGetToVertex_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g._getToVertex("relation/aliceAndBob")
{ 
  "name" : "Bob", 
  "_id" : "male/bob", 
  "_rev" : "37688730", 
  "_key" : "bob" 
}
```
</pre>
</div>
<div id="generalGraphGetToVertex_short" onclick="$('#generalGraphGetToVertex_short').hide(); $('#generalGraphGetToVertex_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> g._getToVertex("relation/aliceAndBob")
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_common_neighbors

<br />
`general_graph._listCommonNeighbors(vertex1Example, vertex2Examples,
optionsVertex1, optionsVertex2)`
*The general_graph._listCommonNeighbors function returns all common neighbors
of the vertices defined by the examples.*
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertex1Example and vertex2Example.
<br />
* String|Object|Array  *vertex1Example*     : An example for the desired
vertices (see below).
* String|Object|Array  *vertex2Example*     : An example for the desired
vertices (see below).
* Object               *optionsVertex1*     : Optional options, see below:
* Object               *optionsVertex2*     : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction of the
edges. Possible values are *outbound*, *inbound* and *any* (default).
* String|Object|Array  *edgeExamples*                     : A filter example
for the edges to the neighbors (see below).
* String|Object|Array  *neighborExamples*                 : An example for
the desired neighbors (see below).
* String|Array         *edgeCollectionRestriction*        : One or multiple
edge collections that should be considered.
// * String|Array         *vertexCollectionRestriction* : One or multiple
vertex collections that should be considered.
// / * Number               *minDepth*                         : Defines the minimal
depth a path to a neighbor must have to be returned (default is 1).
* Number               *maxDepth*                         : Defines the maximal
depth a path to a neighbor must have to be returned (default is 1).
<br />
Examples for vertexExample:
* {}                : Returns all possible vertices for this graph.
* *idString*        : Returns the vertex with the id *idString*.
* {*key* : *value*} : Returns the vertices that match this example.
* [{*key1* : *value1*}, {*key2* : *value2*}] : Returns the vertices that
match one of the examples.
<br />
*Examples*
<br />
A route planner example, all common neighbors of capitals.
<br />

<div id="generalGraphModuleCommonNeighbors1_container">
<div id="generalGraphModuleCommonNeighbors1_long" onclick="$('#generalGraphModuleCommonNeighbors1_long').hide(); $('#generalGraphModuleCommonNeighbors1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._listCommonNeighbors({isCapital : true}, {isCapital : true});
[ 
  { 
    "city/Berlin" : { 
      "city/Munich" : [ 
        { 
          "_id" : "city/Cologne", 
          "_rev" : "371791258", 
          "_key" : "Cologne", 
          "isCapital" : false, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "372446618", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        }, 
        { 
          "_id" : "village/Rosenheim", 
          "_rev" : "372643226", 
          "_key" : "Rosenheim", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    } 
  }, 
  { 
    "city/Munich" : { 
      "city/Berlin" : [ 
        { 
          "_id" : "city/Cologne", 
          "_rev" : "371791258", 
          "_key" : "Cologne", 
          "isCapital" : false, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "372446618", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        }, 
        { 
          "_id" : "village/Rosenheim", 
          "_rev" : "372643226", 
          "_key" : "Rosenheim", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    } 
  } 
]
```
</pre>
</div>
<div id="generalGraphModuleCommonNeighbors1_short" onclick="$('#generalGraphModuleCommonNeighbors1_short').hide(); $('#generalGraphModuleCommonNeighbors1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._listCommonNeighbors({isCapital : true}, {isCapital : true});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all common outbound neighbors of munich with any other location
which have a maximal depth of 2 :
<br />

<div id="generalGraphModuleCommonNeighbors2_container">
<div id="generalGraphModuleCommonNeighbors2_long" onclick="$('#generalGraphModuleCommonNeighbors2_long').hide(); $('#generalGraphModuleCommonNeighbors2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._listCommonNeighbors(
........>   'city/Munich', 
........>   {},
........>   {direction : 'outbound', maxDepth : 2},
........>   {direction : 'outbound', maxDepth : 2});
[ 
  { 
    "city/Munich" : { 
      "city/Berlin" : [ 
        { 
          "_id" : "city/Cologne", 
          "_rev" : "467342746", 
          "_key" : "Cologne", 
          "isCapital" : false, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "467998106", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        }, 
        { 
          "_id" : "village/Rosenheim", 
          "_rev" : "468194714", 
          "_key" : "Rosenheim", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ], 
      "city/Cologne" : [ 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "467998106", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        }, 
        { 
          "_id" : "village/Rosenheim", 
          "_rev" : "468194714", 
          "_key" : "Rosenheim", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    } 
  } 
]
```
</pre>
</div>
<div id="generalGraphModuleCommonNeighbors2_short" onclick="$('#generalGraphModuleCommonNeighbors2_short').hide(); $('#generalGraphModuleCommonNeighbors2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._listCommonNeighbors(
........>   'city/Munich', 
........>   {},
........>   {direction : 'outbound', maxDepth : 2},
........>   {direction : 'outbound', maxDepth : 2});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_amount_common_neighbors

<br />
`general_graph._amountCommonNeighbors(vertex1Example, vertex2Examples,
optionsVertex1, optionsVertex2)`
*The general_graph._amountCommonNeighbors function returns the amount of
common neighbors of the vertices defined by the examples.*
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertex1Example and vertex2Example.
<br />
* String|Object|Array  *vertex1Example*     : An example for the desired
vertices (see below).
* String|Object|Array  *vertex2Example*     : An example for the desired
vertices (see below).
* Object               *optionsVertex1*     : Optional options, see below:
* Object               *optionsVertex2*     : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction of the
edges. Possible values are *outbound*, *inbound* and *any* (default).
* String|Object|Array  *edgeExamples*                     : A filter example
for the edges to the neighbors (see below).
* String|Object|Array  *neighborExamples*                 : An example for
the desired neighbors (see below).
* String|Array         *edgeCollectionRestriction*        : One or multiple
edge collections that should be considered.
// * String|Array         *vertexCollectionRestriction* : One or multiple
vertex collections that should be considered.
// / * Number               *minDepth*                         : Defines the minimal
depth a path to a neighbor must have to be returned (default is 1).
* Number               *maxDepth*                         : Defines the maximal
depth a path to a neighbor must have to be returned (default is 1).
<br />
Examples for vertexExample:
* {}                : Returns all possible vertices for this graph.
* *idString*        : Returns the vertex with the id *idString*.
* {*key* : *value*} : Returns the vertices that match this example.
* [{*key1* : *value1*}, {*key2* : *value2*}] : Returns the vertices that
match one of the examples.
<br />
*Examples*
<br />
A route planner example, all common neighbors of capitals.
<br />

<div id="generalGraphModuleCommonNeighborsAmount1_container">
<div id="generalGraphModuleCommonNeighborsAmount1_long" onclick="$('#generalGraphModuleCommonNeighborsAmount1_long').hide(); $('#generalGraphModuleCommonNeighborsAmount1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._amountCommonNeighbors({isCapital : true}, {isCapital : true});
[ 
  { 
    "city/Berlin" : [ 
      { 
        "city/Munich" : 3 
      } 
    ] 
  }, 
  { 
    "city/Munich" : [ 
      { 
        "city/Berlin" : 3 
      } 
    ] 
  } 
]
```
</pre>
</div>
<div id="generalGraphModuleCommonNeighborsAmount1_short" onclick="$('#generalGraphModuleCommonNeighborsAmount1_short').hide(); $('#generalGraphModuleCommonNeighborsAmount1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._amountCommonNeighbors({isCapital : true}, {isCapital : true});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all common outbound neighbors of munich with any other location
which have a maximal depth of 2 :
<br />

<div id="generalGraphModuleCommonNeighborsAmount2_container">
<div id="generalGraphModuleCommonNeighborsAmount2_long" onclick="$('#generalGraphModuleCommonNeighborsAmount2_long').hide(); $('#generalGraphModuleCommonNeighborsAmount2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._amountCommonNeighbors('city/Munich', {}, {direction : 'outbound', maxDepth : 2},
........> {direction : 'outbound', maxDepth : 2});
[ 
  { 
    "city/Munich" : [ 
      { 
        "city/Berlin" : 3 
      }, 
      { 
        "city/Cologne" : 2 
      } 
    ] 
  } 
]
```
</pre>
</div>
<div id="generalGraphModuleCommonNeighborsAmount2_short" onclick="$('#generalGraphModuleCommonNeighborsAmount2_short').hide(); $('#generalGraphModuleCommonNeighborsAmount2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._amountCommonNeighbors('city/Munich', {}, {direction : 'outbound', maxDepth : 2},
........> {direction : 'outbound', maxDepth : 2});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_common_properties

<br />
`general_graph._listCommonProperties(vertex1Example, vertex2Examples,
options)`
*The general_graph._listCommonProperties function returns the vertices of
the graph that share common properties.*
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertex1Example and vertex2Example.
<br />
* String|Object|Array  *vertex1Example*     : An example for the desired
vertices (see below).
* String|Object|Array  *vertex2Example*     : An example for the desired
vertices (see below).
* Object               *options*     : Optional options, see below:
<br />
Possible options and there defaults:
// * String|Array         *vertex1CollectionRestriction* : One or multiple
vertex collections that should be considered.
* String|Array         *vertex2CollectionRestriction* : One or multiple
vertex collections that should be considered.
* String|Array         *ignoreProperties* : One or multiple
attributes of a document that should be ignored.
<br />
Examples for vertexExample:
* {}                : Returns all possible vertices for this graph.
* *idString*        : Returns the vertex with the id *idString*.
* {*key* : *value*} : Returns the vertices that match this example.
* [{*key1* : *value1*}, {*key2* : *value2*}] : Returns the vertices that
match one of the examples.
<br />
*Examples*
<br />
A route planner example, all locations with the same properties:
<br />

<div id="generalGraphModuleProperties1_container">
<div id="generalGraphModuleProperties1_long" onclick="$('#generalGraphModuleProperties1_long').hide(); $('#generalGraphModuleProperties1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._listCommonProperties({}, {});
[ 
  { 
    "city/Berlin" : [ 
      { 
        "_id" : "city/Munich", 
        "_rev" : "173282714", 
        "_key" : "Munich", 
        "isCapital" : true, 
        "population" : 1000000 
      } 
    ] 
  }, 
  { 
    "city/Cologne" : [ 
      { 
        "_id" : "village/Rosenheim", 
        "_rev" : "173938074", 
        "_key" : "Rosenheim", 
        "isCapital" : false, 
        "population" : 80000 
      }, 
      { 
        "_id" : "village/Olpe", 
        "_rev" : "173741466", 
        "_key" : "Olpe", 
        "isCapital" : false, 
        "population" : 80000 
      }, 
      { 
        "_id" : "city/Munich", 
        "_rev" : "173282714", 
        "_key" : "Munich", 
        "isCapital" : true, 
        "population" : 1000000 
      } 
    ] 
  }, 
  { 
    "city/Munich" : [ 
      { 
        "_id" : "city/Berlin", 
        "_rev" : "172889498", 
        "_key" : "Berlin", 
        "isCapital" : true, 
        "population" : 3000000 
      }, 
      { 
        "_id" : "city/Cologne", 
        "_rev" : "173086106", 
        "_key" : "Cologne", 
        "isCapital" : false, 
        "population" : 1000000 
      } 
    ] 
  }, 
  { 
    "village/Olpe" : [ 
      { 
        "_id" : "city/Cologne", 
        "_rev" : "173086106", 
        "_key" : "Cologne", 
        "isCapital" : false, 
        "population" : 1000000 
      }, 
      { 
        "_id" : "village/Rosenheim", 
        "_rev" : "173938074", 
        "_key" : "Rosenheim", 
        "isCapital" : false, 
        "population" : 80000 
      } 
    ] 
  }, 
  { 
    "village/Rosenheim" : [ 
      { 
        "_id" : "city/Cologne", 
        "_rev" : "173086106", 
        "_key" : "Cologne", 
        "isCapital" : false, 
        "population" : 1000000 
      }, 
      { 
        "_id" : "village/Olpe", 
        "_rev" : "173741466", 
        "_key" : "Olpe", 
        "isCapital" : false, 
        "population" : 80000 
      } 
    ] 
  } 
]
```
</pre>
</div>
<div id="generalGraphModuleProperties1_short" onclick="$('#generalGraphModuleProperties1_short').hide(); $('#generalGraphModuleProperties1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._listCommonProperties({}, {});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all cities which share same properties except for population.
<br />

<div id="generalGraphModuleProperties2_container">
<div id="generalGraphModuleProperties2_long" onclick="$('#generalGraphModuleProperties2_long').hide(); $('#generalGraphModuleProperties2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._listCommonProperties({}, {}, {vertex1CollectionRestriction : 'city',
........>  vertex2CollectionRestriction : 'city' ,ignoreProperties: 'population'});
[ 
  { 
    "city/Berlin" : [ 
      { 
        "_id" : "city/Munich", 
        "_rev" : "178460058", 
        "_key" : "Munich", 
        "isCapital" : true, 
        "population" : 1000000 
      } 
    ] 
  }, 
  { 
    "city/Munich" : [ 
      { 
        "_id" : "city/Berlin", 
        "_rev" : "178066842", 
        "_key" : "Berlin", 
        "isCapital" : true, 
        "population" : 3000000 
      } 
    ] 
  } 
]
```
</pre>
</div>
<div id="generalGraphModuleProperties2_short" onclick="$('#generalGraphModuleProperties2_short').hide(); $('#generalGraphModuleProperties2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._listCommonProperties({}, {}, {vertex1CollectionRestriction : 'city',
........>  vertex2CollectionRestriction : 'city' ,ignoreProperties: 'population'});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph_amount_common_properties

<br />
`general_graph._amountCommonProperties(vertex1Example, vertex2Examples,
options)`
*The general_graph._amountCommonProperties function returns the amount of vertices of
the graph that share common properties.*
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertex1Example and vertex2Example.
<br />
* String|Object|Array  *vertex1Example*     : An example for the desired
vertices (see below).
* String|Object|Array  *vertex2Example*     : An example for the desired
vertices (see below).
* Object               *options*     : Optional options, see below:
<br />
Possible options and there defaults:
// * String|Array         *vertex1CollectionRestriction* : One or multiple
vertex collections that should be considered.
* String|Array         *vertex2CollectionRestriction* : One or multiple
vertex collections that should be considered.
* String|Array         *ignoreProperties* : One or multiple
attributes of a document that should be ignored.
<br />
Examples for vertexExample:
* {}                : Returns all possible vertices for this graph.
* *idString*        : Returns the vertex with the id *idString*.
* {*key* : *value*} : Returns the vertices that match this example.
* [{*key1* : *value1*}, {*key2* : *value2*}] : Returns the vertices that
match one of the examples.
<br />
*Examples*
<br />
A route planner example, all locations with the same properties:
<br />

<div id="generalGraphModuleAmountProperties1_container">
<div id="generalGraphModuleAmountProperties1_long" onclick="$('#generalGraphModuleAmountProperties1_long').hide(); $('#generalGraphModuleAmountProperties1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._amountCommonProperties({}, {});
[ 
  { 
    "city/Berlin" : 1 
  }, 
  { 
    "city/Cologne" : 3 
  }, 
  { 
    "city/Munich" : 2 
  }, 
  { 
    "village/Olpe" : 2 
  }, 
  { 
    "village/Rosenheim" : 2 
  } 
]
```
</pre>
</div>
<div id="generalGraphModuleAmountProperties1_short" onclick="$('#generalGraphModuleAmountProperties1_short').hide(); $('#generalGraphModuleAmountProperties1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._amountCommonProperties({}, {});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all cities which share same properties except for population.
<br />

<div id="generalGraphModuleAmountProperties2_container">
<div id="generalGraphModuleAmountProperties2_long" onclick="$('#generalGraphModuleAmountProperties2_long').hide(); $('#generalGraphModuleAmountProperties2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._amountCommonProperties({}, {}, {vertex1CollectionRestriction : 'city',
........>  vertex2CollectionRestriction : 'city' ,ignoreProperties: 'population'});
[ 
  { 
    "city/Berlin" : 1 
  }, 
  { 
    "city/Munich" : 1 
  } 
]
```
</pre>
</div>
<div id="generalGraphModuleAmountProperties2_short" onclick="$('#generalGraphModuleAmountProperties2_short').hide(); $('#generalGraphModuleAmountProperties2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> g._amountCommonProperties({}, {}, {vertex1CollectionRestriction : 'city',
........>  vertex2CollectionRestriction : 'city' ,ignoreProperties: 'population'});
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph__extendEdgeDefinitions

Extends the edge definitions of a graph. If an orphan collection is used in this
edge definitino, it will be removed from the orphenage. If the edge collection of
the edge definition to add is already used in the graph or used in a different
graph with different from an to collections an error is thrown.
<br />
`general-graph._extendEdgeDefinitions(edgeDefinition)`
<br />
*edgeDefinition* - [string] : the edge definition to extend the graph
<br />
*Examples*
<br />

<div id="general_graph__extendEdgeDefinitions_container">
<div id="general_graph__extendEdgeDefinitions_long">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph")
arangosh> var ed1 = graph._directedRelationDefinition("myEC1", ["myVC1"], ["myVC2"]);
arangosh> var ed2 = graph._directedRelationDefinition("myEC2", ["myVC1"], ["myVC3"]);
arangosh> var g = graph._create("myGraph", [ed1]);
arangosh> g._extendEdgeDefinitions(ed2);
undefined
```
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph__editEdgeDefinition

Edits the edge definitions of a graph. The edge definition used as argument will
replace the existing edge definition of the graph which has the same collection.
Vertex Collections of the replaced edge definition, that are not used in the new
definition will transform to an orphan. Orphans that are used in this new edge
definition will be deleted from the list of orphans. Other graphs with the same edge
definition will be modified, too.
<br />
`general-graph._editEdgeDefinition(edgeDefinition)`
<br />
*edgeDefinition* - [string] : the edge definition to replace the existing edge
definition with the same attribute *collection*.
<br />
*Examples*
<br />

<div id="general_graph__editEdgeDefinition_container">
<div id="general_graph__editEdgeDefinition_long">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph")
arangosh> var ed1 = graph._directedRelationDefinition("myEC1", ["myVC1"], ["myVC2"]);
arangosh> var ed2 = graph._directedRelationDefinition("myEC1", ["myVC2"], ["myVC3"]);
arangosh> var g = graph._create("myGraph", [ed1, ed2]);
[ArangoError 1920: multi use of edge collection in edge def]
```
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph__deleteEdgeDefinition

Deletes an edge definition defined by the edge collection of a graph. If the
collections defined in the edge definition (collection, from, to) are not used
in another edge definition of the graph, they will be moved to the orphanage.
<br />
`general-graph._deleteEdgeDefinition(edgeCollectionName)`
<br />
* *edgeCollectionName*: string - name of edge collection defined in *collection* of the edge
definition.
<br />
*Examples*
<br />

<div id="general_graph__deleteEdgeDefinition_container">
<div id="general_graph__deleteEdgeDefinition_long">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph")
arangosh> var ed1 = graph._directedRelationDefinition("myEC1", ["myVC1"], ["myVC2"]);
arangosh> var ed2 = graph._directedRelationDefinition("myEC2", ["myVC1"], ["myVC3"]);
arangosh> var g = graph._create("myGraph", [ed1, ed2]);
arangosh> g._deleteEdgeDefinition("myEC1");
undefined
```
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph__addVertexCollection

Adds a vertex collection to the set of orphan collections of the graph. If the
collection does not exist, it will be created.
<br />
`general-graph._addVertexCollection(vertexCollectionName, createCollection)`
<br />
* *vertexCollectionName* - string : name of vertex collection.
* *createCollection* - bool : if true the collection will be created if it does not exist. Default: true.
<br />
*Examples*
<br />

<div id="general_graph__addVertexCollection_container">
<div id="general_graph__addVertexCollection_long">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph")
arangosh> var ed1 = graph._directedRelationDefinition("myEC1", ["myVC1"], ["myVC2"]);
arangosh> var g = graph._create("myGraph", [ed1]);
arangosh> g._addVertexCollection("myVC3", true);
undefined
```
</pre>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph__orphanCollections

Returns all vertex collections of the graph, that are not used in an edge definition.
<br />
`general-graph._orphanCollections()`
<br />
*Examples*
<br />

<div id="general_graph__orphanCollections_container">
<div id="general_graph__orphanCollections_long" onclick="$('#general_graph__orphanCollections_long').hide(); $('#general_graph__orphanCollections_short').show();" style="Display: none;">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph")
arangosh> var ed1 = graph._directedRelationDefinition("myEC1", ["myVC1"], ["myVC2"]);
arangosh> var g = graph._create("myGraph", [ed1]);
arangosh> g._addVertexCollection("myVC3", true);
undefined
arangosh> g._orphanCollections();
[ 
  "myVC3" 
]
```
</pre>
</div>
<div id="general_graph__orphanCollections_short" onclick="$('#general_graph__orphanCollections_short').hide(); $('#general_graph__orphanCollections_long').show();">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph")
arangosh> var ed1 = graph._directedRelationDefinition("myEC1", ["myVC1"], ["myVC2"]);
arangosh> var g = graph._create("myGraph", [ed1]);
arangosh> g._addVertexCollection("myVC3", true);
arangosh> g._orphanCollections();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: general-graph.js -->
@startDocuBlock JSF_general_graph__removeVertexCollection

Removes an orphan collection from the graph. Optionally it deletes the collection,
if it is not used in any graph.
<br />
`general-graph._removeVertexCollection(vertexCollectionName, dropCollection)`
<br />
*vertexCollectionName*: string - name of vertex collection.
*dropCollection*: bool (optional) - if true the collection will be dropped if it is
not used in any graph. Default: false.
<br />
*Examples*
<br />

<div id="general_graph__removeVertexCollections_container">
<div id="general_graph__removeVertexCollections_long" onclick="$('#general_graph__removeVertexCollections_long').hide(); $('#general_graph__removeVertexCollections_short').show();" style="Display: none;">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph")
arangosh> var ed1 = graph._directedRelationDefinition("myEC1", ["myVC1"], ["myVC2"]);
arangosh> var g = graph._create("myGraph", [ed1]);
arangosh> g._addVertexCollection("myVC3", true);
undefined
arangosh> g._addVertexCollection("myVC4", true);
undefined
arangosh> g._orphanCollections();
[ 
  "myVC3", 
  "myVC4" 
]
arangosh> g._removeVertexCollection("myVC3");
undefined
arangosh> g._orphanCollections();
[ 
  "myVC4" 
]
```
</pre>
</div>
<div id="general_graph__removeVertexCollections_short" onclick="$('#general_graph__removeVertexCollections_short').hide(); $('#general_graph__removeVertexCollections_long').show();">
<pre>
```
arangosh> var graph = require("org/arangodb/general-graph")
arangosh> var ed1 = graph._directedRelationDefinition("myEC1", ["myVC1"], ["myVC2"]);
arangosh> var g = graph._create("myGraph", [ed1]);
arangosh> g._addVertexCollection("myVC3", true);
arangosh> g._addVertexCollection("myVC4", true);
arangosh> g._orphanCollections();
arangosh> g._removeVertexCollection("myVC3");
arangosh> g._orphanCollections();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_paths

<br />
`GRAPH_PATHS (graphName, direction, followCycles, minLength, maxLength)`
*The GRAPH\_PATHS function returns all paths of a graph.*
<br />
This function determines all available paths in a graph identified by *graphName*.
Except for *graphName* every other parameter is optional.
<br />
* String  *graphName*     : The name of the graph.
* String  *direction*     : The direction of the edges.
Possible values are *any*, *inbound* and *outbound* (default).
* Boolean *followCycles*  : If set to *true* the query follows cycles in the graph,
default is false.
* Number *minLength*      : Defines the minimal length a path must
have to be returned (default is 0).
* Number *maxLength*      : Defines the maximal length a path must
have to be returned (default is 10).
<br />
*Examples*
<br />
Return all paths of the graph "social":
<br />

<div id="generalGraphPaths_container">
<div id="generalGraphPaths_long" onclick="$('#generalGraphPaths_long').hide(); $('#generalGraphPaths_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> db._query("RETURN GRAPH_PATHS('social')").toArray();
[ 
  [ 
    { 
      "vertices" : [ 
        { 
          "_id" : "female/alice", 
          "_rev" : "138745242", 
          "_key" : "alice", 
          "name" : "Alice" 
        } 
      ], 
      "edges" : [ ], 
      "source" : { 
        "_id" : "female/alice", 
        "_rev" : "138745242", 
        "_key" : "alice", 
        "name" : "Alice" 
      }, 
      "destination" : { 
        "_id" : "female/alice", 
        "_rev" : "138745242", 
        "_key" : "alice", 
        "name" : "Alice" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "female/alice", 
          "_rev" : "138745242", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "male/bob", 
          "_rev" : "139138458", 
          "_key" : "bob", 
          "name" : "Bob" 
        } 
      ], 
      "edges" : [ 
        { 
          "_id" : "relation/aliceAndBob", 
          "_rev" : "139924890", 
          "_key" : "aliceAndBob", 
          "_from" : "female/alice", 
          "_to" : "male/bob", 
          "type" : "married" 
        } 
      ], 
      "source" : { 
        "_id" : "female/alice", 
        "_rev" : "138745242", 
        "_key" : "alice", 
        "name" : "Alice" 
      }, 
      "destination" : { 
        "_id" : "male/bob", 
        "_rev" : "139138458", 
        "_key" : "bob", 
        "name" : "Bob" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "female/alice", 
          "_rev" : "138745242", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "male/bob", 
          "_rev" : "139138458", 
          "_key" : "bob", 
          "name" : "Bob" 
        }, 
        { 
          "_id" : "female/diana", 
          "_rev" : "139531674", 
          "_key" : "diana", 
          "name" : "Diana" 
        } 
      ], 
      "edges" : [ 
        { 
          "_id" : "relation/aliceAndBob", 
          "_rev" : "139924890", 
          "_key" : "aliceAndBob", 
          "_from" : "female/alice", 
          "_to" : "male/bob", 
          "type" : "married" 
        }, 
        { 
          "_id" : "relation/bobAndDiana", 
          "_rev" : "140580250", 
          "_key" : "bobAndDiana", 
          "_from" : "male/bob", 
          "_to" : "female/diana", 
          "type" : "friend" 
        } 
      ], 
      "source" : { 
        "_id" : "female/alice", 
        "_rev" : "138745242", 
        "_key" : "alice", 
        "name" : "Alice" 
      }, 
      "destination" : { 
        "_id" : "female/diana", 
        "_rev" : "139531674", 
        "_key" : "diana", 
        "name" : "Diana" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "female/alice", 
          "_rev" : "138745242", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "male/charly", 
          "_rev" : "139335066", 
          "_key" : "charly", 
          "name" : "Charly" 
        } 
      ], 
      "edges" : [ 
        { 
          "_id" : "relation/aliceAndCharly", 
          "_rev" : "140187034", 
          "_key" : "aliceAndCharly", 
          "_from" : "female/alice", 
          "_to" : "male/charly", 
          "type" : "friend" 
        } 
      ], 
      "source" : { 
        "_id" : "female/alice", 
        "_rev" : "138745242", 
        "_key" : "alice", 
        "name" : "Alice" 
      }, 
      "destination" : { 
        "_id" : "male/charly", 
        "_rev" : "139335066", 
        "_key" : "charly", 
        "name" : "Charly" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "female/alice", 
          "_rev" : "138745242", 
          "_key" : "alice", 
          "name" : "Alice" 
        }, 
        { 
          "_id" : "male/charly", 
          "_rev" : "139335066", 
          "_key" : "charly", 
          "name" : "Charly" 
        }, 
        { 
          "_id" : "female/diana", 
          "_rev" : "139531674", 
          "_key" : "diana", 
          "name" : "Diana" 
        } 
      ], 
      "edges" : [ 
        { 
          "_id" : "relation/aliceAndCharly", 
          "_rev" : "140187034", 
          "_key" : "aliceAndCharly", 
          "_from" : "female/alice", 
          "_to" : "male/charly", 
          "type" : "friend" 
        }, 
        { 
          "_id" : "relation/charlyAndDiana", 
          "_rev" : "140383642", 
          "_key" : "charlyAndDiana", 
          "_from" : "male/charly", 
          "_to" : "female/diana", 
          "type" : "married" 
        } 
      ], 
      "source" : { 
        "_id" : "female/alice", 
        "_rev" : "138745242", 
        "_key" : "alice", 
        "name" : "Alice" 
      }, 
      "destination" : { 
        "_id" : "female/diana", 
        "_rev" : "139531674", 
        "_key" : "diana", 
        "name" : "Diana" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "female/diana", 
          "_rev" : "139531674", 
          "_key" : "diana", 
          "name" : "Diana" 
        } 
      ], 
      "edges" : [ ], 
      "source" : { 
        "_id" : "female/diana", 
        "_rev" : "139531674", 
        "_key" : "diana", 
        "name" : "Diana" 
      }, 
      "destination" : { 
        "_id" : "female/diana", 
        "_rev" : "139531674", 
        "_key" : "diana", 
        "name" : "Diana" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "male/bob", 
          "_rev" : "139138458", 
          "_key" : "bob", 
          "name" : "Bob" 
        } 
      ], 
      "edges" : [ ], 
      "source" : { 
        "_id" : "male/bob", 
        "_rev" : "139138458", 
        "_key" : "bob", 
        "name" : "Bob" 
      }, 
      "destination" : { 
        "_id" : "male/bob", 
        "_rev" : "139138458", 
        "_key" : "bob", 
        "name" : "Bob" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "male/bob", 
          "_rev" : "139138458", 
          "_key" : "bob", 
          "name" : "Bob" 
        }, 
        { 
          "_id" : "female/diana", 
          "_rev" : "139531674", 
          "_key" : "diana", 
          "name" : "Diana" 
        } 
      ], 
      "edges" : [ 
        { 
          "_id" : "relation/bobAndDiana", 
          "_rev" : "140580250", 
          "_key" : "bobAndDiana", 
          "_from" : "male/bob", 
          "_to" : "female/diana", 
          "type" : "friend" 
        } 
      ], 
      "source" : { 
        "_id" : "male/bob", 
        "_rev" : "139138458", 
        "_key" : "bob", 
        "name" : "Bob" 
      }, 
      "destination" : { 
        "_id" : "female/diana", 
        "_rev" : "139531674", 
        "_key" : "diana", 
        "name" : "Diana" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "male/charly", 
          "_rev" : "139335066", 
          "_key" : "charly", 
          "name" : "Charly" 
        } 
      ], 
      "edges" : [ ], 
      "source" : { 
        "_id" : "male/charly", 
        "_rev" : "139335066", 
        "_key" : "charly", 
        "name" : "Charly" 
      }, 
      "destination" : { 
        "_id" : "male/charly", 
        "_rev" : "139335066", 
        "_key" : "charly", 
        "name" : "Charly" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "male/charly", 
          "_rev" : "139335066", 
          "_key" : "charly", 
          "name" : "Charly" 
        }, 
        { 
          "_id" : "female/diana", 
          "_rev" : "139531674", 
          "_key" : "diana", 
          "name" : "Diana" 
        } 
      ], 
      "edges" : [ 
        { 
          "_id" : "relation/charlyAndDiana", 
          "_rev" : "140383642", 
          "_key" : "charlyAndDiana", 
          "_from" : "male/charly", 
          "_to" : "female/diana", 
          "type" : "married" 
        } 
      ], 
      "source" : { 
        "_id" : "male/charly", 
        "_rev" : "139335066", 
        "_key" : "charly", 
        "name" : "Charly" 
      }, 
      "destination" : { 
        "_id" : "female/diana", 
        "_rev" : "139531674", 
        "_key" : "diana", 
        "name" : "Diana" 
      } 
    } 
  ] 
]
```
</pre>
</div>
<div id="generalGraphPaths_short" onclick="$('#generalGraphPaths_short').hide(); $('#generalGraphPaths_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> db._query("RETURN GRAPH_PATHS('social')").toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
Return all inbound paths of the graph "social" with a maximal
length of 1 and a minimal length of 2:
<br />

<div id="generalGraphPaths2_container">
<div id="generalGraphPaths2_long" onclick="$('#generalGraphPaths2_long').hide(); $('#generalGraphPaths2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> db._query("RETURN GRAPH_PATHS('social', 'inbound', false, 1, 2)").toArray();
[ 
  [ 
    { 
      "vertices" : [ 
        { 
          "_id" : "female/diana", 
          "_rev" : "314643866", 
          "_key" : "diana", 
          "name" : "Diana" 
        }, 
        { 
          "_id" : "male/charly", 
          "_rev" : "314447258", 
          "_key" : "charly", 
          "name" : "Charly" 
        } 
      ], 
      "edges" : [ 
        { 
          "_id" : "relation/charlyAndDiana", 
          "_rev" : "315495834", 
          "_key" : "charlyAndDiana", 
          "_from" : "male/charly", 
          "_to" : "female/diana", 
          "type" : "married" 
        } 
      ], 
      "source" : { 
        "_id" : "female/diana", 
        "_rev" : "314643866", 
        "_key" : "diana", 
        "name" : "Diana" 
      }, 
      "destination" : { 
        "_id" : "male/charly", 
        "_rev" : "314447258", 
        "_key" : "charly", 
        "name" : "Charly" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "female/diana", 
          "_rev" : "314643866", 
          "_key" : "diana", 
          "name" : "Diana" 
        }, 
        { 
          "_id" : "male/charly", 
          "_rev" : "314447258", 
          "_key" : "charly", 
          "name" : "Charly" 
        }, 
        { 
          "_id" : "female/alice", 
          "_rev" : "313857434", 
          "_key" : "alice", 
          "name" : "Alice" 
        } 
      ], 
      "edges" : [ 
        { 
          "_id" : "relation/charlyAndDiana", 
          "_rev" : "315495834", 
          "_key" : "charlyAndDiana", 
          "_from" : "male/charly", 
          "_to" : "female/diana", 
          "type" : "married" 
        }, 
        { 
          "_id" : "relation/aliceAndCharly", 
          "_rev" : "315299226", 
          "_key" : "aliceAndCharly", 
          "_from" : "female/alice", 
          "_to" : "male/charly", 
          "type" : "friend" 
        } 
      ], 
      "source" : { 
        "_id" : "female/diana", 
        "_rev" : "314643866", 
        "_key" : "diana", 
        "name" : "Diana" 
      }, 
      "destination" : { 
        "_id" : "female/alice", 
        "_rev" : "313857434", 
        "_key" : "alice", 
        "name" : "Alice" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "female/diana", 
          "_rev" : "314643866", 
          "_key" : "diana", 
          "name" : "Diana" 
        }, 
        { 
          "_id" : "male/bob", 
          "_rev" : "314250650", 
          "_key" : "bob", 
          "name" : "Bob" 
        } 
      ], 
      "edges" : [ 
        { 
          "_id" : "relation/bobAndDiana", 
          "_rev" : "315692442", 
          "_key" : "bobAndDiana", 
          "_from" : "male/bob", 
          "_to" : "female/diana", 
          "type" : "friend" 
        } 
      ], 
      "source" : { 
        "_id" : "female/diana", 
        "_rev" : "314643866", 
        "_key" : "diana", 
        "name" : "Diana" 
      }, 
      "destination" : { 
        "_id" : "male/bob", 
        "_rev" : "314250650", 
        "_key" : "bob", 
        "name" : "Bob" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "female/diana", 
          "_rev" : "314643866", 
          "_key" : "diana", 
          "name" : "Diana" 
        }, 
        { 
          "_id" : "male/bob", 
          "_rev" : "314250650", 
          "_key" : "bob", 
          "name" : "Bob" 
        }, 
        { 
          "_id" : "female/alice", 
          "_rev" : "313857434", 
          "_key" : "alice", 
          "name" : "Alice" 
        } 
      ], 
      "edges" : [ 
        { 
          "_id" : "relation/bobAndDiana", 
          "_rev" : "315692442", 
          "_key" : "bobAndDiana", 
          "_from" : "male/bob", 
          "_to" : "female/diana", 
          "type" : "friend" 
        }, 
        { 
          "_id" : "relation/aliceAndBob", 
          "_rev" : "315037082", 
          "_key" : "aliceAndBob", 
          "_from" : "female/alice", 
          "_to" : "male/bob", 
          "type" : "married" 
        } 
      ], 
      "source" : { 
        "_id" : "female/diana", 
        "_rev" : "314643866", 
        "_key" : "diana", 
        "name" : "Diana" 
      }, 
      "destination" : { 
        "_id" : "female/alice", 
        "_rev" : "313857434", 
        "_key" : "alice", 
        "name" : "Alice" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "male/bob", 
          "_rev" : "314250650", 
          "_key" : "bob", 
          "name" : "Bob" 
        }, 
        { 
          "_id" : "female/alice", 
          "_rev" : "313857434", 
          "_key" : "alice", 
          "name" : "Alice" 
        } 
      ], 
      "edges" : [ 
        { 
          "_id" : "relation/aliceAndBob", 
          "_rev" : "315037082", 
          "_key" : "aliceAndBob", 
          "_from" : "female/alice", 
          "_to" : "male/bob", 
          "type" : "married" 
        } 
      ], 
      "source" : { 
        "_id" : "male/bob", 
        "_rev" : "314250650", 
        "_key" : "bob", 
        "name" : "Bob" 
      }, 
      "destination" : { 
        "_id" : "female/alice", 
        "_rev" : "313857434", 
        "_key" : "alice", 
        "name" : "Alice" 
      } 
    }, 
    { 
      "vertices" : [ 
        { 
          "_id" : "male/charly", 
          "_rev" : "314447258", 
          "_key" : "charly", 
          "name" : "Charly" 
        }, 
        { 
          "_id" : "female/alice", 
          "_rev" : "313857434", 
          "_key" : "alice", 
          "name" : "Alice" 
        } 
      ], 
      "edges" : [ 
        { 
          "_id" : "relation/aliceAndCharly", 
          "_rev" : "315299226", 
          "_key" : "aliceAndCharly", 
          "_from" : "female/alice", 
          "_to" : "male/charly", 
          "type" : "friend" 
        } 
      ], 
      "source" : { 
        "_id" : "male/charly", 
        "_rev" : "314447258", 
        "_key" : "charly", 
        "name" : "Charly" 
      }, 
      "destination" : { 
        "_id" : "female/alice", 
        "_rev" : "313857434", 
        "_key" : "alice", 
        "name" : "Alice" 
      } 
    } 
  ] 
]
```
</pre>
</div>
<div id="generalGraphPaths2_short" onclick="$('#generalGraphPaths2_short').hide(); $('#generalGraphPaths2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("social");
arangosh> db._query("RETURN GRAPH_PATHS('social', 'inbound', false, 1, 2)").toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_shortest_paths

<br />
`GRAPH_SHORTEST_PATH (graphName, startVertexExample, endVertexExample, options)`
*The GRAPH\_SHORTEST\_PATH function returns all shortest paths of a graph.*
<br />
This function determines all shortest paths in a graph identified by *graphName*.
The function accepts an id, an example, a list of examples
or even an empty example as parameter for
start and end vertex. If one wants to calls this function to receive nearly all
shortest paths for a graph the
option *algorithm* should be set to *Floyd-Warshall* to increase performance.
If no algorithm is provided in the options the function chooses the appropriate
one (either *Floyd-Warshall* or *Dijsktra*) according to its parameters.
The length of a path is by default the amount of edges from one start vertex to
an end vertex. The option weight allows the user to define an edge attribute
representing the length.
<br />
* String               *graphName*          : The name of the graph.
* String|Object|Array  *startVertexExample* : An example for the desired
start Vertices (see below).
* String|Object|Array  *endVertexExample*   : An example for the desired
end Vertices (see below).
* Object               *options*            : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
* String|Array         *edgeCollectionRestriction*        : One or multiple edge
collections that should be considered.
* String|Array         *startVertexCollectionRestriction* : One or multiple vertex
collections that should be considered.
* String|Array         *endVertexCollectionRestriction*   : One or multiple vertex
collections that should be considered.
* String|Object|Array  *edgeExamples*                     : A filter example for the
edges in the shortest paths (see below).
* String               *algorithm*                        : The algorithm to calculate
the shortest paths. If both start and end vertex examples are empty *Floyd-Warshall* is
used, otherwise the default is *Dijkstra*
* String               *weight*                           : The name of the attribute of
the edges containing the length.
* Number               *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path could
not be calculated.
<br />
Examples for startVertexExample/endVertexExample:
* {}                : Returns all possible start/end vertices for this graph.
* *idString*        : Returns the vertex with the id *idString*.
* {*key* : *value*} : Returns the vertices that match this example.
* [{*key1* : *value1*}, {*key2* : *value2*}] : Returns the vertices that match one of
the examples.
<br />
*Examples*
<br />
A route planner example, shortest distance from all villages to other cities:
<br />

<div id="generalGraphShortestPaths1_container">
<div id="generalGraphShortestPaths1_long" onclick="$('#generalGraphShortestPaths1_long').hide(); $('#generalGraphShortestPaths1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_SHORTEST_PATH("
........> +"'routeplanner', {}, {}, {weight : 'distance', endVertexCollectionRestriction : 'city', " +
........> "startVertexCollectionRestriction : 'village'}) RETURN [e.startVertex, e.vertex._id, " +
........> "e.distance, LENGTH(e.paths)]"
........> ).toArray();
[ 
  [ 
    "village/Olpe", 
    "city/Cologne", 
    100, 
    1 
  ], 
  [ 
    "village/Olpe", 
    "city/Berlin", 
    700, 
    1 
  ], 
  [ 
    "village/Olpe", 
    "city/Munich", 
    600, 
    1 
  ], 
  [ 
    "village/Rosenheim", 
    "city/Munich", 
    80, 
    1 
  ], 
  [ 
    "village/Rosenheim", 
    "city/Berlin", 
    680, 
    1 
  ], 
  [ 
    "village/Rosenheim", 
    "city/Cologne", 
    730, 
    1 
  ] 
]
```
</pre>
</div>
<div id="generalGraphShortestPaths1_short" onclick="$('#generalGraphShortestPaths1_short').hide(); $('#generalGraphShortestPaths1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_SHORTEST_PATH("
........> +"'routeplanner', {}, {}, {weight : 'distance', endVertexCollectionRestriction : 'city', " +
........> "startVertexCollectionRestriction : 'village'}) RETURN [e.startVertex, e.vertex._id, " +
........> "e.distance, LENGTH(e.paths)]"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, shortest distance from Munich and Cologne to Olpe:
<br />

<div id="generalGraphShortestPaths2_container">
<div id="generalGraphShortestPaths2_long" onclick="$('#generalGraphShortestPaths2_long').hide(); $('#generalGraphShortestPaths2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_SHORTEST_PATH("
........> +"'routeplanner', [{_id: 'city/Cologne'},{_id: 'city/Munich'}], 'village/Olpe', " +
........> "{weight : 'distance'}) RETURN [e.startVertex, e.vertex._id, e.distance, LENGTH(e.paths)]"
........> ).toArray();
[ 
  [ 
    "city/Cologne", 
    "village/Olpe", 
    100, 
    1 
  ], 
  [ 
    "city/Munich", 
    "village/Olpe", 
    600, 
    1 
  ] 
]
```
</pre>
</div>
<div id="generalGraphShortestPaths2_short" onclick="$('#generalGraphShortestPaths2_short').hide(); $('#generalGraphShortestPaths2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_SHORTEST_PATH("
........> +"'routeplanner', [{_id: 'city/Cologne'},{_id: 'city/Munich'}], 'village/Olpe', " +
........> "{weight : 'distance'}) RETURN [e.startVertex, e.vertex._id, e.distance, LENGTH(e.paths)]"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_traversal

<br />
`GRAPH_TRAVERSAL (graphName, startVertexExample, direction, options)`
*The GRAPH\_TRAVERSAL function traverses through the graph.*
<br />
This function performs traversals on the given graph.
For a more detailed documentation on the optional parameters see
[Traversals](../Traversals/README.md).
<br />
* String               *graphName*          : The name of the graph.
* String|Object|Array  *startVerte*         : The ID of the start vertex of the traversal.
* String|Object|Array  *direction*          : The direction of the edges. Possible values
are *outbound*, *inbound* and *any* (default).
* Object               *options*            : Optional options, see below:
<br />
*Examples*
<br />
A route planner example, start a traversal from Munich :
<br />

<div id="generalGraphTraversal1_container">
<div id="generalGraphTraversal1_long" onclick="$('#generalGraphTraversal1_long').hide(); $('#generalGraphTraversal1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_TRAVERSAL('routeplanner', 'city/Munich'," +
........> " 'outbound') RETURN e"
........> ).toArray();
[ 
  { 
    "vertex" : { 
      "_id" : "city/Munich", 
      "_rev" : "399775130", 
      "_key" : "Munich", 
      "isCapital" : true, 
      "population" : 1000000 
    } 
  }, 
  { 
    "vertex" : { 
      "_id" : "city/Cologne", 
      "_rev" : "399578522", 
      "_key" : "Cologne", 
      "isCapital" : false, 
      "population" : 1000000 
    } 
  }, 
  { 
    "vertex" : { 
      "_id" : "village/Olpe", 
      "_rev" : "400233882", 
      "_key" : "Olpe", 
      "isCapital" : false, 
      "population" : 80000 
    } 
  }, 
  { 
    "vertex" : { 
      "_id" : "village/Rosenheim", 
      "_rev" : "400430490", 
      "_key" : "Rosenheim", 
      "isCapital" : false, 
      "population" : 80000 
    } 
  }, 
  { 
    "vertex" : { 
      "_id" : "village/Rosenheim", 
      "_rev" : "400430490", 
      "_key" : "Rosenheim", 
      "isCapital" : false, 
      "population" : 80000 
    } 
  }, 
  { 
    "vertex" : { 
      "_id" : "village/Olpe", 
      "_rev" : "400233882", 
      "_key" : "Olpe", 
      "isCapital" : false, 
      "population" : 80000 
    } 
  } 
]
```
</pre>
</div>
<div id="generalGraphTraversal1_short" onclick="$('#generalGraphTraversal1_short').hide(); $('#generalGraphTraversal1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_TRAVERSAL('routeplanner', 'city/Munich'," +
........> " 'outbound') RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, start a traversal from Munich with a max depth of 1
so only the direct neighbors of munich are returned:
<br />

<div id="generalGraphTraversal2_container">
<div id="generalGraphTraversal2_long" onclick="$('#generalGraphTraversal2_long').hide(); $('#generalGraphTraversal2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_TRAVERSAL('routeplanner', 'city/Munich'," +
........> " 'outbound', {maxDepth : 1}) RETURN e"
........> ).toArray();
[ 
  { 
    "vertex" : { 
      "_id" : "city/Munich", 
      "_rev" : "404952474", 
      "_key" : "Munich", 
      "isCapital" : true, 
      "population" : 1000000 
    } 
  }, 
  { 
    "vertex" : { 
      "_id" : "city/Cologne", 
      "_rev" : "404755866", 
      "_key" : "Cologne", 
      "isCapital" : false, 
      "population" : 1000000 
    } 
  }, 
  { 
    "vertex" : { 
      "_id" : "village/Rosenheim", 
      "_rev" : "405607834", 
      "_key" : "Rosenheim", 
      "isCapital" : false, 
      "population" : 80000 
    } 
  }, 
  { 
    "vertex" : { 
      "_id" : "village/Olpe", 
      "_rev" : "405411226", 
      "_key" : "Olpe", 
      "isCapital" : false, 
      "population" : 80000 
    } 
  } 
]
```
</pre>
</div>
<div id="generalGraphTraversal2_short" onclick="$('#generalGraphTraversal2_short').hide(); $('#generalGraphTraversal2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_TRAVERSAL('routeplanner', 'city/Munich'," +
........> " 'outbound', {maxDepth : 1}) RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_distance

<br />
`GRAPH_DISTANCE_TO (graphName, startVertexExample, endVertexExample, options)`
*The GRAPH\_DISTANCE\_TO function returns all paths and there distance within a graph.*
<br />
This function is a wrapper of [GRAPH\_SHORTEST\_PATH](#SUBSUBSECTION GRAPH_SHORTEST_PATH).
It does not return the actual path but only the distance between two vertices.
<br />
*Examples*
<br />
A route planner example, distance from all villages to other cities:
<br />

<div id="generalGraphDistanceTo1_container">
<div id="generalGraphDistanceTo1_long" onclick="$('#generalGraphDistanceTo1_long').hide(); $('#generalGraphDistanceTo1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_DISTANCE_TO("
........> +"'routeplanner', {}, {}, {weight : 'distance', endVertexCollectionRestriction : 'city', " +
........> "startVertexCollectionRestriction : 'village'}) RETURN [e.startVertex, e.vertex._id, " +
........> "e.distance]"
........> ).toArray();
[ 
  [ 
    "village/Rosenheim", 
    "city/Berlin", 
    680 
  ], 
  [ 
    "village/Rosenheim", 
    "city/Munich", 
    80 
  ], 
  [ 
    "village/Rosenheim", 
    "city/Cologne", 
    730 
  ], 
  [ 
    "village/Olpe", 
    "city/Cologne", 
    100 
  ], 
  [ 
    "village/Olpe", 
    "city/Munich", 
    600 
  ], 
  [ 
    "village/Olpe", 
    "city/Berlin", 
    700 
  ] 
]
```
</pre>
</div>
<div id="generalGraphDistanceTo1_short" onclick="$('#generalGraphDistanceTo1_short').hide(); $('#generalGraphDistanceTo1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_DISTANCE_TO("
........> +"'routeplanner', {}, {}, {weight : 'distance', endVertexCollectionRestriction : 'city', " +
........> "startVertexCollectionRestriction : 'village'}) RETURN [e.startVertex, e.vertex._id, " +
........> "e.distance]"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, distance from Munich and Cologne to Olpe:
<br />

<div id="generalGraphDistanceTo2_container">
<div id="generalGraphDistanceTo2_long" onclick="$('#generalGraphDistanceTo2_long').hide(); $('#generalGraphDistanceTo2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_DISTANCE_TO("
........> +"'routeplanner', [{_id: 'city/Cologne'},{_id: 'city/Munich'}], 'village/Olpe', " +
........> "{weight : 'distance'}) RETURN [e.startVertex, e.vertex._id, e.distance]"
........> ).toArray();
[ 
  [ 
    "city/Cologne", 
    "village/Olpe", 
    100 
  ], 
  [ 
    "city/Munich", 
    "village/Olpe", 
    600 
  ] 
]
```
</pre>
</div>
<div id="generalGraphDistanceTo2_short" onclick="$('#generalGraphDistanceTo2_short').hide(); $('#generalGraphDistanceTo2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_DISTANCE_TO("
........> +"'routeplanner', [{_id: 'city/Cologne'},{_id: 'city/Munich'}], 'village/Olpe', " +
........> "{weight : 'distance'}) RETURN [e.startVertex, e.vertex._id, e.distance]"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_traversal_tree

<br />
`GRAPH_TRAVERSAL_TREE (graphName, startVertexExample, direction, connectName, options)`
*The GRAPH\_TRAVERSAL\_TREE function traverses through the graph.*
This function creates a tree format from the result for a better visualization of
the path.
This function performs traversals on the given graph.
For a more detailed documentation on the optional parameters see
[Traversals](../Traversals/README.md).
<br />
* String               *graphName*          : The name of the graph.
* String|Object|Array  *startVerte*         : The ID of the start vertex
of the traversal.
* String|Object|Array  *direction*          : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
* String|Object|Array  *connectName*        : The result attribute which
contains the connection.
* Object               *options*            : Optional options, see below:
<br />
*Examples*
<br />
A route planner example, start a traversal from Munich :
<br />

<div id="generalGraphTraversalTree1_container">
<div id="generalGraphTraversalTree1_long" onclick="$('#generalGraphTraversalTree1_long').hide(); $('#generalGraphTraversalTree1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_TRAVERSAL_TREE('routeplanner', 'city/Munich'," +
........> " 'outbound', 'connnection') RETURN e"
........> ).toArray();
[ 
  [ 
    { 
      "_id" : "city/Munich", 
      "_rev" : "108074394", 
      "_key" : "Munich", 
      "isCapital" : true, 
      "population" : 1000000, 
      "connnection" : [ 
        { 
          "_id" : "city/Cologne", 
          "_rev" : "107877786", 
          "_key" : "Cologne", 
          "isCapital" : false, 
          "population" : 1000000, 
          "connnection" : [ 
            { 
              "_id" : "village/Olpe", 
              "_rev" : "108533146", 
              "_key" : "Olpe", 
              "isCapital" : false, 
              "population" : 80000 
            }, 
            { 
              "_id" : "village/Rosenheim", 
              "_rev" : "108729754", 
              "_key" : "Rosenheim", 
              "isCapital" : false, 
              "population" : 80000 
            } 
          ] 
        }, 
        { 
          "_id" : "village/Rosenheim", 
          "_rev" : "108729754", 
          "_key" : "Rosenheim", 
          "isCapital" : false, 
          "population" : 80000 
        }, 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "108533146", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    } 
  ] 
]
```
</pre>
</div>
<div id="generalGraphTraversalTree1_short" onclick="$('#generalGraphTraversalTree1_short').hide(); $('#generalGraphTraversalTree1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_TRAVERSAL_TREE('routeplanner', 'city/Munich'," +
........> " 'outbound', 'connnection') RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, start a traversal from Munich with a max depth of 1 so
only the direct neighbors of munich are returned:
<br />

<div id="generalGraphTraversalTree2_container">
<div id="generalGraphTraversalTree2_long" onclick="$('#generalGraphTraversalTree2_long').hide(); $('#generalGraphTraversalTree2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_TRAVERSAL_TREE('routeplanner', 'city/Munich',"+
........> " 'outbound', 'connnection', {maxDepth : 1}) RETURN e"
........> ).toArray();
[ 
  [ 
    { 
      "_id" : "city/Munich", 
      "_rev" : "113251738", 
      "_key" : "Munich", 
      "isCapital" : true, 
      "population" : 1000000, 
      "connnection" : [ 
        { 
          "_id" : "city/Cologne", 
          "_rev" : "113055130", 
          "_key" : "Cologne", 
          "isCapital" : false, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "village/Rosenheim", 
          "_rev" : "113907098", 
          "_key" : "Rosenheim", 
          "isCapital" : false, 
          "population" : 80000 
        }, 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "113710490", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    } 
  ] 
]
```
</pre>
</div>
<div id="generalGraphTraversalTree2_short" onclick="$('#generalGraphTraversalTree2_short').hide(); $('#generalGraphTraversalTree2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_TRAVERSAL_TREE('routeplanner', 'city/Munich',"+
........> " 'outbound', 'connnection', {maxDepth : 1}) RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_neighbors

<br />
`GRAPH_NEIGHBORS (graphName, vertexExample, options)`
*The GRAPH\_NEIGHBORS function returns all neighbors of vertices.*
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertex.
<br />
* String               *graphName*          : The name of the graph.
* String|Object|Array  *vertexExample*      : An example for the desired
vertices (see below).
* Object               *options*            : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction
of the edges. Possible values are *outbound*, *inbound* and *any* (default).
* String|Object|Array  *edgeExamples*                     : A filter example
for the edges to the neighbors (see below).
* String|Object|Array  *neighborExamples*                 : An example for
the desired neighbors (see below).
* String|Array         *edgeCollectionRestriction*        : One or multiple
edge collections that should be considered.
* String|Array         *vertexCollectionRestriction* : One or multiple
vertex collections that should be considered.
* Number               *minDepth*                         : Defines the minimal
depth a path to a neighbor must have to be returned (default is 1).
* Number               *maxDepth*                         : Defines the maximal
depth a path to a neighbor must have to be returned (default is 1).
<br />
Examples for edgeExamples/neighborExamples:
* {}                : Returns all possible edges/neighbors for this graph.
* *idString*        : Returns the edge/vertex with the id *idString*.
* {*key* : *value*} : Returns the edges/vertices that match this example.
* [{*key1* : *value1*}, {*key2* : *value2*}] : Returns the edges/vertices that
match one of the examples.
<br />
*Examples*
<br />
A route planner example, all neighbors of locations with a distance of either
700 or 600.:
<br />

<div id="generalGraphNeighbors1_container">
<div id="generalGraphNeighbors1_long" onclick="$('#generalGraphNeighbors1_long').hide(); $('#generalGraphNeighbors1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_NEIGHBORS("
........> +"'routeplanner', {}, {edgeExamples : [{distance: 600}, {distance: 700}]}) RETURN e"
........> ).toArray();
[ 
  { 
    "vertex" : { 
      "_id" : "city/Munich", 
      "_rev" : "192746906", 
      "_key" : "Munich", 
      "isCapital" : true, 
      "population" : 1000000 
    }, 
    "path" : { 
      "edges" : [ 
        { 
          "_id" : "highway/193992090", 
          "_rev" : "193992090", 
          "_key" : "193992090", 
          "_from" : "city/Berlin", 
          "_to" : "city/Munich", 
          "distance" : 600 
        } 
      ], 
      "vertices" : [ 
        { 
          "_id" : "city/Berlin", 
          "_rev" : "192353690", 
          "_key" : "Berlin", 
          "isCapital" : true, 
          "population" : 3000000 
        }, 
        { 
          "_id" : "city/Munich", 
          "_rev" : "192746906", 
          "_key" : "Munich", 
          "isCapital" : true, 
          "population" : 1000000 
        } 
      ] 
    }, 
    "startVertex" : "city/Berlin" 
  }, 
  { 
    "vertex" : { 
      "_id" : "village/Olpe", 
      "_rev" : "193205658", 
      "_key" : "Olpe", 
      "isCapital" : false, 
      "population" : 80000 
    }, 
    "path" : { 
      "edges" : [ 
        { 
          "_id" : "road/194581914", 
          "_rev" : "194581914", 
          "_key" : "194581914", 
          "_from" : "city/Berlin", 
          "_to" : "village/Olpe", 
          "distance" : 700 
        } 
      ], 
      "vertices" : [ 
        { 
          "_id" : "city/Berlin", 
          "_rev" : "192353690", 
          "_key" : "Berlin", 
          "isCapital" : true, 
          "population" : 3000000 
        }, 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "193205658", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    }, 
    "startVertex" : "city/Berlin" 
  }, 
  { 
    "vertex" : { 
      "_id" : "city/Berlin", 
      "_rev" : "192353690", 
      "_key" : "Berlin", 
      "isCapital" : true, 
      "population" : 3000000 
    }, 
    "path" : { 
      "edges" : [ 
        { 
          "_id" : "highway/193992090", 
          "_rev" : "193992090", 
          "_key" : "193992090", 
          "_from" : "city/Berlin", 
          "_to" : "city/Munich", 
          "distance" : 600 
        } 
      ], 
      "vertices" : [ 
        { 
          "_id" : "city/Munich", 
          "_rev" : "192746906", 
          "_key" : "Munich", 
          "isCapital" : true, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "city/Berlin", 
          "_rev" : "192353690", 
          "_key" : "Berlin", 
          "isCapital" : true, 
          "population" : 3000000 
        } 
      ] 
    }, 
    "startVertex" : "city/Munich" 
  }, 
  { 
    "vertex" : { 
      "_id" : "village/Olpe", 
      "_rev" : "193205658", 
      "_key" : "Olpe", 
      "isCapital" : false, 
      "population" : 80000 
    }, 
    "path" : { 
      "edges" : [ 
        { 
          "_id" : "road/195171738", 
          "_rev" : "195171738", 
          "_key" : "195171738", 
          "_from" : "city/Munich", 
          "_to" : "village/Olpe", 
          "distance" : 600 
        } 
      ], 
      "vertices" : [ 
        { 
          "_id" : "city/Munich", 
          "_rev" : "192746906", 
          "_key" : "Munich", 
          "isCapital" : true, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "193205658", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    }, 
    "startVertex" : "city/Munich" 
  }, 
  { 
    "vertex" : { 
      "_id" : "city/Berlin", 
      "_rev" : "192353690", 
      "_key" : "Berlin", 
      "isCapital" : true, 
      "population" : 3000000 
    }, 
    "path" : { 
      "edges" : [ 
        { 
          "_id" : "road/194581914", 
          "_rev" : "194581914", 
          "_key" : "194581914", 
          "_from" : "city/Berlin", 
          "_to" : "village/Olpe", 
          "distance" : 700 
        } 
      ], 
      "vertices" : [ 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "193205658", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        }, 
        { 
          "_id" : "city/Berlin", 
          "_rev" : "192353690", 
          "_key" : "Berlin", 
          "isCapital" : true, 
          "population" : 3000000 
        } 
      ] 
    }, 
    "startVertex" : "village/Olpe" 
  }, 
  { 
    "vertex" : { 
      "_id" : "city/Munich", 
      "_rev" : "192746906", 
      "_key" : "Munich", 
      "isCapital" : true, 
      "population" : 1000000 
    }, 
    "path" : { 
      "edges" : [ 
        { 
          "_id" : "road/195171738", 
          "_rev" : "195171738", 
          "_key" : "195171738", 
          "_from" : "city/Munich", 
          "_to" : "village/Olpe", 
          "distance" : 600 
        } 
      ], 
      "vertices" : [ 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "193205658", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        }, 
        { 
          "_id" : "city/Munich", 
          "_rev" : "192746906", 
          "_key" : "Munich", 
          "isCapital" : true, 
          "population" : 1000000 
        } 
      ] 
    }, 
    "startVertex" : "village/Olpe" 
  } 
]
```
</pre>
</div>
<div id="generalGraphNeighbors1_short" onclick="$('#generalGraphNeighbors1_short').hide(); $('#generalGraphNeighbors1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_NEIGHBORS("
........> +"'routeplanner', {}, {edgeExamples : [{distance: 600}, {distance: 700}]}) RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all outbound neighbors of munich with a maximal depth of 2 :
<br />

<div id="generalGraphNeighbors2_container">
<div id="generalGraphNeighbors2_long" onclick="$('#generalGraphNeighbors2_long').hide(); $('#generalGraphNeighbors2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_NEIGHBORS("
........> +"'routeplanner', 'city/Munich', {direction : 'outbound', maxDepth : 2}) RETURN e"
........> ).toArray();
[ 
  { 
    "vertex" : { 
      "_id" : "city/Cologne", 
      "_rev" : "197727642", 
      "_key" : "Cologne", 
      "isCapital" : false, 
      "population" : 1000000 
    }, 
    "path" : { 
      "edges" : [ 
        { 
          "_id" : "highway/199366042", 
          "_rev" : "199366042", 
          "_key" : "199366042", 
          "_from" : "city/Munich", 
          "_to" : "city/Cologne", 
          "distance" : 650 
        } 
      ], 
      "vertices" : [ 
        { 
          "_id" : "city/Munich", 
          "_rev" : "197924250", 
          "_key" : "Munich", 
          "isCapital" : true, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "city/Cologne", 
          "_rev" : "197727642", 
          "_key" : "Cologne", 
          "isCapital" : false, 
          "population" : 1000000 
        } 
      ] 
    }, 
    "startVertex" : "city/Munich" 
  }, 
  { 
    "vertex" : { 
      "_id" : "village/Olpe", 
      "_rev" : "198383002", 
      "_key" : "Olpe", 
      "isCapital" : false, 
      "population" : 80000 
    }, 
    "path" : { 
      "edges" : [ 
        { 
          "_id" : "highway/199366042", 
          "_rev" : "199366042", 
          "_key" : "199366042", 
          "_from" : "city/Munich", 
          "_to" : "city/Cologne", 
          "distance" : 650 
        }, 
        { 
          "_id" : "road/200545690", 
          "_rev" : "200545690", 
          "_key" : "200545690", 
          "_from" : "city/Cologne", 
          "_to" : "village/Olpe", 
          "distance" : 100 
        } 
      ], 
      "vertices" : [ 
        { 
          "_id" : "city/Munich", 
          "_rev" : "197924250", 
          "_key" : "Munich", 
          "isCapital" : true, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "city/Cologne", 
          "_rev" : "197727642", 
          "_key" : "Cologne", 
          "isCapital" : false, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "198383002", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    }, 
    "startVertex" : "city/Munich" 
  }, 
  { 
    "vertex" : { 
      "_id" : "village/Rosenheim", 
      "_rev" : "198579610", 
      "_key" : "Rosenheim", 
      "isCapital" : false, 
      "population" : 80000 
    }, 
    "path" : { 
      "edges" : [ 
        { 
          "_id" : "highway/199366042", 
          "_rev" : "199366042", 
          "_key" : "199366042", 
          "_from" : "city/Munich", 
          "_to" : "city/Cologne", 
          "distance" : 650 
        }, 
        { 
          "_id" : "road/200742298", 
          "_rev" : "200742298", 
          "_key" : "200742298", 
          "_from" : "city/Cologne", 
          "_to" : "village/Rosenheim", 
          "distance" : 750 
        } 
      ], 
      "vertices" : [ 
        { 
          "_id" : "city/Munich", 
          "_rev" : "197924250", 
          "_key" : "Munich", 
          "isCapital" : true, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "city/Cologne", 
          "_rev" : "197727642", 
          "_key" : "Cologne", 
          "isCapital" : false, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "village/Rosenheim", 
          "_rev" : "198579610", 
          "_key" : "Rosenheim", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    }, 
    "startVertex" : "city/Munich" 
  }, 
  { 
    "vertex" : { 
      "_id" : "village/Rosenheim", 
      "_rev" : "198579610", 
      "_key" : "Rosenheim", 
      "isCapital" : false, 
      "population" : 80000 
    }, 
    "path" : { 
      "edges" : [ 
        { 
          "_id" : "road/200152474", 
          "_rev" : "200152474", 
          "_key" : "200152474", 
          "_from" : "city/Munich", 
          "_to" : "village/Rosenheim", 
          "distance" : 80 
        } 
      ], 
      "vertices" : [ 
        { 
          "_id" : "city/Munich", 
          "_rev" : "197924250", 
          "_key" : "Munich", 
          "isCapital" : true, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "village/Rosenheim", 
          "_rev" : "198579610", 
          "_key" : "Rosenheim", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    }, 
    "startVertex" : "city/Munich" 
  }, 
  { 
    "vertex" : { 
      "_id" : "village/Olpe", 
      "_rev" : "198383002", 
      "_key" : "Olpe", 
      "isCapital" : false, 
      "population" : 80000 
    }, 
    "path" : { 
      "edges" : [ 
        { 
          "_id" : "road/200349082", 
          "_rev" : "200349082", 
          "_key" : "200349082", 
          "_from" : "city/Munich", 
          "_to" : "village/Olpe", 
          "distance" : 600 
        } 
      ], 
      "vertices" : [ 
        { 
          "_id" : "city/Munich", 
          "_rev" : "197924250", 
          "_key" : "Munich", 
          "isCapital" : true, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "198383002", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    }, 
    "startVertex" : "city/Munich" 
  } 
]
```
</pre>
</div>
<div id="generalGraphNeighbors2_short" onclick="$('#generalGraphNeighbors2_short').hide(); $('#generalGraphNeighbors2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_NEIGHBORS("
........> +"'routeplanner', 'city/Munich', {direction : 'outbound', maxDepth : 2}) RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_edges

<br />
`GRAPH_EDGES (graphName, vertexExample, options)`
*The GRAPH\_EDGES function returns all edges of vertices.*
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertex.
<br />
* String               *graphName*          : The name of the graph.
* String|Object|Array  *vertexExample*      : An example for the desired
vertices (see below).
* Object               *options*            : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction
of the edges. Possible values are *outbound*, *inbound* and *any* (default).
* String|Array         *edgeCollectionRestriction*        : One or multiple
edge collections that should be considered.
* String|Array         *startVertexCollectionRestriction* : One or multiple
vertex collections that should be considered.
* String|Array         *endVertexCollectionRestriction*   : One or multiple
vertex collections that should be considered.
* String|Object|Array  *edgeExamples*                     : A filter example
for the edges (see below).
* String|Object|Array  *neighborExamples*                 : An example for
the desired neighbors (see below).
* Number               *minDepth*                         : Defines the minimal
depth a path to a neighbor must have to be returned (default is 1).
* Number               *maxDepth*                         : Defines the maximal
depth a path to a neighbor must have to be returned (default is 1).
<br />
Examples for edgeExamples/neighborExamples:
* {}                : Returns all possible edges/neighbors for this graph.
* *idString*        : Returns the edge/vertex with the id *idString*.
* {*key* : *value*} : Returns the edges/vertices that match this example.
* [{*key1* : *value1*}, {*key2* : *value2*}] : Returns the edges/vertices that
match one of the examples.
<br />
*Examples*
<br />
A route planner example, all edges to locations with a distance of either 700 or 600.:
<br />

<div id="generalGraphEdges1_container">
<div id="generalGraphEdges1_long" onclick="$('#generalGraphEdges1_long').hide(); $('#generalGraphEdges1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_EDGES("
........> +"'routeplanner', {}, {edgeExamples : [{distance: 600}, {distance: 700}]}) RETURN e"
........> ).toArray();
[ 
  { 
    "_id" : "highway/254154138", 
    "_rev" : "254154138", 
    "_key" : "254154138", 
    "_from" : "city/Berlin", 
    "_to" : "city/Munich", 
    "distance" : 600 
  }, 
  { 
    "_id" : "road/254743962", 
    "_rev" : "254743962", 
    "_key" : "254743962", 
    "_from" : "city/Berlin", 
    "_to" : "village/Olpe", 
    "distance" : 700 
  }, 
  { 
    "_id" : "highway/254154138", 
    "_rev" : "254154138", 
    "_key" : "254154138", 
    "_from" : "city/Berlin", 
    "_to" : "city/Munich", 
    "distance" : 600 
  }, 
  { 
    "_id" : "road/255333786", 
    "_rev" : "255333786", 
    "_key" : "255333786", 
    "_from" : "city/Munich", 
    "_to" : "village/Olpe", 
    "distance" : 600 
  }, 
  { 
    "_id" : "road/254743962", 
    "_rev" : "254743962", 
    "_key" : "254743962", 
    "_from" : "city/Berlin", 
    "_to" : "village/Olpe", 
    "distance" : 700 
  }, 
  { 
    "_id" : "road/255333786", 
    "_rev" : "255333786", 
    "_key" : "255333786", 
    "_from" : "city/Munich", 
    "_to" : "village/Olpe", 
    "distance" : 600 
  } 
]
```
</pre>
</div>
<div id="generalGraphEdges1_short" onclick="$('#generalGraphEdges1_short').hide(); $('#generalGraphEdges1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_EDGES("
........> +"'routeplanner', {}, {edgeExamples : [{distance: 600}, {distance: 700}]}) RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all outbound edges of munich with a maximal depth of 2 :
<br />

<div id="generalGraphEdges2_container">
<div id="generalGraphEdges2_long" onclick="$('#generalGraphEdges2_long').hide(); $('#generalGraphEdges2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_EDGES("
........> +"'routeplanner', 'city/Munich', {direction : 'outbound', maxDepth : 2}) RETURN e"
........> ).toArray();
[ 
  { 
    "_id" : "highway/259528090", 
    "_rev" : "259528090", 
    "_key" : "259528090", 
    "_from" : "city/Munich", 
    "_to" : "city/Cologne", 
    "distance" : 650 
  }, 
  { 
    "_id" : "highway/259528090", 
    "_rev" : "259528090", 
    "_key" : "259528090", 
    "_from" : "city/Munich", 
    "_to" : "city/Cologne", 
    "distance" : 650 
  }, 
  { 
    "_id" : "road/260707738", 
    "_rev" : "260707738", 
    "_key" : "260707738", 
    "_from" : "city/Cologne", 
    "_to" : "village/Olpe", 
    "distance" : 100 
  }, 
  { 
    "_id" : "highway/259528090", 
    "_rev" : "259528090", 
    "_key" : "259528090", 
    "_from" : "city/Munich", 
    "_to" : "city/Cologne", 
    "distance" : 650 
  }, 
  { 
    "_id" : "road/260904346", 
    "_rev" : "260904346", 
    "_key" : "260904346", 
    "_from" : "city/Cologne", 
    "_to" : "village/Rosenheim", 
    "distance" : 750 
  }, 
  { 
    "_id" : "road/260314522", 
    "_rev" : "260314522", 
    "_key" : "260314522", 
    "_from" : "city/Munich", 
    "_to" : "village/Rosenheim", 
    "distance" : 80 
  }, 
  { 
    "_id" : "road/260511130", 
    "_rev" : "260511130", 
    "_key" : "260511130", 
    "_from" : "city/Munich", 
    "_to" : "village/Olpe", 
    "distance" : 600 
  } 
]
```
</pre>
</div>
<div id="generalGraphEdges2_short" onclick="$('#generalGraphEdges2_short').hide(); $('#generalGraphEdges2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_EDGES("
........> +"'routeplanner', 'city/Munich', {direction : 'outbound', maxDepth : 2}) RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_vertices

<br />
`GRAPH_VERTICES (graphName, vertexExample, options)`
*The GRAPH\_VERTICES function returns all vertices.*
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertex.
According to the optional filters it will only return vertices that have
outbound, onbound or any (default) edges.
<br />
* String               *graphName*          : The name of the graph.
* String|Object|Array  *vertexExample*      : An example for the desired
vertices (see below).
* Object               *options*            : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction of the
edges. Possible values are *outbound*, *inbound* and *any* (default).
* String|Array         *vertexCollectionRestriction*      : One or multiple
vertex collections that should be considered.
<br />
Examples for vertexExample:
* {}                : Returns all possible vertices for this graph.
* *idString*        : Returns the vertex with the id *idString*.
* {*key* : *value*} : Returns the vertices that match this example.
* [{*key1* : *value1*}, {*key2* : *value2*}] : Returns the vertices that
match one of the examples.
<br />
*Examples*
<br />
A route planner example, all vertices of the graph
<br />

<div id="generalGraphVertices1_container">
<div id="generalGraphVertices1_long" onclick="$('#generalGraphVertices1_long').hide(); $('#generalGraphVertices1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_VERTICES("
........> +"'routeplanner', {}) RETURN e"
........> ).toArray();
[ 
  { 
    "_id" : "city/Berlin", 
    "_rev" : "235869594", 
    "_key" : "Berlin", 
    "isCapital" : true, 
    "population" : 3000000 
  }, 
  { 
    "_id" : "city/Cologne", 
    "_rev" : "236066202", 
    "_key" : "Cologne", 
    "isCapital" : false, 
    "population" : 1000000 
  }, 
  { 
    "_id" : "city/Munich", 
    "_rev" : "236262810", 
    "_key" : "Munich", 
    "isCapital" : true, 
    "population" : 1000000 
  }, 
  { 
    "_id" : "village/Rosenheim", 
    "_rev" : "236918170", 
    "_key" : "Rosenheim", 
    "isCapital" : false, 
    "population" : 80000 
  }, 
  { 
    "_id" : "village/Olpe", 
    "_rev" : "236721562", 
    "_key" : "Olpe", 
    "isCapital" : false, 
    "population" : 80000 
  } 
]
```
</pre>
</div>
<div id="generalGraphVertices1_short" onclick="$('#generalGraphVertices1_short').hide(); $('#generalGraphVertices1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_VERTICES("
........> +"'routeplanner', {}) RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all vertices from collection *city*.
<br />

<div id="generalGraphVertices2_container">
<div id="generalGraphVertices2_long" onclick="$('#generalGraphVertices2_long').hide(); $('#generalGraphVertices2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_VERTICES("
........> +"'routeplanner', {}, {direction : 'any', vertexCollectionRestriction" +
........> " : 'city'}) RETURN e"
........> ).toArray();
[ 
  { 
    "_id" : "city/Berlin", 
    "_rev" : "230692250", 
    "_key" : "Berlin", 
    "isCapital" : true, 
    "population" : 3000000 
  }, 
  { 
    "_id" : "city/Cologne", 
    "_rev" : "230888858", 
    "_key" : "Cologne", 
    "isCapital" : false, 
    "population" : 1000000 
  }, 
  { 
    "_id" : "city/Munich", 
    "_rev" : "231085466", 
    "_key" : "Munich", 
    "isCapital" : true, 
    "population" : 1000000 
  } 
]
```
</pre>
</div>
<div id="generalGraphVertices2_short" onclick="$('#generalGraphVertices2_short').hide(); $('#generalGraphVertices2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_VERTICES("
........> +"'routeplanner', {}, {direction : 'any', vertexCollectionRestriction" +
........> " : 'city'}) RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_common_neighbors

<br />
`GRAPH_COMMON_NEIGHBORS (graphName, vertex1Example, vertex2Examples,
optionsVertex1, optionsVertex2)`
*The GRAPH\_COMMON\_NEIGHBORS function returns all common neighbors of the vertices
defined by the examples.*
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertex1Example and vertex2Example.
<br />
* String               *graphName*          : The name of the graph.
* String|Object|Array  *vertex1Example*     : An example for the desired
vertices (see below).
* String|Object|Array  *vertex2Example*     : An example for the desired
vertices (see below).
* Object               *optionsVertex1*     : Optional options, see below:
* Object               *optionsVertex2*     : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction of the
edges. Possible values are *outbound*, *inbound* and *any* (default).
* String|Object|Array  *edgeExamples*                     : A filter example
for the edges to the neighbors (see below).
* String|Object|Array  *neighborExamples*                 : An example for
the desired neighbors (see below).
* String|Array         *edgeCollectionRestriction*        : One or multiple
edge collections that should be considered.
// * String|Array         *vertexCollectionRestriction* : One or multiple
vertex collections that should be considered.
// / * Number               *minDepth*                         : Defines the minimal
depth a path to a neighbor must have to be returned (default is 1).
* Number               *maxDepth*                         : Defines the maximal
depth a path to a neighbor must have to be returned (default is 1).
<br />
Examples for vertexExample:
* {}                : Returns all possible vertices for this graph.
* *idString*        : Returns the vertex with the id *idString*.
* {*key* : *value*} : Returns the vertices that match this example.
* [{*key1* : *value1*}, {*key2* : *value2*}] : Returns the vertices that
match one of the examples.
<br />
*Examples*
<br />
A route planner example, all common neighbors of capitals.
<br />

<div id="generalGraphCommonNeighbors1_container">
<div id="generalGraphCommonNeighbors1_long" onclick="$('#generalGraphCommonNeighbors1_long').hide(); $('#generalGraphCommonNeighbors1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_COMMON_NEIGHBORS("
........> +"'routeplanner', {isCapital : true}, {isCapital : true}) RETURN e"
........> ).toArray();
[ 
  { 
    "city/Berlin" : { 
      "city/Munich" : [ 
        { 
          "_id" : "city/Cologne", 
          "_rev" : "160503194", 
          "_key" : "Cologne", 
          "isCapital" : false, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "161158554", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        }, 
        { 
          "_id" : "village/Rosenheim", 
          "_rev" : "161355162", 
          "_key" : "Rosenheim", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    } 
  }, 
  { 
    "city/Munich" : { 
      "city/Berlin" : [ 
        { 
          "_id" : "city/Cologne", 
          "_rev" : "160503194", 
          "_key" : "Cologne", 
          "isCapital" : false, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "161158554", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        }, 
        { 
          "_id" : "village/Rosenheim", 
          "_rev" : "161355162", 
          "_key" : "Rosenheim", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    } 
  } 
]
```
</pre>
</div>
<div id="generalGraphCommonNeighbors1_short" onclick="$('#generalGraphCommonNeighbors1_short').hide(); $('#generalGraphCommonNeighbors1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_COMMON_NEIGHBORS("
........> +"'routeplanner', {isCapital : true}, {isCapital : true}) RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all common outbound neighbors of munich with any other location
which have a maximal depth of 2 :
<br />

<div id="generalGraphCommonNeighbors2_container">
<div id="generalGraphCommonNeighbors2_long" onclick="$('#generalGraphCommonNeighbors2_long').hide(); $('#generalGraphCommonNeighbors2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_COMMON_NEIGHBORS("
........> +"'routeplanner', 'city/Munich', {}, {direction : 'outbound', maxDepth : 2}, "+
........> "{direction : 'outbound', maxDepth : 2}) RETURN e"
........> ).toArray();
[ 
  { 
    "city/Munich" : { 
      "city/Berlin" : [ 
        { 
          "_id" : "city/Cologne", 
          "_rev" : "472520090", 
          "_key" : "Cologne", 
          "isCapital" : false, 
          "population" : 1000000 
        }, 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "473175450", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        }, 
        { 
          "_id" : "village/Rosenheim", 
          "_rev" : "473372058", 
          "_key" : "Rosenheim", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ], 
      "city/Cologne" : [ 
        { 
          "_id" : "village/Olpe", 
          "_rev" : "473175450", 
          "_key" : "Olpe", 
          "isCapital" : false, 
          "population" : 80000 
        }, 
        { 
          "_id" : "village/Rosenheim", 
          "_rev" : "473372058", 
          "_key" : "Rosenheim", 
          "isCapital" : false, 
          "population" : 80000 
        } 
      ] 
    } 
  } 
]
```
</pre>
</div>
<div id="generalGraphCommonNeighbors2_short" onclick="$('#generalGraphCommonNeighbors2_short').hide(); $('#generalGraphCommonNeighbors2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_COMMON_NEIGHBORS("
........> +"'routeplanner', 'city/Munich', {}, {direction : 'outbound', maxDepth : 2}, "+
........> "{direction : 'outbound', maxDepth : 2}) RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_common_properties

<br />
`GRAPH_COMMON_PROPERTIES (graphName, vertex1Example, vertex2Examples, options)`
*The GRAPH\_COMMON\_PROPERTIES function returns all vertices
defined by the examples that share common properties
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertex1Example and vertex2Example.
<br />
* String               *graphName*          : The name of the graph.
* String|Object|Array  *vertex1Example*     : An example for the desired
vertices (see below).
* String|Object|Array  *vertex2Example*     : An example for the desired
vertices (see below).
* Object               *options*     : Optional options, see below:
<br />
Possible options and there defaults:
// * String|Array         *vertex1CollectionRestriction* : One or multiple
vertex collections that should be considered.
* String|Array         *vertex2CollectionRestriction* : One or multiple
vertex collections that should be considered.
* String|Array         *ignoreProperties* : One or multiple
attributes of a document that should be ignored.
<br />
Examples for vertexExample:
* {}                : Returns all possible vertices for this graph.
* *idString*        : Returns the vertex with the id *idString*.
* {*key* : *value*} : Returns the vertices that match this example.
* [{*key1* : *value1*}, {*key2* : *value2*}] : Returns the vertices that
match one of the examples.
<br />
*Examples*
<br />
A route planner example, all locations with the same properties:
<br />

<div id="generalGraphProperties1_container">
<div id="generalGraphProperties1_long" onclick="$('#generalGraphProperties1_long').hide(); $('#generalGraphProperties1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_COMMON_PROPERTIES("
........> +"'routeplanner', {}, {}) RETURN e"
........> ).toArray();
[ 
  { 
    "city/Berlin" : [ 
      { 
        "_id" : "city/Munich", 
        "_rev" : "225908122", 
        "_key" : "Munich", 
        "isCapital" : true, 
        "population" : 1000000 
      } 
    ] 
  }, 
  { 
    "city/Munich" : [ 
      { 
        "_id" : "city/Berlin", 
        "_rev" : "225514906", 
        "_key" : "Berlin", 
        "isCapital" : true, 
        "population" : 3000000 
      }, 
      { 
        "_id" : "city/Cologne", 
        "_rev" : "225711514", 
        "_key" : "Cologne", 
        "isCapital" : false, 
        "population" : 1000000 
      } 
    ] 
  }, 
  { 
    "city/Cologne" : [ 
      { 
        "_id" : "village/Rosenheim", 
        "_rev" : "226563482", 
        "_key" : "Rosenheim", 
        "isCapital" : false, 
        "population" : 80000 
      }, 
      { 
        "_id" : "village/Olpe", 
        "_rev" : "226366874", 
        "_key" : "Olpe", 
        "isCapital" : false, 
        "population" : 80000 
      }, 
      { 
        "_id" : "city/Munich", 
        "_rev" : "225908122", 
        "_key" : "Munich", 
        "isCapital" : true, 
        "population" : 1000000 
      } 
    ] 
  }, 
  { 
    "village/Rosenheim" : [ 
      { 
        "_id" : "city/Cologne", 
        "_rev" : "225711514", 
        "_key" : "Cologne", 
        "isCapital" : false, 
        "population" : 1000000 
      }, 
      { 
        "_id" : "village/Olpe", 
        "_rev" : "226366874", 
        "_key" : "Olpe", 
        "isCapital" : false, 
        "population" : 80000 
      } 
    ] 
  }, 
  { 
    "village/Olpe" : [ 
      { 
        "_id" : "city/Cologne", 
        "_rev" : "225711514", 
        "_key" : "Cologne", 
        "isCapital" : false, 
        "population" : 1000000 
      }, 
      { 
        "_id" : "village/Rosenheim", 
        "_rev" : "226563482", 
        "_key" : "Rosenheim", 
        "isCapital" : false, 
        "population" : 80000 
      } 
    ] 
  } 
]
```
</pre>
</div>
<div id="generalGraphProperties1_short" onclick="$('#generalGraphProperties1_short').hide(); $('#generalGraphProperties1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_COMMON_PROPERTIES("
........> +"'routeplanner', {}, {}) RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, all cities which share same properties except for population.
<br />

<div id="generalGraphProperties2_container">
<div id="generalGraphProperties2_long" onclick="$('#generalGraphProperties2_long').hide(); $('#generalGraphProperties2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_COMMON_PROPERTIES("
........> +"'routeplanner', {}, {}, {vertex1CollectionRestriction : 'city', " +
........> "vertex2CollectionRestriction : 'city'" +
........> " ,ignoreProperties: 'population'}) RETURN e"
........> ).toArray();
[ 
  { 
    "city/Berlin" : [ 
      { 
        "_id" : "city/Munich", 
        "_rev" : "97719706", 
        "_key" : "Munich", 
        "isCapital" : true, 
        "population" : 1000000 
      } 
    ] 
  }, 
  { 
    "city/Munich" : [ 
      { 
        "_id" : "city/Berlin", 
        "_rev" : "97326490", 
        "_key" : "Berlin", 
        "isCapital" : true, 
        "population" : 3000000 
      } 
    ] 
  } 
]
```
</pre>
</div>
<div id="generalGraphProperties2_short" onclick="$('#generalGraphProperties2_short').hide(); $('#generalGraphProperties2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("FOR e IN GRAPH_COMMON_PROPERTIES("
........> +"'routeplanner', {}, {}, {vertex1CollectionRestriction : 'city', " +
........> "vertex2CollectionRestriction : 'city'" +
........> " ,ignoreProperties: 'population'}) RETURN e"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_absolute_eccentricity

<br />
`GRAPH_ABSOLUTE_ECCENTRICITY (graphName, vertexExample, options)`
*The GRAPH\_ABSOLUTE\_ECCENTRICITY function returns the
[eccentricity](http://en.wikipedia.org/wiki/Distance_%28graph_theory%29)
of the vertices defined by the examples.
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertexExample.
<br />
* String               *graphName*          : The name of the graph.
* String|Object|Array  *vertexExample*     : An example for the desired
vertices (see below).
* Object               *options*     : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
* String|Array         *edgeCollectionRestriction*        : One or multiple edge
collections that should be considered.
* String|Array         *startVertexCollectionRestriction* : One or multiple vertex
collections that should be considered.
* String|Array         *endVertexCollectionRestriction*   : One or multiple vertex
collections that should be considered.
* String|Object|Array  *edgeExamples*                     : A filter example for the
edges in the shortest paths (see below).
* String               *algorithm*                        : The algorithm to calculate
the shortest paths.
* String               *weight*                           : The name of the attribute of
the edges containing the length.
* Number               *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
Examples for vertexExample:
* {}                : Returns all possible vertices for this graph.
* *idString*        : Returns the vertex with the id *idString*.
* {*key* : *value*} : Returns the vertices that match this example.
* [{*key1* : *value1*}, {*key2* : *value2*}] : Returns the vertices that
match one of the examples.
<br />
*Examples*
<br />
A route planner example, the absolute eccentricity of all locations.
<br />

<div id="generalGraphAbsEccentricity1_container">
<div id="generalGraphAbsEccentricity1_long" onclick="$('#generalGraphAbsEccentricity1_long').hide(); $('#generalGraphAbsEccentricity1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_ECCENTRICITY("
........> +"'routeplanner', {})"
........> ).toArray();
[ 
  { 
    "city/Berlin" : 1, 
    "city/Cologne" : 1, 
    "city/Munich" : 1, 
    "village/Olpe" : 2, 
    "village/Rosenheim" : 2 
  } 
]
```
</pre>
</div>
<div id="generalGraphAbsEccentricity1_short" onclick="$('#generalGraphAbsEccentricity1_short').hide(); $('#generalGraphAbsEccentricity1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_ECCENTRICITY("
........> +"'routeplanner', {})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute eccentricity of all locations.
This considers the actual distances.
<br />

<div id="generalGraphAbsEccentricity2_container">
<div id="generalGraphAbsEccentricity2_long" onclick="$('#generalGraphAbsEccentricity2_long').hide(); $('#generalGraphAbsEccentricity2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_ECCENTRICITY("
........> +"'routeplanner', {}, {weight : 'distance'})"
........> ).toArray();
[ 
  { 
    "city/Munich" : 650, 
    "city/Cologne" : 800, 
    "city/Berlin" : 800, 
    "village/Olpe" : 700, 
    "village/Rosenheim" : 730 
  } 
]
```
</pre>
</div>
<div id="generalGraphAbsEccentricity2_short" onclick="$('#generalGraphAbsEccentricity2_short').hide(); $('#generalGraphAbsEccentricity2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_ECCENTRICITY("
........> +"'routeplanner', {}, {weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute eccentricity of all cities regarding only
outbound paths.
<br />

<div id="generalGraphAbsEccentricity3_container">
<div id="generalGraphAbsEccentricity3_long" onclick="$('#generalGraphAbsEccentricity3_long').hide(); $('#generalGraphAbsEccentricity3_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_ECCENTRICITY("
........> + "'routeplanner', {}, {startVertexCollectionRestriction : 'city', " +
........> "direction : 'outbound', weight : 'distance'})"
........> ).toArray();
[ 
  { 
    "city/Berlin" : 850, 
    "city/Munich" : 650, 
    "city/Cologne" : 750 
  } 
]
```
</pre>
</div>
<div id="generalGraphAbsEccentricity3_short" onclick="$('#generalGraphAbsEccentricity3_short').hide(); $('#generalGraphAbsEccentricity3_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_ECCENTRICITY("
........> + "'routeplanner', {}, {startVertexCollectionRestriction : 'city', " +
........> "direction : 'outbound', weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_eccentricity

<br />
`GRAPH_ECCENTRICITY (graphName, options)`
*The GRAPH\_ECCENTRICITY function returns the normalized
[eccentricity](http://en.wikipedia.org/wiki/Distance_%28graph_theory%29)
of the graphs vertices
<br />
* String               *graphName*          : The name of the graph.
* Object               *options*     : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
* String               *algorithm*                        : The algorithm to calculate
the shortest paths.
* String               *weight*                           : The name of the attribute of
the edges containing the length.
* Number               *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
*Examples*
<br />
A route planner example, the eccentricity of all locations.
<br />

<div id="generalGraphEccentricity1_container">
<div id="generalGraphEccentricity1_long" onclick="$('#generalGraphEccentricity1_long').hide(); $('#generalGraphEccentricity1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ECCENTRICITY("
........> +"'routeplanner')"
........> ).toArray();
[ 
  { 
    "city/Berlin" : 1, 
    "city/Cologne" : 1, 
    "city/Munich" : 1, 
    "village/Rosenheim" : 0.5, 
    "village/Olpe" : 0.5 
  } 
]
```
</pre>
</div>
<div id="generalGraphEccentricity1_short" onclick="$('#generalGraphEccentricity1_short').hide(); $('#generalGraphEccentricity1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ECCENTRICITY("
........> +"'routeplanner')"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the eccentricity of all locations.
This considers the actual distances.
<br />

<div id="generalGraphEccentricity2_container">
<div id="generalGraphEccentricity2_long" onclick="$('#generalGraphEccentricity2_long').hide(); $('#generalGraphEccentricity2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ECCENTRICITY("
........> +"'routeplanner', {weight : 'distance'})"
........> ).toArray();
[ 
  { 
    "city/Berlin" : 0.8125, 
    "city/Cologne" : 0.8125, 
    "city/Munich" : 1, 
    "village/Rosenheim" : 0.8904109589041096, 
    "village/Olpe" : 0.9285714285714286 
  } 
]
```
</pre>
</div>
<div id="generalGraphEccentricity2_short" onclick="$('#generalGraphEccentricity2_short').hide(); $('#generalGraphEccentricity2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ECCENTRICITY("
........> +"'routeplanner', {weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_absolute_closeness

<br />
`GRAPH_ABSOLUTE_CLOSENESS (graphName, vertexExample, options)`
*The GRAPH\_ABSOLUTE\_CLOSENESS function returns the
[closeness](http://en.wikipedia.org/wiki/Centrality#Closeness_centrality)
of the vertices defined by the examples.
<br />
The function accepts an id, an example, a list of examples or even an empty
example as parameter for vertexExample.
<br />
* String               *graphName*          : The name of the graph.
* String|Object|Array  *vertexExample*     : An example for the desired
vertices (see below).
* Object               *options*     : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
* String|Array         *edgeCollectionRestriction*        : One or multiple edge
collections that should be considered.
* String|Array         *startVertexCollectionRestriction* : One or multiple vertex
collections that should be considered.
* String|Array         *endVertexCollectionRestriction*   : One or multiple vertex
collections that should be considered.
* String|Object|Array  *edgeExamples*                     : A filter example for the
edges in the shortest paths (see below).
* String               *algorithm*                        : The algorithm to calculate
the shortest paths.
* String               *weight*                           : The name of the attribute of
the edges containing the length.
* Number               *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
Examples for vertexExample:
* {}                : Returns all possible vertices for this graph.
* *idString*        : Returns the vertex with the id *idString*.
* {*key* : *value*} : Returns the vertices that match this example.
* [{*key1* : *value1*}, {*key2* : *value2*}] : Returns the vertices that
match one of the examples.
<br />
*Examples*
<br />
A route planner example, the absolute closeness of all locations.
<br />

<div id="generalGraphAbsCloseness1_container">
<div id="generalGraphAbsCloseness1_long" onclick="$('#generalGraphAbsCloseness1_long').hide(); $('#generalGraphAbsCloseness1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_CLOSENESS("
........> +"'routeplanner', {})"
........> ).toArray();
[ 
  { 
    "city/Berlin" : 4, 
    "city/Munich" : 4, 
    "city/Cologne" : 4, 
    "village/Olpe" : 5, 
    "village/Rosenheim" : 5 
  } 
]
```
</pre>
</div>
<div id="generalGraphAbsCloseness1_short" onclick="$('#generalGraphAbsCloseness1_short').hide(); $('#generalGraphAbsCloseness1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_CLOSENESS("
........> +"'routeplanner', {})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute closeness of all locations.
This considers the actual distances.
<br />

<div id="generalGraphAbsCloseness2_container">
<div id="generalGraphAbsCloseness2_long" onclick="$('#generalGraphAbsCloseness2_long').hide(); $('#generalGraphAbsCloseness2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_CLOSENESS("
........> +"'routeplanner', {}, {weight : 'distance'})"
........> ).toArray();
[ 
  { 
    "city/Berlin" : 2780, 
    "city/Cologne" : 2280, 
    "city/Munich" : 1930, 
    "village/Olpe" : 2080, 
    "village/Rosenheim" : 2170 
  } 
]
```
</pre>
</div>
<div id="generalGraphAbsCloseness2_short" onclick="$('#generalGraphAbsCloseness2_short').hide(); $('#generalGraphAbsCloseness2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_CLOSENESS("
........> +"'routeplanner', {}, {weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute closeness of all cities regarding only
outbound paths.
<br />

<div id="generalGraphAbsCloseness3_container">
<div id="generalGraphAbsCloseness3_long" onclick="$('#generalGraphAbsCloseness3_long').hide(); $('#generalGraphAbsCloseness3_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_CLOSENESS("
........> + "'routeplanner', {}, {startVertexCollectionRestriction : 'city', " +
........> "direction : 'outbound', weight : 'distance'})"
........> ).toArray();
[ 
  { 
    "city/Munich" : 1330, 
    "city/Berlin" : 2830, 
    "city/Cologne" : 850 
  } 
]
```
</pre>
</div>
<div id="generalGraphAbsCloseness3_short" onclick="$('#generalGraphAbsCloseness3_short').hide(); $('#generalGraphAbsCloseness3_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_CLOSENESS("
........> + "'routeplanner', {}, {startVertexCollectionRestriction : 'city', " +
........> "direction : 'outbound', weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_closeness

<br />
`GRAPH_CLOSENESS (graphName, options)`
*The GRAPH\_CLOSENESS function returns the normalized
[closeness](http://en.wikipedia.org/wiki/Centrality#Closeness_centrality)
of graphs vertices.
<br />
* String               *graphName*          : The name of the graph.
* Object               *options*     : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
* String               *algorithm*                        : The algorithm to calculate
the shortest paths.
* String               *weight*                           : The name of the attribute of
the edges containing the length.
* Number               *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
*Examples*
<br />
A route planner example, the closeness of all locations.
<br />

<div id="generalGraphCloseness1_container">
<div id="generalGraphCloseness1_long" onclick="$('#generalGraphCloseness1_long').hide(); $('#generalGraphCloseness1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_CLOSENESS("
........> +"'routeplanner')"
........> ).toArray();
[ 
  { 
    "city/Munich" : 1, 
    "city/Cologne" : 1, 
    "city/Berlin" : 1, 
    "village/Olpe" : 0.8, 
    "village/Rosenheim" : 0.8 
  } 
]
```
</pre>
</div>
<div id="generalGraphCloseness1_short" onclick="$('#generalGraphCloseness1_short').hide(); $('#generalGraphCloseness1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_CLOSENESS("
........> +"'routeplanner')"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the closeness of all locations.
This considers the actual distances.
<br />

<div id="generalGraphCloseness2_container">
<div id="generalGraphCloseness2_long" onclick="$('#generalGraphCloseness2_long').hide(); $('#generalGraphCloseness2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_CLOSENESS("
........> +"'routeplanner', {weight : 'distance'})"
........> ).toArray();
[ 
  { 
    "city/Munich" : 1, 
    "city/Cologne" : 0.8464912280701755, 
    "city/Berlin" : 0.6942446043165468, 
    "village/Olpe" : 0.9278846153846155, 
    "village/Rosenheim" : 0.8894009216589862 
  } 
]
```
</pre>
</div>
<div id="generalGraphCloseness2_short" onclick="$('#generalGraphCloseness2_short').hide(); $('#generalGraphCloseness2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_CLOSENESS("
........> +"'routeplanner', {weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute closeness of all cities regarding only
outbound paths.
<br />

<div id="generalGraphCloseness3_container">
<div id="generalGraphCloseness3_long" onclick="$('#generalGraphCloseness3_long').hide(); $('#generalGraphCloseness3_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_CLOSENESS("
........> + "'routeplanner',{direction : 'outbound', weight : 'distance'})"
........> ).toArray();
[ 
  { 
    "city/Munich" : 1, 
    "city/Berlin" : 0.3656319670725433, 
    "city/Cologne" : 0.7216326530612246, 
    "village/Olpe" : 0, 
    "village/Rosenheim" : 0 
  } 
]
```
</pre>
</div>
<div id="generalGraphCloseness3_short" onclick="$('#generalGraphCloseness3_short').hide(); $('#generalGraphCloseness3_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_CLOSENESS("
........> + "'routeplanner',{direction : 'outbound', weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_absolute_betweenness

<br />
`GRAPH_ABSOLUTE_BETWEENNESS (graphName, vertexExample, options)`
*The GRAPH\_ABSOLUTE\_BETWEENNESS function returns the
[betweenness](http://en.wikipedia.org/wiki/Betweenness_centrality)
of all vertices in the graph.
<br />
<br />
* String               *graphName*          : The name of the graph.
* Object               *options*     : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
* String               *weight*                           : The name of the attribute of
the edges containing the length.
* Number               *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
*Examples*
<br />
A route planner example, the absolute betweenness of all locations.
<br />

<div id="generalGraphAbsBetweenness1_container">
<div id="generalGraphAbsBetweenness1_long" onclick="$('#generalGraphAbsBetweenness1_long').hide(); $('#generalGraphAbsBetweenness1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_BETWEENNESS("
........> +"'routeplanner', {})"
........> ).toArray();
[ 
  { 
    "city/Munich" : 0.6666666666666666, 
    "city/Cologne" : 0.6666666666666666, 
    "city/Berlin" : 0.6666666666666666, 
    "village/Rosenheim" : 0, 
    "village/Olpe" : 0 
  } 
]
```
</pre>
</div>
<div id="generalGraphAbsBetweenness1_short" onclick="$('#generalGraphAbsBetweenness1_short').hide(); $('#generalGraphAbsBetweenness1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_BETWEENNESS("
........> +"'routeplanner', {})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute betweenness of all locations.
This considers the actual distances.
<br />

<div id="generalGraphAbsBetweenness2_container">
<div id="generalGraphAbsBetweenness2_long" onclick="$('#generalGraphAbsBetweenness2_long').hide(); $('#generalGraphAbsBetweenness2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_BETWEENNESS("
........> +"'routeplanner', {weight : 'distance'})"
........> ).toArray();
[ 
  { 
    "city/Berlin" : 0, 
    "city/Cologne" : 0, 
    "village/Olpe" : 2, 
    "city/Munich" : 6, 
    "village/Rosenheim" : 0 
  } 
]
```
</pre>
</div>
<div id="generalGraphAbsBetweenness2_short" onclick="$('#generalGraphAbsBetweenness2_short').hide(); $('#generalGraphAbsBetweenness2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_BETWEENNESS("
........> +"'routeplanner', {weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the absolute closeness of all cities regarding only
outbound paths.
<br />

<div id="generalGraphAbsBetweenness3_container">
<div id="generalGraphAbsBetweenness3_long" onclick="$('#generalGraphAbsBetweenness3_long').hide(); $('#generalGraphAbsBetweenness3_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_BETWEENNESS("
........> + "'routeplanner', {direction : 'outbound', weight : 'distance'})"
........> ).toArray();
[ 
  { 
    "city/Berlin" : 0, 
    "city/Cologne" : 0, 
    "city/Munich" : 1, 
    "village/Olpe" : 0, 
    "village/Rosenheim" : 0 
  } 
]
```
</pre>
</div>
<div id="generalGraphAbsBetweenness3_short" onclick="$('#generalGraphAbsBetweenness3_short').hide(); $('#generalGraphAbsBetweenness3_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_ABSOLUTE_BETWEENNESS("
........> + "'routeplanner', {direction : 'outbound', weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_betweenness

<br />
`GRAPH_BETWEENNESS (graphName, options)`
*The GRAPH\_BETWEENNESS function returns the
[betweenness](http://en.wikipedia.org/wiki/Betweenness_centrality)
of graphs vertices.
<br />
* String               *graphName*          : The name of the graph.
* Object               *options*     : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
* String               *weight*                           : The name of the attribute of
the edges containing the length.
* Number               *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
*Examples*
<br />
A route planner example, the betweenness of all locations.
<br />

<div id="generalGraphBetweenness1_container">
<div id="generalGraphBetweenness1_long" onclick="$('#generalGraphBetweenness1_long').hide(); $('#generalGraphBetweenness1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_BETWEENNESS("
........> +"'routeplanner')"
........> ).toArray();
[ 
  { 
    "city/Berlin" : 1, 
    "city/Munich" : 1, 
    "city/Cologne" : 1, 
    "village/Rosenheim" : 0, 
    "village/Olpe" : 0 
  } 
]
```
</pre>
</div>
<div id="generalGraphBetweenness1_short" onclick="$('#generalGraphBetweenness1_short').hide(); $('#generalGraphBetweenness1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_BETWEENNESS("
........> +"'routeplanner')"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the closeness of all locations.
This considers the actual distances.
<br />

<div id="generalGraphBetweenness2_container">
<div id="generalGraphBetweenness2_long" onclick="$('#generalGraphBetweenness2_long').hide(); $('#generalGraphBetweenness2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_BETWEENNESS("
........> +"'routeplanner', {weight : 'distance'})"
........> ).toArray();
[ 
  { 
    "city/Berlin" : 0, 
    "city/Cologne" : 0, 
    "village/Olpe" : 0.3333333333333333, 
    "city/Munich" : 1, 
    "village/Rosenheim" : 0 
  } 
]
```
</pre>
</div>
<div id="generalGraphBetweenness2_short" onclick="$('#generalGraphBetweenness2_short').hide(); $('#generalGraphBetweenness2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_BETWEENNESS("
........> +"'routeplanner', {weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the closeness of all cities regarding only
outbound paths.
<br />

<div id="generalGraphBetweenness3_container">
<div id="generalGraphBetweenness3_long" onclick="$('#generalGraphBetweenness3_long').hide(); $('#generalGraphBetweenness3_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_BETWEENNESS("
........> + "'routeplanner', {direction : 'outbound', weight : 'distance'})"
........> ).toArray();
[ 
  { 
    "city/Berlin" : 0, 
    "city/Cologne" : 0, 
    "city/Munich" : 1, 
    "village/Olpe" : 0, 
    "village/Rosenheim" : 0 
  } 
]
```
</pre>
</div>
<div id="generalGraphBetweenness3_short" onclick="$('#generalGraphBetweenness3_short').hide(); $('#generalGraphBetweenness3_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_BETWEENNESS("
........> + "'routeplanner', {direction : 'outbound', weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_radius

<br />
`GRAPH_RADIUS (graphName, options)`
*The GRAPH\_RADIUS function returns the
[radius](http://en.wikipedia.org/wiki/Eccentricity_%28graph_theory%29)
of a graph.
<br />
* String               *graphName*          : The name of the graph.
* Object               *options*     : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
* String               *algorithm*                        : The algorithm to calculate
the shortest paths.
* String               *weight*                           : The name of the attribute of
the edges containing the length.
* Number               *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
*Examples*
<br />
A route planner example, the radius of the graph.
<br />

<div id="generalGraphRadius1_container">
<div id="generalGraphRadius1_long" onclick="$('#generalGraphRadius1_long').hide(); $('#generalGraphRadius1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_RADIUS("
........> +"'routeplanner')"
........> ).toArray();
[ 
  1 
]
```
</pre>
</div>
<div id="generalGraphRadius1_short" onclick="$('#generalGraphRadius1_short').hide(); $('#generalGraphRadius1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_RADIUS("
........> +"'routeplanner')"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the radius of the graph.
This considers the actual distances.
<br />

<div id="generalGraphRadius2_container">
<div id="generalGraphRadius2_long" onclick="$('#generalGraphRadius2_long').hide(); $('#generalGraphRadius2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_RADIUS("
........> +"'routeplanner', {weight : 'distance'})"
........> ).toArray();
[ 
  650 
]
```
</pre>
</div>
<div id="generalGraphRadius2_short" onclick="$('#generalGraphRadius2_short').hide(); $('#generalGraphRadius2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_RADIUS("
........> +"'routeplanner', {weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the cradius of the graph regarding only
outbound paths.
<br />

<div id="generalGraphRadius3_container">
<div id="generalGraphRadius3_long" onclick="$('#generalGraphRadius3_long').hide(); $('#generalGraphRadius3_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_RADIUS("
........> + "'routeplanner', {direction : 'outbound', weight : 'distance'})"
........> ).toArray();
[ 
  650 
]
```
</pre>
</div>
<div id="generalGraphRadius3_short" onclick="$('#generalGraphRadius3_short').hide(); $('#generalGraphRadius3_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_RADIUS("
........> + "'routeplanner', {direction : 'outbound', weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: ahuacatl.js -->
@startDocuBlock JSF_ahuacatl_general_graph_diameter

<br />
`GRAPH_DIAMETER (graphName, options)`
*The GRAPH\_DIAMETER function returns the
[diameter](http://en.wikipedia.org/wiki/Eccentricity_%28graph_theory%29)
of a graph.
<br />
* String               *graphName*          : The name of the graph.
* Object               *options*     : Optional options, see below:
<br />
Possible options and there defaults:
* String               *direction*                        : The direction of the edges.
Possible values are *outbound*, *inbound* and *any* (default).
* String               *algorithm*                        : The algorithm to calculate
the shortest paths.
* String               *weight*                           : The name of the attribute of
the edges containing the length.
* Number               *defaultWeight*                    : Only used with the option *weight*.
If an edge does not have the attribute named as defined in option *weight* this default
is used as length.
If no default is supplied the default would be positive Infinity so the path and
hence the eccentricity can not be calculated.
<br />
*Examples*
<br />
A route planner example, the diameter of the graph.
<br />

<div id="generalGraphDiameter1_container">
<div id="generalGraphDiameter1_long" onclick="$('#generalGraphDiameter1_long').hide(); $('#generalGraphDiameter1_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_DIAMETER("
........> +"'routeplanner')"
........> ).toArray();
[ 
  2 
]
```
</pre>
</div>
<div id="generalGraphDiameter1_short" onclick="$('#generalGraphDiameter1_short').hide(); $('#generalGraphDiameter1_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_DIAMETER("
........> +"'routeplanner')"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the diameter of the graph.
This considers the actual distances.
<br />

<div id="generalGraphDiameter2_container">
<div id="generalGraphDiameter2_long" onclick="$('#generalGraphDiameter2_long').hide(); $('#generalGraphDiameter2_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_DIAMETER("
........> +"'routeplanner', {weight : 'distance'})"
........> ).toArray();
[ 
  800 
]
```
</pre>
</div>
<div id="generalGraphDiameter2_short" onclick="$('#generalGraphDiameter2_short').hide(); $('#generalGraphDiameter2_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_DIAMETER("
........> +"'routeplanner', {weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
A route planner example, the diameter of the graph regarding only
outbound paths.
<br />

<div id="generalGraphDiameter3_container">
<div id="generalGraphDiameter3_long" onclick="$('#generalGraphDiameter3_long').hide(); $('#generalGraphDiameter3_short').show();" style="Display: none;">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_DIAMETER("
........> + "'routeplanner', {direction : 'outbound', weight : 'distance'})"
........> ).toArray();
[ 
  850 
]
```
</pre>
</div>
<div id="generalGraphDiameter3_short" onclick="$('#generalGraphDiameter3_short').hide(); $('#generalGraphDiameter3_long').show();">
<pre>
```
arangosh> var examples = require("org/arangodb/graph-examples/example-graph.js");
arangosh> var g = examples.loadGraph("routeplanner");
arangosh> db._query("RETURN GRAPH_DIAMETER("
........> + "'routeplanner', {direction : 'outbound', weight : 'distance'})"
........> ).toArray();
```
</pre><div class="example_show_button">show execution results</div>
</div>
</div>

<br />
@endDocuBlock


<!-- filename: arango-collection.js -->
@startDocuBlock collection_truncates

`collection.truncate()`
<br />
Truncates a *collection*, removing all documents but keeping all its
indexes.
<br />
*Examples*
<br />
Truncates a collection:
<br />
arango> col = db.examples;
[ArangoCollection 91022, "examples" (status new born)]
arango> col.save({ "Hello" : "World" });
{ "_id" : "91022/1532814", "_rev" : 1532814 }
arango> col.count();
1
arango> col.truncate();
arango> col.count();
0
@endDocuBlock


<!-- filename: arango-collection.js -->
@startDocuBlock documents_collectionAny

`collection.any()`
<br />
Returns a random document from the collection or *null* if none exists.
@endDocuBlock


<!-- filename: arango-collection.js -->
@startDocuBlock documents_collectionFirst

`collection.first(count)`
<br />
The *first* method returns the n first documents from the collection, in
order of document insertion/update time.
<br />
If called with the *count* argument, the result is a list of up to
*count* documents. If *count* is bigger than the number of documents
in the collection, then the result will contain as many documents as there
are in the collection.
The result list is ordered, with the "oldest" documents being positioned at
the beginning of the result list.
<br />
When called without an argument, the result is the first document from the
collection. If the collection does not contain any documents, the result
returned is *null*.
<br />
Note: this method is not supported in sharded collections with more than
one shard.
<br />
*Examples*
<br />
@code
arangod> db.example.first(1)
[ { "_id" : "example/222716379559", "_rev" : "222716379559", "Hello" : "World" } ]
@endcode
<br />
@code
arangod> db.example.first()
{ "_id" : "example/222716379559", "_rev" : "222716379559", "Hello" : "World" }
@endcode
@endDocuBlock


<!-- filename: arango-collection.js -->
@startDocuBlock documents_collectionLast

`collection.last(count)`
<br />
The *last* method returns the n last documents from the collection, in
order of document insertion/update time.
<br />
If called with the *count* argument, the result is a list of up to
*count* documents. If *count* is bigger than the number of documents
in the collection, then the result will contain as many documents as there
are in the collection.
The result list is ordered, with the "latest" documents being positioned at
the beginning of the result list.
<br />
When called without an argument, the result is the last document from the
collection. If the collection does not contain any documents, the result
returned is *null*.
<br />
Note: this method is not supported in sharded collections with more than
one shard.
<br />
*Examples*
<br />
@code
arangod> db.example.last(1)
[ { "_id" : "example/222716379559", "_rev" : "222716379559", "Hello" : "World" } ]
@endcode
<br />
@code
arangod> db.example.last()
{ "_id" : "example/222716379559", "_rev" : "222716379559", "Hello" : "World" }
@endcode
@endDocuBlock


<!-- filename: arango-database.js -->
@startDocuBlock collection_databaseDrop

`db._drop(collection)`
<br />
Drops a *collection* and all its indexes.
<br />
`db._drop(collection-identifier)`
<br />
Drops a collection identified by *collection-identifier* and all its
indexes. No error is thrown if there is no such collection.
<br />
`db._drop(collection-name)`
<br />
Drops a collection named *collection-name* and all its indexes. No error
is thrown if there is no such collection.
<br />
*Examples*
<br />
Drops a collection:
<br />
@verbinclude shell_collection-drop-db
<br />
Drops a collection identified by name:
<br />
@verbinclude shell_collection-drop-name-db
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_initializer

Create a new instance of Repository with `new FoxxRepository(collection, opts)`
<br />
A Foxx Repository is always initialized with a collection object. You can get
your collection object by asking your Foxx.Controller for it: the
`collection` method takes the name of the collection (and will prepend
the prefix of your application). It also takes two optional arguments:
<br />
1. Model: The prototype of a model. If you do not provide it, it will default
to Foxx.Model
2. Prefix: You can provide the prefix of the application if you need it in
your Repository (for some AQL queries probably).
<br />
*Examples*
<br />
```javascript
instance = new Repository(appContext.collection("my_collection"));
// or:
instance = new Repository(appContext.collection("my_collection"), {
model: MyModelPrototype,
prefix: app.collectionPrefix,
});
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_collection

The wrapped ArangoDB collection object
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_modelPrototype

The prototype of the according model.
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_prefix

The prefix of the application. This is useful if you want to construct AQL
queries for example.
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_save

Save a model into the database with `save(model)`
<br />
Expects a model. Will set the ID and Rev on the model.
Returns the model.
<br />
*Examples*
<br />
```javascript
repository.save(my_model);
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_byId

Find a model by its ID with `byId(id)`
<br />
Returns the model for the given ID.
<br />
*Examples*
<br />
```javascript
var myModel = repository.byId('test/12411');
myModel.get('name');
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_byExample

Find all models by an example with `byExample(example)`
<br />
Returns an array of models for the given ID.
<br />
*Examples*
<br />
```javascript
var myModel = repository.byExample({ amazing: true });
myModel[0].get('name');
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_firstExample

Find the first model that matches the example with `firstExample(example)`
<br />
Returns a model that matches the given example.
<br />
*Examples*
<br />
```javascript
var myModel = repository.firstExample({ amazing: true });
myModel.get('name');
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_all

Find all entries in the collection with `all()`
<br />
Returns an array of models that matches the given example. You need to provide
both a skip and a limit value.
**Warning:** ArangoDB doesn't guarantee a specific order in this case, to make
this really useful we have to explicitly provide something to order by.
<br />
*Examples*
<br />
```javascript
var myModel = repository.all({ skip: 4, limit: 2 });
myModel[0].get('name');
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_remove

Remove the model from the repository with `remove(model)`
<br />
<br />
Expects a model
<br />
*Examples*
<br />
```javascript
repository.remove(myModel);
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_removeById

Remove the document with the given ID with `removeById(id)`
<br />
Expects an ID of an existing document.
<br />
*Examples*
<br />
```javascript
repository.removeById('test/12121');
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_removeByExample

Remove all documents that match the example with `removeByExample(example)`
<br />
Find all documents that fit this example and remove them.
<br />
*Examples*
<br />
```javascript
repository.removeByExample({ toBeDeleted: true });
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_replace

Replace an entry in the collection with its new version via `replace(model)`
<br />
Find the model in the database by its `_id` and replace it with this version.
Expects a model. Sets the Revision of the model.
Returns the model.
<br />
*Examples*
<br />
```javascript
myModel.set('name', 'Jan Steemann');
repository.replace(myModel);
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_replaceById

Find an item by ID and replace it with the given model with `replaceById(id, model)`
<br />
Find the model in the database by the given ID and replace it with the given.
model.
Sets the ID and Revision of the model and also returns it.
<br />
*Examples*
<br />
```javascript
repository.replaceById('test/123345', myNewModel);
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_replaceByExample

Find an item by example and replace it with the given model with `replaceByExample(example, model)`
<br />
Find the model in the database by the given example and replace it with the given.
model.
Sets the ID and Revision of the model and also returns it.
<br />
*Examples*
<br />
```javascript
repository.replaceByExample({ replaceMe: true }, myNewModel);
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_updateById

Find an item by ID and update it with the attributes in the provided object with `updateById(id, object)`
<br />
Returns the updated model.
<br />
*Examples*
<br />
```javascript
repository.updateById('test/12131', { newAttribute: 'awesome' });
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_updateByExample

Find an item by example and update it with the attributes in the provided object
with `updateByExample(example, object)`
<br />
Returns the updated model.
<br />
*Examples*
<br />
```javascript
repository.updateByExample({ findMe: true }, { newAttribute: 'awesome' });
```
@endDocuBlock


<!-- filename: repository.js -->
@startDocuBlock JSF_foxx_repository_count

Return the number of entries in this collection with `count()`
<br />
<br />
*Examples*
<br />
```javascript
repository.count();
```
@endDocuBlock

