////////////////////////////////////////////////////////////////////////////////
/// @brief test suite
////////////////////////////////////////////////////////////////////////////////

function aqlTestSuite () {
  var collection = null;
  var documents = null;

////////////////////////////////////////////////////////////////////////////////
/// @brief set up
////////////////////////////////////////////////////////////////////////////////

  function setUp () {
    this.collection = db.UnitTestsCollection;
    this.documents = this.collection.T_toArray();
  }

////////////////////////////////////////////////////////////////////////////////
/// @brief tear down
////////////////////////////////////////////////////////////////////////////////

  function tearDown () {
  }

////////////////////////////////////////////////////////////////////////////////
/// @brief checks that collection contains expected number of elements
////////////////////////////////////////////////////////////////////////////////

  function testSizeOfTestCollection () {
    assertEqual(5, this.collection.toArray().length);
  }

////////////////////////////////////////////////////////////////////////////////
/// @brief <collection>.toArray()
////////////////////////////////////////////////////////////////////////////////

  function testCollectionToArray () {
    assertEqual(5, this.collection.T_toArray().length);
  }

////////////////////////////////////////////////////////////////////////////////
/// @brief <collection>.skip(<n>)
////////////////////////////////////////////////////////////////////////////////

  function testCollectionSkip () {
    assertEqual(5, this.collection.T_skip(0).toArray().length);
    assertEqual(4, this.collection.T_skip(1).toArray().length);
    assertEqual(3, this.collection.T_skip(2).toArray().length);

    try {
      this.collection.T_skip(-1);
      fail("expected exception for skip(-1)");
    }
    catch (err) {
    }
  }

////////////////////////////////////////////////////////////////////////////////
/// @brief <collection>.limit(<n>)
////////////////////////////////////////////////////////////////////////////////

  function testCollectionLimit () {
    assertEqual(1, this.collection.T_limit(1).toArray().length);
    assertEqual(1, this.collection.T_limit(-1).toArray().length);
  }

////////////////////////////////////////////////////////////////////////////////
/// @brief <collection>.document(<id>)
////////////////////////////////////////////////////////////////////////////////

  function testCollectionDocument () {
    var id = this.documents[0]._id;

    assertEqual(id, this.collection.T_document(id).next()._id);
  }

////////////////////////////////////////////////////////////////////////////////
/// @brief <internal-query>.nextRef()
////////////////////////////////////////////////////////////////////////////////

  function testInternalQueryNextRef () {
    var id = this.documents[0]._id;

    assertEqual(id, this.collection.T_document(id).nextRef());
  }

////////////////////////////////////////////////////////////////////////////////
/// @brief <internal-query>.useRef()
////////////////////////////////////////////////////////////////////////////////

  function testInternalQueryNextRef () {
    var count = 0;
    var query = this.collection.T_all();

    for (var i = 0;  i < 5 && query.hasNext();  ++i, ++count) {
      query.useNext();
    }

    assertEqual(5, count);
    assertFalse(query.hasNext());
  }
}

////////////////////////////////////////////////////////////////////////////////
/// @brief executes the test suite
////////////////////////////////////////////////////////////////////////////////

jsUnity.run(aqlTestSuite);

