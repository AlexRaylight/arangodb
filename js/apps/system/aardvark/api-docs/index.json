{
    "basePath": "/",
    "swaggerVersion": "1.1",
    "apiVersion": "0.1",
    "apis": [
        {
            "operations": [
                {
                    "errorResponses": [],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "true",
                            "name": "collection",
                            "description": "The collection name. <br><br>"
                        }
                    ],
                    "notes": "<br><br> Returns an object with an attribute *indexes* containing a list of all index descriptions for the given collection. The same information is also available in the *identifiers* as hash map with the index handle as keys. <br><br>",
                    "summary": " Read all indexes of a collection",
                    "httpMethod": "GET",
                    "examples": "<br><br> Return information about all indexes: <br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/index?collection=products\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"indexes\" : [ \n    { \n      \"id\" : \"products/0\", \n      \"type\" : \"primary\", \n      \"unique\" : true, \n      \"fields\" : [ \n        \"_key\" \n      ] \n    } \n  ], \n  \"identifiers\" : { \n    \"products/0\" : { \n      \"id\" : \"products/0\", \n      \"type\" : \"primary\", \n      \"unique\" : true, \n      \"fields\" : [ \n        \"_key\" \n      ] \n    } \n  }, \n  \"error\" : false, \n  \"code\" : 200 \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "ReadAllIndexesOfACollection"
                }
            ],
            "path": "/_api/index"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "If the index exists, then a *HTTP 200* is returned. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "If the index does not exist, then a *HTTP 404* is returned. <br><br>",
                            "code": "404"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "path",
                            "required": "true",
                            "name": "index-handle",
                            "description": "The index-handle. <br><br>"
                        }
                    ],
                    "notes": "<br><br> The result is an objects describing the index. It has at least the following attributes: <br><br>  <ul class=\"swagger-list\"><li>*id*: The identifier of the index.  </ul> All other attributes are type-dependent. <br><br>",
                    "summary": "Read index",
                    "httpMethod": "GET",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/index/products/0\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"id\" : \"products/0\", \n  \"type\" : \"primary\", \n  \"unique\" : true, \n  \"fields\" : [ \n    \"_key\" \n  ], \n  \"error\" : false, \n  \"code\" : 200 \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "ReadIndex"
                }
            ],
            "path": "/_api/index/{index-handle}"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "If the index already exists, then an *HTTP 200* is returned. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "If the index does not already exist and could be created, then an *HTTP 201* is returned. <br><br>",
                            "code": "201"
                        },
                        {
                            "reason": "If either *size* or *byteSize* contain invalid values, then an *HTTP 400* is returned. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "If the *collection-name* is unknown, then a *HTTP 404* is returned. <br><br>",
                            "code": "404"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "true",
                            "name": "collection",
                            "description": "The collection name. <br><br>"
                        },
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": "true",
                            "name": "cap-constraint",
                            "description": "<br><br>"
                        }
                    ],
                    "notes": "<br><br> Creates a cap constraint for the collection *collection-name*, if it does not already exist. Expects an object containing the index details. <br><br>  <ul class=\"swagger-list\"><li>*type*: must be equal to *\"cap\"*.  <li>*size*: The maximal number of documents for the collection. If specified, the value must be greater than zero.  <li>*byteSize*: The maximal size of the active document data in the collection (in bytes). If specified, the value must be at least 16384.  </ul> **Note**: The cap constraint does not index particular attributes of the documents in a collection, but limits the number of documents in the collection to a maximum value. The cap constraint thus does not support attribute names specified in the *fields* attribute nor uniqueness of any kind via the *unique* attribute. <br><br> It is allowed to specify either *size* or *byteSize*, or both at the same time. If both are specified, then the automatic document removal will be triggered by the first non-met constraint. <br><br>",
                    "summary": " Create cap constraint",
                    "httpMethod": "POST",
                    "examples": "<br><br> Creating a cap constraint <br><br><br><br><pre><code class=\"json\">shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products\n{\"type\":\"cap\",\"size\":10}\n\nHTTP/1.1 201 Created\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"id\" : \"products/989770383\", \n  \"type\" : \"cap\", \n  \"unique\" : false, \n  \"size\" : 10, \n  \"byteSize\" : 0, \n  \"isNewlyCreated\" : true, \n  \"error\" : false, \n  \"code\" : 201 \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "CreateCapConstraint"
                }
            ],
            "path": "/_api/index"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "If the index already exists, then a *HTTP 200* is returned. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "If the index does not already exist and could be created, then a *HTTP 201* is returned.   <br><br>",
                            "code": "201"
                        },
                        {
                            "reason": "If the *collection-name* is unknown, then a *HTTP 404* is returned. <br><br>",
                            "code": "404"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "true",
                            "name": "collection",
                            "description": "The collection name. <br><br>"
                        },
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": "true",
                            "name": "index-details",
                            "description": "<br><br>"
                        }
                    ],
                    "notes": "<br><br> Creates a geo-spatial index in the collection *collection-name*, if it does not already exist. Expects an object containing the index details. <br><br>  <ul class=\"swagger-list\"><li>*type*: must be equal to *\"geo\"*.  <li>*fields*: A list with one or two attribute paths.   If it is a list with one attribute path *location*, then a geo-spatial index on all documents is created using *location* as path to the coordinates. The value of the attribute must be a list with at least two double values. The list must contain the latitude (first value) and the longitude (second value). All documents, which do not have the attribute path or with value that are not suitable, are ignored.  If it is a list with two attribute paths *latitude* and *longitude*, then a geo-spatial index on all documents is created using *latitude* and *longitude* as paths the latitude and the longitude. The value of the attribute *latitude* and of the attribute *longitude* must a double. All documents, which do not have the attribute paths or which values are not suitable, are ignored.  <li>*geoJson*: If a geo-spatial index on a *location* is constructed and *geoJson* is *true*, then the order within the list is longitude followed by latitude. This corresponds to the format described in  http://geojson.org/geojson-spec.html#positions  <li>*constraint*: If *constraint* is *true*, then a geo-spatial constraint is created. The constraint is a non-unique variant of the index.  **Note**: It is also possible to set the *unique* attribute instead of  the *constraint* attribute.  <li>*ignoreNull*: If a geo-spatial constraint is created and *ignoreNull* is true, then documents with a null in *location* or at least one null in *latitude* or *longitude* are ignored.  </ul> **Note**: Unique indexes on non-shard keys are not supported in a cluster. <br><br>",
                    "summary": " Create geo-spatial index",
                    "httpMethod": "POST",
                    "examples": "<br><br> Creating a geo index with a location attribute: <br><br><br><br><pre><code class=\"json\">shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products\n{ \"type\": \"geo\", \"fields\" : [ \"b\" ] }\n\nHTTP/1.1 201 Created\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"id\" : \"products/990294671\", \n  \"type\" : \"geo1\", \n  \"unique\" : false, \n  \"geoJson\" : false, \n  \"constraint\" : false, \n  \"ignoreNull\" : false, \n  \"fields\" : [ \n    \"b\" \n  ], \n  \"isNewlyCreated\" : true, \n  \"error\" : false, \n  \"code\" : 201 \n}\n</code></pre><br><br><br> Creating a geo index with latitude and longitude attributes: <br><br><br><br><pre><code class=\"json\">shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products\n{ \"type\": \"geo\", \"fields\" : [ \"e\", \"f\" ] }\n\nHTTP/1.1 201 Created\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"id\" : \"products/990818959\", \n  \"type\" : \"geo2\", \n  \"unique\" : false, \n  \"constraint\" : false, \n  \"ignoreNull\" : false, \n  \"fields\" : [ \n    \"e\", \n    \"f\" \n  ], \n  \"isNewlyCreated\" : true, \n  \"error\" : false, \n  \"code\" : 201 \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "CreateGeo-spatialIndex"
                }
            ],
            "path": "/_api/index"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "If the index already exists, then a *HTTP 200* is returned. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "If the index does not already exist and could be created, then a *HTTP 201* is returned.   <br><br>",
                            "code": "201"
                        },
                        {
                            "reason": "If the collection already contains documents and you try to create a unique hash index in such a way that there are documents violating the uniqueness, then a *HTTP 400* is returned. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "If the *collection-name* is unknown, then a *HTTP 404* is returned. <br><br>",
                            "code": "404"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "true",
                            "name": "collection-name",
                            "description": "The collection name. <br><br>"
                        },
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": "true",
                            "name": "index-details",
                            "description": "<br><br>"
                        }
                    ],
                    "notes": "<br><br> Creates a hash index for the collection *collection-name*, if it does not already exist. The call expects an object containing the index details. <br><br>  <ul class=\"swagger-list\"><li>*type*: must be equal to *\"hash\"*.  <li>*fields*: A list of attribute paths.  <li>*unique*: If *true*, then create a unique index.  </ul> **Note**: unique indexes on non-shard keys are not supported in a cluster. <br><br>",
                    "summary": " Create hash index",
                    "httpMethod": "POST",
                    "examples": "<br><br> Creating an unique constraint: <br><br><br><br><pre><code class=\"json\">shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products\n{ \"type\": \"hash\", \"unique\" : true, \"fields\" : [ \"a\", \"b\" ] }\n\nHTTP/1.1 201 Created\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"id\" : \"products/991343247\", \n  \"type\" : \"hash\", \n  \"unique\" : true, \n  \"fields\" : [ \n    \"a\", \n    \"b\" \n  ], \n  \"isNewlyCreated\" : true, \n  \"error\" : false, \n  \"code\" : 201 \n}\n</code></pre><br><br><br> Creating a hash index: <br><br><br><br><pre><code class=\"json\">shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products\n{ \"type\": \"hash\", \"unique\" : false, \"fields\" : [ \"a\", \"b\" ] }\n\nHTTP/1.1 201 Created\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"id\" : \"products/991867535\", \n  \"type\" : \"hash\", \n  \"unique\" : false, \n  \"fields\" : [ \n    \"a\", \n    \"b\" \n  ], \n  \"isNewlyCreated\" : true, \n  \"error\" : false, \n  \"code\" : 201 \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "CreateHashIndex"
                }
            ],
            "path": "/_api/index"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "If the index already exists, then a *HTTP 200* is returned. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "If the index does not already exist and could be created, then a *HTTP 201* is returned. <br><br>",
                            "code": "201"
                        },
                        {
                            "reason": "If the collection already contains documents and you try to create a unique skip-list index in such a way that there are documents violating the uniqueness, then a *HTTP 400* is returned. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "If the *collection-name* is unknown, then a *HTTP 404* is returned. <br><br>",
                            "code": "404"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "true",
                            "name": "collection-name",
                            "description": "The collection name. <br><br>"
                        },
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": "true",
                            "name": "index-details",
                            "description": "<br><br>"
                        }
                    ],
                    "notes": "<br><br> Creates a skip-list index for the collection *collection-name*, if it does not already exist. The call expects an object containing the index details. <br><br>  <ul class=\"swagger-list\"><li>*type*: must be equal to *\"skiplist\"*.  <li>*fields*: A list of attribute paths.  <li>*unique*: If *true*, then create a unique index.  </ul> **Note**: unique indexes on non-shard keys are not supported in a cluster. <br><br>",
                    "summary": " Create skip list",
                    "httpMethod": "POST",
                    "examples": "<br><br> Creating a skiplist: <br><br><br><br><pre><code class=\"json\">shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products\n{ \"type\": \"skiplist\", \"unique\" : false, \"fields\" : [ \"a\", \"b\" ] }\n\nHTTP/1.1 201 Created\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"id\" : \"products/992391823\", \n  \"type\" : \"skiplist\", \n  \"unique\" : false, \n  \"fields\" : [ \n    \"a\", \n    \"b\" \n  ], \n  \"isNewlyCreated\" : true, \n  \"error\" : false, \n  \"code\" : 201 \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "CreateSkipList"
                }
            ],
            "path": "/_api/index"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "If the index already exists, then a *HTTP 200* is returned. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "If the index does not already exist and could be created, then a *HTTP 201* is returned. <br><br>",
                            "code": "201"
                        },
                        {
                            "reason": "If the *collection-name* is unknown, then a *HTTP 404* is returned. <br><br>",
                            "code": "404"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "true",
                            "name": "collection-name",
                            "description": "The collection name. <br><br>"
                        },
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": "true",
                            "name": "index-details",
                            "description": "<br><br>"
                        }
                    ],
                    "notes": "<br><br> Creates a fulltext index for the collection *collection-name*, if it does not already exist. The call expects an object containing the index details. <br><br>  <ul class=\"swagger-list\"><li>*type*: must be equal to *\"fulltext\"*.  <li>*fields*: A list of attribute names. Currently, the list is limited  to exactly one attribute, so the value of *fields* should look like this for example: *[ \"text\" ]*.  <li>*minLength*: Minimum character length of words to index. Will default to a server-defined value if unspecified. It is thus recommended to set this value explicitly when creating the index.",
                    "summary": " Create fulltext index",
                    "httpMethod": "POST",
                    "examples": "<br><br> Creating a fulltext index: <br><br><br><br><pre><code class=\"json\">shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products\n{ \"type\" : \"fulltext\", \"fields\" : [ \"text\" ] }\n\nHTTP/1.1 201 Created\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"id\" : \"products/992850575\", \n  \"type\" : \"fulltext\", \n  \"unique\" : false, \n  \"minLength\" : 2, \n  \"fields\" : [ \n    \"text\" \n  ], \n  \"isNewlyCreated\" : true, \n  \"error\" : false, \n  \"code\" : 201 \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "CreateFulltextIndex"
                }
            ],
            "path": "/_api/index"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "If the index already exists, then a *HTTP 200* is returned. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "If the index does not already exist and could be created, then a *HTTP 201* is returned. <br><br>",
                            "code": "201"
                        },
                        {
                            "reason": "If the *collection-name* is unknown, then a *HTTP 404* is returned. <br><br>",
                            "code": "404"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "true",
                            "name": "collection-name",
                            "description": "The collection name. <br><br>"
                        },
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": "true",
                            "name": "index-details",
                            "description": "<br><br>"
                        }
                    ],
                    "notes": "<br><br> Creates a bitarray index for the collection *collection-name*, if it does not already exist. The call expects an object containing the index details. <br><br>  <ul class=\"swagger-list\"><li>*type*: must be equal to *\"bitarray\"*.  <li>*fields*: A list of pairs. A pair consists of an attribute path followed by a list of values.  <li>*unique*: Must always be set to *false*.",
                    "summary": " Create bitarray index",
                    "httpMethod": "POST",
                    "examples": "<br><br> Creating a bitarray index: <br><br><br><br><pre><code class=\"json\">shell> curl -X POST --data-binary @- --dump - http://localhost:8529/_api/index?collection=products\n{ \"type\" : \"bitarray\", \"unique\" : false, \"fields\" : [ \"x\", [0,1,[]], \"y\", [\"a\",\"b\",[]] ] }\n\nHTTP/1.1 201 Created\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"id\" : \"products/993374863\", \n  \"type\" : \"bitarray\", \n  \"unique\" : false, \n  \"fields\" : [ \n    [ \n      \"x\", \n      [ \n        0, \n        1, \n        [ ] \n      ] \n    ], \n    [ \n      \"y\", \n      [ \n        \"a\", \n        \"b\", \n        [ ] \n      ] \n    ] \n  ], \n  \"undefined\" : false, \n  \"isNewlyCreated\" : true, \n  \"error\" : false, \n  \"code\" : 201 \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "CreateBitarrayIndex"
                }
            ],
            "path": "/_api/index"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "If the index already exists, then an *HTTP 200* is returned. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "If the index does not already exist and could be created, then an *HTTP 201* is returned. <br><br>",
                            "code": "201"
                        },
                        {
                            "reason": "If an invalid index description is posted or attributes are used that the target index will not support, then an *HTTP 400* is returned. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "If *collection* is unknown, then an *HTTP 404* is returned. @endDocuBlock",
                            "code": "404"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "true",
                            "name": "collection",
                            "description": "The collection name. <br><br>"
                        },
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": "true",
                            "name": "index-details",
                            "description": "<br><br>"
                        }
                    ],
                    "notes": "<br><br> Creates a new index in the collection *collection*. Expects an object containing the index details. <br><br> The type of the index to be created must specified in the *type* attribute of the index details. Depending on the index type, additional other attributes may need to specified in the request in order to create the index. <br><br> Most indexes (a notable exception being the cap constraint) require the list of attributes to be indexed in the *fields* attribute of the index details. Depending on the index type, a single attribute or multiple  attributes may be indexed.  <br><br> Indexing system attributes such as *_id*, *_key*, *_from*, and *_to* is not supported by any index type. Manually creating an index that  relies on any of these attributes is unsupported. <br><br> Some indexes can be created as unique or non-unique variants. Uniqueness can be controlled for most indexes by specifying the *unique* in the index details. Setting it to *true* will create a unique index.  Setting it to *false* or omitting the *unique* attribute will create a non-unique index. <br><br> **Note**: The following index types do not support uniqueness, and using  the *unique* attribute with these types may lead to an error:  <ul class=\"swagger-list\"><li>cap constraints <li>fulltext indexes <li>bitarray indexes  </ul> **Note**: Unique indexes on non-shard keys are not supported in a  cluster. <br><br>",
                    "summary": " Create index",
                    "httpMethod": "POST",
                    "examples": "",
                    "nickname": "CreateIndex"
                }
            ],
            "path": "/_api/index"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "If the index could be deleted, then an *HTTP 200* is returned. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "If the *index-handle* is unknown, then an *HTTP 404* is returned.",
                            "code": "404"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "true",
                            "name": "index-handle",
                            "description": "The index handle. <br><br>"
                        }
                    ],
                    "notes": "<br><br> Deletes an index with *index-handle*. <br><br>",
                    "summary": " Delete index",
                    "httpMethod": "DELETE",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell> curl -X DELETE --data-binary @- --dump - http://localhost:8529/_api/index/products/993899151\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"id\" : \"products/993899151\", \n  \"error\" : false, \n  \"code\" : 200 \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "DeleteIndex"
                }
            ],
            "path": "/_api/index/{index-handle}"
        }
    ]
}
