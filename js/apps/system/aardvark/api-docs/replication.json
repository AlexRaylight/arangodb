{
    "basePath": "/",
    "swaggerVersion": "1.1",
    "apiVersion": "0.1",
    "apis": [
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the logger state could be determined successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        },
                        {
                            "reason": "is returned if the logger state could not be determined. <br><br>",
                            "code": "500"
                        }
                    ],
                    "parameters": [],
                    "notes": "Returns the current state of the server's replication logger. The state will include information about whether the logger is running and about the last logged tick value. This tick value is important for incremental fetching of data. <br><br> The state API can be called regardless of whether the logger is currently running or not. <br><br> The body of the response contains a JSON object with the following attributes: <br><br>  <ul class=\"swagger-list\"><li>*state*: the current logger state as a JSON hash array with the following sub-attributes:  - *running*: whether or not the logger is running  - *lastLogTick*: the tick value of the latest tick the logger has logged.   This value can be used for incremental fetching of log data.  - *totalEvents*: total number of events logged since the server was started.   The value is not reset between multiple stops and re-starts of the logger.  - *time*: the current date and time on the logger server  <li>*server*: a JSON hash with the following sub-attributes:  - *version*: the logger server's version  - *serverId*: the logger server's id",
                    "summary": " Return replication logger state",
                    "httpMethod": "GET",
                    "examples": "<br><br> Returns the state of the replication logger. <br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/replication/logger-state\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"state\" : { \n    \"running\" : true, \n    \"lastLogTick\" : \"1249116101\", \n    \"totalEvents\" : 7699, \n    \"time\" : \"2014-07-11T08:43:57Z\" \n  }, \n  \"server\" : { \n    \"version\" : \"2.2.0\", \n    \"serverId\" : \"153548820682876\" \n  }, \n  \"clients\" : [ ] \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "ReturnReplicationLoggerState"
                }
            ],
            "path": "/_api/replication/logger-state"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the batch was created successfully. <br><br>",
                            "code": "204"
                        },
                        {
                            "reason": "is returned if the ttl value is invalid or if *DBserver* attribute is not specified or illegal on a coordinator. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used.",
                            "code": "405"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": "true",
                            "name": "body",
                            "description": "A JSON object with the batch configuration. <br><br>"
                        }
                    ],
                    "notes": "Creates a new dump batch and returns the batch's id. <br><br> The body of the request must be a JSON hash with the following attributes: <br><br>  <ul class=\"swagger-list\"><li>*ttl*: the time-to-live for the new batch (in seconds)  </ul> The response is a JSON hash with the following attributes: <br><br>  <ul class=\"swagger-list\"><li>*id*: the id of the batch  </ul> **Note**: on a coordinator, this request must have the URL parameter *DBserver* which must be an ID of a DBserver. The very same request is forwarded synchronously to that DBserver. It is an error if this attribute is not bound in the coordinator case. <br><br>",
                    "summary": " Create new dump batch",
                    "httpMethod": "POST",
                    "examples": "",
                    "nickname": "CreateNewDumpBatch"
                }
            ],
            "path": "/_api/replication/batch"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the batch's ttl was extended successfully. <br><br>",
                            "code": "204"
                        },
                        {
                            "reason": "is returned if the ttl value is invalid or the batch was not found. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used.",
                            "code": "405"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": "true",
                            "name": "body",
                            "description": "A JSON object with the batch configration. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "path",
                            "required": "true",
                            "name": "id",
                            "description": "The id of the batch. <br><br>"
                        }
                    ],
                    "notes": "Extends the ttl of an existing dump batch, using the batch's id and the provided ttl value. <br><br> The body of the request must be a JSON hash with the following attributes: <br><br>  <ul class=\"swagger-list\"><li>*ttl*: the time-to-live for the batch (in seconds)  </ul> If the batch's ttl can be extended successully, the response is empty. <br><br> **Note**: on a coordinator, this request must have the URL parameter *DBserver* which must be an ID of a DBserver. The very same request is forwarded synchronously to that DBserver. It is an error if this attribute is not bound in the coordinator case. <br><br>",
                    "summary": " Prolong existing dump batch",
                    "httpMethod": "PUT",
                    "examples": "",
                    "nickname": "ProlongExistingDumpBatch"
                }
            ],
            "path": "/_api/replication/batch/id"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the batch was deleted successfully. <br><br>",
                            "code": "204"
                        },
                        {
                            "reason": "is returned if the batch was not found. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used.",
                            "code": "405"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "path",
                            "required": "true",
                            "name": "id",
                            "description": "The id of the batch. <br><br>"
                        }
                    ],
                    "notes": "Deletes the existing dump batch, allowing compaction and cleanup to resume. <br><br> **Note**: on a coordinator, this request must have the URL parameter *DBserver* which must be an ID of a DBserver. The very same request is forwarded synchronously to that DBserver. It is an error if this attribute is not bound in the coordinator case. <br><br>",
                    "summary": " Deletes an existing dump batch",
                    "httpMethod": "DELETE",
                    "examples": "",
                    "nickname": "DeletesAnExistingDumpBatch"
                }
            ],
            "path": "/_api/replication/batch/id"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the request was executed successfully, and there are log events available for the requested range. The response body will not be empty in this case. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the request was executed successfully, but there are no log events available for the requested range. The response body will be empty in this case. <br><br>",
                            "code": "204"
                        },
                        {
                            "reason": "is returned if either the *from* or *to* values are invalid. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        },
                        {
                            "reason": "is returned if an error occurred while assembling the response. <br><br>",
                            "code": "500"
                        },
                        {
                            "reason": "is returned when this operation is called on a coordinator in a cluster. <br><br>",
                            "code": "501"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Number",
                            "paramType": "query",
                            "required": "false",
                            "name": "from",
                            "description": "Lower bound tick value for results. <br><br>"
                        },
                        {
                            "dataType": "Number",
                            "paramType": "query",
                            "required": "false",
                            "name": "to",
                            "description": "Upper bound tick value for results. <br><br>"
                        },
                        {
                            "dataType": "Number",
                            "paramType": "query",
                            "required": "false",
                            "name": "chunkSize",
                            "description": "Approximate maximum size of the returned result. <br><br>"
                        }
                    ],
                    "notes": "Returns data from the server's replication log. This method can be called by replication clients after an initial synchronization of data. The method will return all \"recent\" log entries from the logger server, and the clients can replay and apply these entries locally so they get to the same data state as the logger server. <br><br> Clients can call this method repeatedly to incrementally fetch all changes from the logger server. In this case, they should provide the *from* value so they will only get returned the log events since their last fetch. <br><br> When the *from* URL parameter is not used, the logger server will return log entries starting at the beginning of its replication log. When the *from* parameter is used, the logger server will only return log entries which have higher tick values than the specified *from* value (note: the log entry with a tick value equal to *from* will be excluded). Use the *from* value when incrementally fetching log data. <br><br> The *to* URL parameter can be used to optionally restrict the upper bound of the result to a certain tick value. If used, the result will contain only log events with tick values up to (including) *to*. In incremental fetching, there is no need to use the *to* parameter. It only makes sense in special situations, when only parts of the change log are required. <br><br> The *chunkSize* URL parameter can be used to control the size of the result. It must be specified in bytes. The *chunkSize* value will only be honored approximately. Otherwise a too low *chunkSize* value could cause the server to not be able to put just one log entry into the result and return it. Therefore, the *chunkSize* value will only be consulted after a log entry has been written into the result. If the result size is then bigger than *chunkSize*, the server will respond with as many log entries as there are in the response already. If the result size is still smaller than *chunkSize*, the server will try to return more data if there's more data left to return. <br><br> If *chunkSize* is not specified, some server-side default value will be used. <br><br> The *Content-Type* of the result is *application/x-arango-dump*. This is an easy-to-process format, with all log events going onto separate lines in the response body. Each log event itself is a JSON hash, with at least the following attributes: <br><br>  <ul class=\"swagger-list\"><li>*tick*: the log event tick value  <li>*type*: the log event type  </ul> Individual log events will also have additional attributes, depending on the event type. A few common attributes which are used for multiple events types are: <br><br>  <ul class=\"swagger-list\"><li>*cid*: id of the collection the event was for  <li>*tid*: id of the transaction the event was contained in  <li>*key*: document key  <li>*rev*: document revision id  <li>*data*: the original document data  </ul> A more detailed description of the individual replication event types and their data structures can be found in the manual. <br><br> The response will also contain the following HTTP headers: <br><br>  <ul class=\"swagger-list\"><li>*x-arango-replication-active*: whether or not the logger is active. Clients can use this flag as an indication for their polling frequency. If the logger is not active and there are no more replication events available, it might be sensible for a client to abort, or to go to sleep for a long time and try again later to check whether the logger has been activated.  <li>*x-arango-replication-lastincluded*: the tick value of the last included value in the result. In incremental log fetching, this value can be used as the *from* value for the following request. **Note** that if the result is empty, the value will be *0*. This value should not be used as *from* value by clients in the next request (otherwise the server would return the log events from the start of the log again).  <li>*x-arango-replication-lasttick*: the last tick value the logger server has logged (not necessarily included in the result). By comparing the the last tick and last included tick values, clients have an approximate indication of how many events there are still left to fetch.  <li>*x-arango-replication-checkmore*: whether or not there already exists more log data which the client could fetch immediately. If there is more log data available, the client could call *logger-follow* again with an adjusted *from* value to fetch remaining log entries until there are no more.  If there isn't any more log data to fetch, the client might decide to go to sleep for a while before calling the logger again.  </ul> **Note**: this method is not supported on a coordinator in a cluster. <br><br>",
                    "summary": " Returns log entries",
                    "httpMethod": "GET",
                    "examples": "<br><br> No log events available: <br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/replication/logger-follow?from=1249116101\n\nHTTP/1.1 204 No Content\ncontent-type: application/x-arango-dump; charset=utf-8\nx-arango-replication-active: true\nx-arango-replication-checkmore: false\nx-arango-replication-lastincluded: 0\nx-arango-replication-lasttick: 1249116101\n\n</code></pre><br><br><br> A few log events: <br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/replication/logger-follow?from=1249116101\n\nHTTP/1.1 200 OK\ncontent-type: application/x-arango-dump; charset=utf-8\nx-arango-replication-active: true\nx-arango-replication-checkmore: false\nx-arango-replication-lastincluded: 1250361285\nx-arango-replication-lasttick: 1250361285\n\n\"{\\\"tick\\\":\\\"1249247173\\\",\\\"type\\\":2000,\\\"database\\\":\\\"131013\\\",\\\"cid\\\":\\\"1249181637\\\",\\\"collection\\\":{\\\"version\\\":5,\\\"type\\\":2,\\\"cid\\\":\\\"1249181637\\\",\\\"deleted\\\":false,\\\"doCompact\\\":true,\\\"maximalSize\\\":1048576,\\\"name\\\":\\\"products\\\",\\\"isVolatile\\\":false,\\\"waitForSync\\\":false}}\\n{\\\"tick\\\":\\\"1249574853\\\",\\\"type\\\":2300,\\\"database\\\":\\\"131013\\\",\\\"cid\\\":\\\"1249181637\\\",\\\"tid\\\":\\\"0\\\",\\\"key\\\":\\\"p1\\\",\\\"rev\\\":\\\"1249509317\\\",\\\"data\\\":{\\\"_key\\\":\\\"p1\\\",\\\"_rev\\\":\\\"1249509317\\\",\\\"name\\\":\\\"flux compensator\\\"}}\\n{\\\"tick\\\":\\\"1249902533\\\",\\\"type\\\":2300,\\\"database\\\":\\\"131013\\\",\\\"cid\\\":\\\"1249181637\\\",\\\"tid\\\":\\\"0\\\",\\\"key\\\":\\\"p2\\\",\\\"rev\\\":\\\"1249836997\\\",\\\"data\\\":{\\\"_key\\\":\\\"p2\\\",\\\"_rev\\\":\\\"1249836997\\\",\\\"hp\\\":5100,\\\"name\\\":\\\"hybrid hovercraft\\\"}}\\n{\\\"tick\\\":\\\"1250099141\\\",\\\"type\\\":2302,\\\"database\\\":\\\"131013\\\",\\\"cid\\\":\\\"1249181637\\\",\\\"tid\\\":\\\"0\\\",\\\"key\\\":\\\"p1\\\",\\\"rev\\\":\\\"1250033605\\\"}\\n{\\\"tick\\\":\\\"1250295749\\\",\\\"type\\\":2300,\\\"database\\\":\\\"131013\\\",\\\"cid\\\":\\\"1249181637\\\",\\\"tid\\\":\\\"0\\\",\\\"key\\\":\\\"p2\\\",\\\"rev\\\":\\\"1250230213\\\",\\\"data\\\":{\\\"_key\\\":\\\"p2\\\",\\\"_rev\\\":\\\"1250230213\\\",\\\"hp\\\":5100,\\\"name\\\":\\\"broken hovercraft\\\"}}\\n{\\\"tick\\\":\\\"1250361285\\\",\\\"type\\\":2001,\\\"database\\\":\\\"131013\\\",\\\"cid\\\":\\\"1249181637\\\"}\\n\"\n</code></pre><br><br><br> More events than would fit into the response: <br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/replication/logger-follow?from=1250361285&chunkSize=400\n\nHTTP/1.1 200 OK\ncontent-type: application/x-arango-dump; charset=utf-8\nx-arango-replication-active: true\nx-arango-replication-checkmore: true\nx-arango-replication-lastincluded: 1250820037\nx-arango-replication-lasttick: 1251606469\n\n\"{\\\"tick\\\":\\\"1250492357\\\",\\\"type\\\":2000,\\\"database\\\":\\\"131013\\\",\\\"cid\\\":\\\"1250426821\\\",\\\"collection\\\":{\\\"version\\\":5,\\\"type\\\":2,\\\"cid\\\":\\\"1250426821\\\",\\\"deleted\\\":false,\\\"doCompact\\\":true,\\\"maximalSize\\\":1048576,\\\"name\\\":\\\"products\\\",\\\"isVolatile\\\":false,\\\"waitForSync\\\":false}}\\n{\\\"tick\\\":\\\"1250820037\\\",\\\"type\\\":2300,\\\"database\\\":\\\"131013\\\",\\\"cid\\\":\\\"1250426821\\\",\\\"tid\\\":\\\"0\\\",\\\"key\\\":\\\"p1\\\",\\\"rev\\\":\\\"1250754501\\\",\\\"data\\\":{\\\"_key\\\":\\\"p1\\\",\\\"_rev\\\":\\\"1250754501\\\",\\\"name\\\":\\\"flux compensator\\\"}}\\n\"\n</code></pre><br>@endDocuBlock",
                    "nickname": "ReturnsLogEntries"
                }
            ],
            "path": "/_api/replication/logger-follow"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the request was executed successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        },
                        {
                            "reason": "is returned if an error occurred while assembling the response. <br><br>",
                            "code": "500"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "includeSystem",
                            "description": "Include system collections in the result. The default value is *false*. <br><br>"
                        }
                    ],
                    "notes": "Returns the list of collections and indexes available on the server. This list can be used by replication clients to initiate an initial sync with the server. <br><br> The response will contain a JSON hash array with the *collection* and *state* and *tick* attributes. <br><br> *collections* is a list of collections with the following sub-attributes: <br><br>  <ul class=\"swagger-list\"><li>*parameters*: the collection properties  <li>*indexes*: a list of the indexes of a the collection. Primary indexes and edges indexes  are not included in this list.  </ul> The *state* attribute contains the current state of the replication logger. It contains the following sub-attributes: <br><br>  <ul class=\"swagger-list\"><li>*running*: whether or not the replication logger is currently active  <li>*lastLogTick*: the value of the last tick the replication logger has written  <li>*time*: the current time on the server  </ul> Replication clients should note the *lastLogTick* value returned. They can then fetch collections' data using the dump method up to the value of lastLogTick, and query the continuous replication log for log events after this tick value. <br><br> To create a full copy of the collections on the logger server, a replication client can execute these steps: <br><br>  <ul class=\"swagger-list\"><li>call the */inventory* API method. This returns the *lastLogTick* value and the list of collections and indexes from the logger server.  <li>for each collection returned by */inventory*, create the collection locally and call */dump* to stream the collection data to the client, up to the value of *lastLogTick*. After that, the client can create the indexes on the collections as they were reported by */inventory*.  </ul> If the clients wants to continuously stream replication log events from the logger server, the following additional steps need to be carried out: <br><br>  <ul class=\"swagger-list\"><li>the client should call */logger-follow* initially to fetch the first batch of replication events that were logged after the client's call to */inventory*.  The call to */logger-follow* should use a *from* parameter with the value of the *lastLogTick* as reported by */inventory*. The call to */logger-follow* will return the *x-arango-replication-lastincluded* which will contain the last tick value included in the response.  <li>the client can then continuously call */logger-follow* to incrementally fetch new replication events that occurred after the last transfer.  Calls should use a *from* parameter with the value of the *x-arango-replication-lastincluded* header of the previous response. If there are no more replication events, the response will be empty and clients can go to sleep for a while and try again later.  </ul> **Note**: on a coordinator, this request must have the URL parameter *DBserver* which must be an ID of a DBserver. The very same request is forwarded synchronously to that DBserver. It is an error if this attribute is not bound in the coordinator case. <br><br>",
                    "summary": " Return inventory of collections and indexes",
                    "httpMethod": "GET",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/replication/inventory\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"collections\" : [ \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"812974021\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"animals\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"628621253\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"better-example\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"723386309\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"Company\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"723124165\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"Customer\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"812056517\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"demo\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"723648453\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"Electronics\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"1213595589\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"female\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"1123352517\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"frenchCity\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"1123090373\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"germanCity\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"723517381\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"Groceries\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"1213726661\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"male\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"1148714949\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"otherVertices\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"927006661\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"vertices1\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"928448453\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"edges2\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"1123483589\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"frenchHighway\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"723255237\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"friend_of\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"1123221445\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"germanHighway\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"723779525\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"has_bought\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"1123614661\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"internationalHighway\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"1213857733\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"relation\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    } \n  ], \n  \"state\" : { \n    \"running\" : true, \n    \"lastLogTick\" : \"1251606469\", \n    \"totalEvents\" : 7719, \n    \"time\" : \"2014-07-11T08:44:00Z\" \n  }, \n  \"tick\" : \"1251606469\" \n}\n</code></pre><br><br><br> With some additional indexes: <br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/replication/inventory\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"collections\" : [ \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"812974021\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"animals\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"628621253\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"better-example\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"723386309\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"Company\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"723124165\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"Customer\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"812056517\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"demo\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"723648453\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"Electronics\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"1213595589\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"female\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"1123352517\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"frenchCity\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"1123090373\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"germanCity\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"723517381\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"Groceries\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"1251672005\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"IndexedCollection1\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ \n        { \n          \"id\" : \"1251934149\", \n          \"type\" : \"hash\", \n          \"unique\" : false, \n          \"fields\" : [ \n            \"name\" \n          ] \n        }, \n        { \n          \"id\" : \"1252261829\", \n          \"type\" : \"skiplist\", \n          \"unique\" : true, \n          \"fields\" : [ \n            \"a\", \n            \"b\" \n          ] \n        }, \n        { \n          \"id\" : \"1252458437\", \n          \"type\" : \"cap\", \n          \"unique\" : false, \n          \"size\" : 500, \n          \"byteSize\" : 0 \n        } \n      ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"1252655045\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"IndexedCollection2\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ \n        { \n          \"id\" : \"1252917189\", \n          \"type\" : \"fulltext\", \n          \"unique\" : false, \n          \"minLength\" : 10, \n          \"fields\" : [ \n            \"text\" \n          ] \n        }, \n        { \n          \"id\" : \"1253179333\", \n          \"type\" : \"skiplist\", \n          \"unique\" : false, \n          \"fields\" : [ \n            \"a\" \n          ] \n        }, \n        { \n          \"id\" : \"1253375941\", \n          \"type\" : \"cap\", \n          \"unique\" : false, \n          \"size\" : 0, \n          \"byteSize\" : 1048576 \n        } \n      ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"1213726661\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"male\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"1148714949\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"otherVertices\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 2, \n        \"cid\" : \"927006661\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"vertices1\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"928448453\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"edges2\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"1123483589\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"frenchHighway\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"723255237\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"friend_of\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"1123221445\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"germanHighway\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"723779525\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"has_bought\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"1123614661\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"internationalHighway\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    }, \n    { \n      \"parameters\" : { \n        \"version\" : 5, \n        \"type\" : 3, \n        \"cid\" : \"1213857733\", \n        \"deleted\" : false, \n        \"doCompact\" : true, \n        \"maximalSize\" : 1048576, \n        \"name\" : \"relation\", \n        \"isVolatile\" : false, \n        \"waitForSync\" : false \n      }, \n      \"indexes\" : [ ] \n    } \n  ], \n  \"state\" : { \n    \"running\" : true, \n    \"lastLogTick\" : \"1251737541\", \n    \"totalEvents\" : 7732, \n    \"time\" : \"2014-07-11T08:44:00Z\" \n  }, \n  \"tick\" : \"1253507013\" \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "ReturnInventoryOfCollectionsAndIndexes"
                }
            ],
            "path": "/_api/replication/inventory"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the request was executed successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        },
                        {
                            "reason": "is returned if an error occurred while assembling the response. @endDocuBlock",
                            "code": "500"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "includeSystem",
                            "description": "Include system collections in the result. The default value is *false*. <br><br>"
                        }
                    ],
                    "notes": "Returns the list of collections and indexes available on the cluster. <br><br> The response will be a list of JSON hash array, one for each collection, which contains exactly two keys \"parameters\" and \"indexes\". This information comes from Plan/Collections/<DB-Name>/* in the agency, just that the *indexes* attribute there is relocated to adjust it to the data format of arangodump. <br><br>",
                    "summary": " Return cluster inventory of collections and indexes",
                    "httpMethod": "GET",
                    "examples": "",
                    "nickname": "ReturnClusterInventoryOfCollectionsAndIndexes"
                }
            ],
            "path": "/_api/replication/clusterInventory"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the request was executed successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if either the *from* or *to* values are invalid. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned when the collection could not be found. <br><br>",
                            "code": "404"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        },
                        {
                            "reason": "is returned if an error occurred while assembling the response. <br><br>",
                            "code": "500"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "true",
                            "name": "collection",
                            "description": "The name or id of the collection to dump. <br><br>"
                        },
                        {
                            "dataType": "Number",
                            "paramType": "query",
                            "required": "false",
                            "name": "from",
                            "description": "Lower bound tick value for results. <br><br>"
                        },
                        {
                            "dataType": "Number",
                            "paramType": "query",
                            "required": "false",
                            "name": "to",
                            "description": "Upper bound tick value for results. <br><br>"
                        },
                        {
                            "dataType": "Number",
                            "paramType": "query",
                            "required": "false",
                            "name": "chunkSize",
                            "description": "Approximate maximum size of the returned result. <br><br>"
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "ticks",
                            "description": "Whether or not to include tick values in the dump. Default value is *true*. <br><br>"
                        }
                    ],
                    "notes": "Returns the data from the collection for the requested range. <br><br> When the *from* URL parameter is not used, collection events are returned from the beginning. When the *from* parameter is used, the result will only contain collection entries which have higher tick values than the specified *from* value (note: the log entry with a tick value equal to *from* will be excluded). <br><br> The *to* URL parameter can be used to optionally restrict the upper bound of the result to a certain tick value. If used, the result will only contain collection entries with tick values up to (including) *to*. <br><br> The *chunkSize* URL parameter can be used to control the size of the result. It must be specified in bytes. The *chunkSize* value will only be honored approximately. Otherwise a too low *chunkSize* value could cause the server to not be able to put just one entry into the result and return it. Therefore, the *chunkSize* value will only be consulted after an entry has been written into the result. If the result size is then bigger than *chunkSize*, the server will respond with as many entries as there are in the response already. If the result size is still smaller than *chunkSize*, the server will try to return more data if there's more data left to return. <br><br> If *chunkSize* is not specified, some server-side default value will be used. <br><br> The *Content-Type* of the result is *application/x-arango-dump*. This is an easy-to-process format, with all entries going onto separate lines in the response body. <br><br> Each line itself is a JSON hash, with at least the following attributes: <br><br>  <ul class=\"swagger-list\"><li>*tick*: the operation's tick attribute  <li>*key*: the key of the document/edge or the key used in the deletion operation  <li>*rev*: the revision id of the document/edge or the deletion operation  <li>*data*: the actual document/edge data for types 2300 and 2301. The full document/edge data will be returned even for updates.  <li>*type*: the type of entry. Possible values for *type* are:  - 2300: document insertion/update  - 2301: edge insertion/update  - 2302: document/edge deletion  </ul> **Note**: there will be no distinction between inserts and updates when calling this method. <br><br>",
                    "summary": " Return data of a collection",
                    "httpMethod": "GET",
                    "examples": "<br><br> Empty collection: <br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/replication/dump?collection=testCollection\n\nHTTP/1.1 204 No Content\ncontent-type: application/x-arango-dump; charset=utf-8\nx-arango-replication-checkmore: false\nx-arango-replication-lastincluded: 0\n\n</code></pre><br><br><br> Non-empty collection: <br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/replication/dump?collection=testCollection\n\nHTTP/1.1 200 OK\ncontent-type: application/x-arango-dump; charset=utf-8\nx-arango-replication-checkmore: false\nx-arango-replication-lastincluded: 1256390597\n\n\"{\\\"tick\\\":\\\"1255735237\\\",\\\"type\\\":2300,\\\"key\\\":\\\"123456\\\",\\\"rev\\\":\\\"1255669701\\\",\\\"data\\\":{\\\"_key\\\":\\\"123456\\\",\\\"_rev\\\":\\\"1255669701\\\",\\\"c\\\":false,\\\"b\\\":1,\\\"d\\\":\\\"additional value\\\"}}\\n{\\\"tick\\\":\\\"1256193989\\\",\\\"type\\\":2302,\\\"key\\\":\\\"foobar\\\",\\\"rev\\\":\\\"1256128453\\\"}\\n{\\\"tick\\\":\\\"1256390597\\\",\\\"type\\\":2302,\\\"key\\\":\\\"abcdef\\\",\\\"rev\\\":\\\"1256325061\\\"}\\n\"\n</code></pre><br>@endDocuBlock",
                    "nickname": "ReturnDataOfACollection"
                }
            ],
            "path": "/_api/replication/dump"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the request was executed successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the configuration is incomplete or malformed. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        },
                        {
                            "reason": "is returned if an error occurred during sychronisation. <br><br>",
                            "code": "500"
                        },
                        {
                            "reason": "is returned when this operation is called on a coordinator in a cluster. @endDocuBlock",
                            "code": "501"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": "true",
                            "name": "configuration",
                            "description": "A JSON representation of the configuration. <br><br>"
                        }
                    ],
                    "notes": "Starts a full data synchronization from a remote endpoint into the local ArangoDB database. <br><br> The *sync* method can be used by replication clients to connect an ArangoDB database  to a remote endpoint, fetch the remote list of collections and indexes, and collection data. It will thus create a local backup of the state of data at the remote ArangoDB  database. *sync* works on a per-database level.  <br><br> *sync* will first fetch the list of collections and indexes from the remote endpoint. It does so by calling the *inventory* API of the remote database. It will then purge data in the local ArangoDB database, and after start will transfer collection data  from the remote database to the local ArangoDB database. It will extract data from the remote database by calling the remote database's *dump* API until all data are fetched. <br><br> The body of the request must be JSON hash with the configuration. The following attributes are allowed for the configuration: <br><br>  <ul class=\"swagger-list\"><li>*endpoint*: the endpoint to connect to (e.g. \"tcp://192.168.173.13:8529\").  <li>*database*: the database name on the master (if not specified, defaults to the name of the local current database).  <li>*username*: an optional ArangoDB username to use when connecting to the endpoint.  <li>*password*: the password to use when connecting to the endpoint.  <li>*restrictType*: an optional string value for collection filtering. When  specified, the allowed values are *include* or *exclude*.  <li>*restrictCollections*: an optional list of collections for use with *restrictType*. If *restrictType* is *include*, only the specified collections  will be sychronised. If *restrictType* is *exclude*, all but the specified  collections will be synchronized.  </ul> In case of success, the body of the response is a JSON hash with the following attributes: <br><br>  <ul class=\"swagger-list\"><li>*collections*: a list of collections that were transferred from the endpoint  <li>*lastLogTick*: the last log tick on the endpoint at the time the transfer was started. Use this value as the *from* value when starting the continuous synchronization later.  </ul> WARNING: calling this method will sychronise data from the collections found on the remote endpoint to the local ArangoDB database. All data in the local collections will be purged and replaced with data from the endpoint. <br><br> Use with caution! <br><br> **Note**: this method is not supported on a coordinator in a cluster. <br><br>",
                    "summary": " Synchronize data from a remote endpoint",
                    "httpMethod": "PUT",
                    "examples": "",
                    "nickname": "SynchronizeDataFromARemoteEndpoint"
                }
            ],
            "path": "/_api/replication/sync"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the request was executed successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        },
                        {
                            "reason": "is returned if an error occurred while assembling the response. <br><br>",
                            "code": "500"
                        }
                    ],
                    "parameters": [],
                    "notes": "Returns the servers id. The id is also returned by other replication API methods, and this method is an easy means of determining a server's id. <br><br> The body of the response is a JSON hash with the attribute *serverId*. The server id is returned as a string. <br><br>",
                    "summary": " Return server id",
                    "httpMethod": "GET",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/replication/server-id\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"serverId\" : \"153548820682876\" \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "ReturnServerId"
                }
            ],
            "path": "/_api/replication/server-id"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the request was executed successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        },
                        {
                            "reason": "is returned if an error occurred while assembling the response. <br><br>",
                            "code": "500"
                        }
                    ],
                    "parameters": [],
                    "notes": "Returns the configuration of the replication applier. <br><br> The body of the response is a JSON hash with the configuration. The following attributes may be present in the configuration: <br><br>  <ul class=\"swagger-list\"><li>*endpoint*: the logger server to connect to (e.g. \"tcp://192.168.173.13:8529\").  <li>*database*: the name of the database to connect to (e.g. \"_system\").  <li>*username*: an optional ArangoDB username to use when connecting to the endpoint.  <li>*password*: the password to use when connecting to the endpoint.  <li>*maxConnectRetries*: the maximum number of connection attempts the applier will make in a row. If the applier cannot establish a connection to the endpoint in this number of attempts, it will stop itself.  <li>*connectTimeout*: the timeout (in seconds) when attempting to connect to the endpoint. This value is used for each connection attempt.  <li>*requestTimeout*: the timeout (in seconds) for individual requests to the endpoint.  <li>*chunkSize*: the requested maximum size for log transfer packets that is used when the endpoint is contacted.  <li>*autoStart*: whether or not to auto-start the replication applier on (next and following) server starts  <li>*adaptivePolling*: whether or not the replication applier will use adaptive polling.",
                    "summary": " Return configuration of replication applier",
                    "httpMethod": "GET",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/replication/applier-config\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"requestTimeout\" : 300, \n  \"connectTimeout\" : 10, \n  \"maxConnectRetries\" : 100, \n  \"sslProtocol\" : 0, \n  \"chunkSize\" : 0, \n  \"autoStart\" : false, \n  \"adaptivePolling\" : true \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "ReturnConfigurationOfReplicationApplier"
                }
            ],
            "path": "/_api/replication/applier-config"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the request was executed successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the configuration is incomplete or malformed, or if the replication applier is currently running. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        },
                        {
                            "reason": "is returned if an error occurred while assembling the response. <br><br>",
                            "code": "500"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": "true",
                            "name": "configuration",
                            "description": "A JSON representation of the configuration. <br><br>"
                        }
                    ],
                    "notes": "Sets the configuration of the replication applier. The configuration can only be changed while the applier is not running. The updated configuration will be saved immediately but only become active with the next start of the applier. <br><br> The body of the request must be JSON hash with the configuration. The following attributes are allowed for the configuration: <br><br>  <ul class=\"swagger-list\"><li>*endpoint*: the logger server to connect to (e.g. \"tcp://192.168.173.13:8529\"). The endpoint must be specified.  <li>*database*: the name of the database on the endpoint. If not specified, defaults to the current local database name.  <li>*username*: an optional ArangoDB username to use when connecting to the endpoint.  <li>*password*: the password to use when connecting to the endpoint.  <li>*maxConnectRetries*: the maximum number of connection attempts the applier will make in a row. If the applier cannot establish a connection to the endpoint in this number of attempts, it will stop itself.  <li>*connectTimeout*: the timeout (in seconds) when attempting to connect to the endpoint. This value is used for each connection attempt.  <li>*requestTimeout*: the timeout (in seconds) for individual requests to the endpoint.  <li>*chunkSize*: the requested maximum size for log transfer packets that is used when the endpoint is contacted.  <li>*autoStart*: whether or not to auto-start the replication applier on (next and following) server starts  <li>*adaptivePolling*: if set to *true*, the replication applier will fall to sleep for an increasingly long period in case the logger server at the endpoint does not have any more replication events to apply. Using adaptive polling is thus useful to reduce the amount of work for both the applier and the logger server for cases when there are only infrequent changes. The downside is that when using adaptive polling, it might take longer for the replication applier to detect that there are new replication events on the logger server.  Setting *adaptivePolling* to false will make the replication applier contact the logger server in a constant interval, regardless of whether the logger server provides updates frequently or seldomly.  </ul> In case of success, the body of the response is a JSON hash with the updated configuration. <br><br>",
                    "summary": " Adjust configuration of replication applier",
                    "httpMethod": "PUT",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell> curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/replication/applier-config\n{\"endpoint\":\"tcp://127.0.0.1:8529\",\"username\":\"replicationApplier\",\"password\":\"applier1234@foxx\",\"chunkSize\":4194304,\"autoStart\":false,\"adaptivePolling\":true}\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"endpoint\" : \"tcp://127.0.0.1:8529\", \n  \"database\" : \"_system\", \n  \"username\" : \"replicationApplier\", \n  \"requestTimeout\" : 300, \n  \"connectTimeout\" : 10, \n  \"maxConnectRetries\" : 100, \n  \"sslProtocol\" : 0, \n  \"chunkSize\" : 4194304, \n  \"autoStart\" : false, \n  \"adaptivePolling\" : true \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "AdjustConfigurationOfReplicationApplier"
                }
            ],
            "path": "/_api/replication/applier-config"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the request was executed successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the replication applier is not fully configured or the configuration is invalid. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        },
                        {
                            "reason": "is returned if an error occurred while assembling the response. <br><br>",
                            "code": "500"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "false",
                            "name": "from",
                            "description": "The remote *lastLogTick* value from which to start applying. If not specified, the last saved tick from the previous applier run is used. If there is no previous applier state saved, the applier will start at the beginning of the logger server's log. <br><br>"
                        }
                    ],
                    "notes": "Starts the replication applier. This will return immediately if the replication applier is already running. <br><br> If the replication applier is not already running, the applier configuration will be checked, and if it is complete, the applier will be started in a background thread. This means that even if the applier will encounter any errors while running, they will not be reported in the response to this method. <br><br> To detect replication applier errors after the applier was started, use the */_api/replication/applier-state* API instead. <br><br>",
                    "summary": " Start replication applier",
                    "httpMethod": "PUT",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell> curl -X PUT --dump - http://localhost:8529/_api/replication/applier-start\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"state\" : { \n    \"running\" : true, \n    \"lastAppliedContinuousTick\" : null, \n    \"lastProcessedContinuousTick\" : null, \n    \"lastAvailableContinuousTick\" : null, \n    \"progress\" : { \n      \"time\" : \"2014-07-11T08:43:11Z\", \n      \"message\" : \"applier created\", \n      \"failedConnects\" : 0 \n    }, \n    \"totalRequests\" : 0, \n    \"totalFailedConnects\" : 0, \n    \"totalEvents\" : 0, \n    \"lastError\" : { \n      \"errorNum\" : 0 \n    }, \n    \"time\" : \"2014-07-11T08:44:02Z\" \n  }, \n  \"server\" : { \n    \"version\" : \"2.2.0\", \n    \"serverId\" : \"153548820682876\" \n  }, \n  \"endpoint\" : \"tcp://127.0.0.1:8529\", \n  \"database\" : \"_system\" \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "StartReplicationApplier"
                }
            ],
            "path": "/_api/replication/applier-start"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the request was executed successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        },
                        {
                            "reason": "is returned if an error occurred while assembling the response. <br><br>",
                            "code": "500"
                        }
                    ],
                    "parameters": [],
                    "notes": "Stops the replication applier. This will return immediately if the replication applier is not running. <br><br>",
                    "summary": " Stop replication applier",
                    "httpMethod": "PUT",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell> curl -X PUT --dump - http://localhost:8529/_api/replication/applier-stop\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"state\" : { \n    \"running\" : false, \n    \"lastAppliedContinuousTick\" : null, \n    \"lastProcessedContinuousTick\" : null, \n    \"lastAvailableContinuousTick\" : null, \n    \"progress\" : { \n      \"time\" : \"2014-07-11T08:44:02Z\", \n      \"message\" : \"fetching master state information\", \n      \"failedConnects\" : 1 \n    }, \n    \"totalRequests\" : 2, \n    \"totalFailedConnects\" : 2, \n    \"totalEvents\" : 0, \n    \"lastError\" : { \n      \"time\" : \"2014-07-11T08:44:02Z\", \n      \"errorMessage\" : \"could not connect to master at tcp://127.0.0.1:8529: Could not connect\", \n      \"errorNum\" : 1412 \n    }, \n    \"time\" : \"2014-07-11T08:44:02Z\" \n  }, \n  \"server\" : { \n    \"version\" : \"2.2.0\", \n    \"serverId\" : \"153548820682876\" \n  }, \n  \"endpoint\" : \"tcp://127.0.0.1:8529\", \n  \"database\" : \"_system\" \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "StopReplicationApplier"
                }
            ],
            "path": "/_api/replication/applier-stop"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the request was executed successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        },
                        {
                            "reason": "is returned if an error occurred while assembling the response. <br><br>",
                            "code": "500"
                        }
                    ],
                    "parameters": [],
                    "notes": "Returns the state of the replication applier, regardless of whether the applier is currently running or not. <br><br> The response is a JSON hash with the following attributes: <br><br>  <ul class=\"swagger-list\"><li>*state*: a JSON hash with the following sub-attributes:  - *running*: whether or not the applier is active and running  - *lastAppliedContinuousTick*: the last tick value from the continuous   replication log the applier has applied.  - *lastProcessedContinuousTick*: the last tick value from the continuous   replication log the applier has processed.    Regularly, the last applied and last processed tick values should be   identical. For transactional operations, the replication applier will first   process incoming log events before applying them, so the processed tick   value might be higher than the applied tick value. This will be the case   until the applier encounters the *transaction commit* log event for the   transaction.  - *lastAvailableContinuousTick*: the last tick value the logger server can   provide.  - *time*: the time on the applier server.  - *totalRequests*: the total number of requests the applier has made to the   endpoint.  - *totalFailedConnects*: the total number of failed connection attempts the   applier has made.  - *totalEvents*: the total number of log events the applier has processed.  - *progress*: a JSON hash with details about the replication applier progress.   It contains the following sub-attributes if there is progress to report:    - *message*: a textual description of the progress    - *time*: the date and time the progress was logged    - *failedConnects*: the current number of failed connection attempts  - *lastError*: a JSON hash with details about the last error that happened on   the applier. It contains the following sub-attributes if there was an error:    - *errorNum*: a numerical error code    - *errorMessage*: a textual error description    - *time*: the date and time the error occurred    In case no error has occurred, *lastError* will be empty.  <li>*server*: a JSON hash with the following sub-attributes:  - *version*: the applier server's version  - *serverId*: the applier server's id  <li>*endpoint*: the endpoint the applier is connected to (if applier is active) or will connect to (if applier is currently inactive)  <li>*database*: the name of the database the applier is connected to (if applier is active) or will connect to (if applier is currently inactive)",
                    "summary": " State of the replication applier",
                    "httpMethod": "GET",
                    "examples": "<br><br> Fetching the state of an inactive applier: <br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/replication/applier-state\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"state\" : { \n    \"running\" : false, \n    \"lastAppliedContinuousTick\" : null, \n    \"lastProcessedContinuousTick\" : null, \n    \"lastAvailableContinuousTick\" : null, \n    \"progress\" : { \n      \"time\" : \"2014-07-11T08:44:02Z\", \n      \"message\" : \"fetching master state information\", \n      \"failedConnects\" : 1 \n    }, \n    \"totalRequests\" : 2, \n    \"totalFailedConnects\" : 2, \n    \"totalEvents\" : 0, \n    \"lastError\" : { \n      \"time\" : \"2014-07-11T08:44:02Z\", \n      \"errorMessage\" : \"could not connect to master at tcp://127.0.0.1:8529: Could not connect\", \n      \"errorNum\" : 1412 \n    }, \n    \"time\" : \"2014-07-11T08:44:02Z\" \n  }, \n  \"server\" : { \n    \"version\" : \"2.2.0\", \n    \"serverId\" : \"153548820682876\" \n  }, \n  \"endpoint\" : \"tcp://127.0.0.1:8529\", \n  \"database\" : \"_system\" \n}\n</code></pre><br><br><br> Fetching the state of an active applier: <br><br><br><br><pre><code class=\"json\">shell> curl --data-binary @- --dump - http://localhost:8529/_api/replication/applier-state\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"state\" : { \n    \"running\" : true, \n    \"lastAppliedContinuousTick\" : null, \n    \"lastProcessedContinuousTick\" : null, \n    \"lastAvailableContinuousTick\" : null, \n    \"progress\" : { \n      \"time\" : \"2014-07-11T08:44:02Z\", \n      \"message\" : \"fetching master state information\", \n      \"failedConnects\" : 1 \n    }, \n    \"totalRequests\" : 2, \n    \"totalFailedConnects\" : 2, \n    \"totalEvents\" : 0, \n    \"lastError\" : { \n      \"errorNum\" : 0 \n    }, \n    \"time\" : \"2014-07-11T08:44:02Z\" \n  }, \n  \"server\" : { \n    \"version\" : \"2.2.0\", \n    \"serverId\" : \"153548820682876\" \n  }, \n  \"endpoint\" : \"tcp://127.0.0.1:8529\", \n  \"database\" : \"_system\" \n}\n</code></pre><br>@endDocuBlock",
                    "nickname": "StateOfTheReplicationApplier"
                }
            ],
            "path": "/_api/replication/applier-state"
        }
    ]
}
