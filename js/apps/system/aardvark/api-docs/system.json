{
    "basePath": "/",
    "swaggerVersion": "1.1",
    "apiVersion": "0.1",
    "apis": [
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Routing information was reloaded successfully. ",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br>Reloads the routing information from the collection <em>routing</em>. <br><br>",
                    "summary": "reloads the routing collection",
                    "httpMethod": "POST",
                    "examples": "",
                    "nickname": "reloadsTheRoutingCollection"
                }
            ],
            "path": "/_admin/routing/reload"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Module cache was flushed successfully. ",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br>The call flushes the modules cache on the server. See <em>JSModulesCache</em> for details about this cache. <br><br>",
                    "summary": "flushs the module cache",
                    "httpMethod": "POST",
                    "examples": "",
                    "nickname": "flushsTheModuleCache"
                }
            ],
            "path": "/_admin/modules/flush"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Time was returned successfully. ",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br>The call returns an object with the attribute <em>time</em>. This contains the current system time as a Unix timestamp with microsecond precision. <br><br>",
                    "summary": "returns the system time",
                    "httpMethod": "GET",
                    "examples": "",
                    "nickname": "returnsTheSystemTime"
                }
            ],
            "path": "/_admin/time"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Sleep was conducted successfully. ",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br>The call returns an object with the attribute <em>duration</em>. This takes as many seconds as the duration argument says. <br><br>",
                    "summary": "sleeps for 5 seconds",
                    "httpMethod": "GET",
                    "examples": "",
                    "nickname": "sleepsFor5Seconds"
                }
            ],
            "path": "/_admin/sleep?duration=5"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Echo was returned successfully. ",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br>The call returns an object with the following attributes: <br><br>- <em>headers</em>: a list of HTTP headers received<br><br>- <em>requestType</em>: the HTTP request method (e.g. GET)<br><br>- <em>parameters</em>: list of URL parameters received<br><br>",
                    "summary": "returns the current request",
                    "httpMethod": "GET",
                    "examples": "",
                    "nickname": "returnsTheCurrentRequest"
                }
            ],
            "path": "/_admin/echo"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Statistics were returned successfully. ",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br>Returns the statistics information. The returned object contains the statistics figures grouped together according to the description returned by <em>_admin/statistics-description</em>. For instance, to access a figure <em>userTime</em> from the group <em>system</em>, you first select the sub-object describing the group stored in <em>system</em> and in that sub-object the value for <em>userTime</em> is stored in the attribute of the same name. <br><br>In case of a distribution, the returned object contains the total count in <em>count</em> and the distribution list in <em>counts</em>. The sum (or total) of the individual values is returned in <em>sum</em>. <br><br>",
                    "summary": "reads the statistics",
                    "httpMethod": "GET",
                    "examples": "<br><br><pre><code class=\"json\" >unix> curl --dump - http://localhost:8529/_admin/statistics\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"system\" : { \n    \"minorPageFaults\" : 242572, \n    \"majorPageFaults\" : 1790, \n    \"userTime\" : 32.862964, \n    \"systemTime\" : 2.39053, \n    \"numberOfThreads\" : 16, \n    \"residentSize\" : 69881856, \n    \"residentSizePercent\" : 1.6270637512207031, \n    \"virtualSize\" : 4983603200 \n  }, \n  \"client\" : { \n    \"httpConnections\" : 1, \n    \"connectionTime\" : { \n      \"sum\" : 0.0021071434020996094, \n      \"count\" : 1, \n      \"counts\" : [ \n        1, \n        0, \n        0, \n        0 \n      ] \n    }, \n    \"totalTime\" : { \n      \"sum\" : 48.22894048690796, \n      \"count\" : 850, \n      \"counts\" : [ \n        195, \n        210, \n        350, \n        84, \n        8, \n        2, \n        1 \n      ] \n    }, \n    \"requestTime\" : { \n      \"sum\" : 47.80676555633545, \n      \"count\" : 850, \n      \"counts\" : [ \n        202, \n        205, \n        352, \n        81, \n        7, \n        2, \n        1 \n      ] \n    }, \n    \"queueTime\" : { \n      \"sum\" : 0.0365753173828125, \n      \"count\" : 848, \n      \"counts\" : [ \n        848, \n        0, \n        0, \n        0, \n        0, \n        0, \n        0 \n      ] \n    }, \n    \"bytesSent\" : { \n      \"sum\" : 416814, \n      \"count\" : 850, \n      \"counts\" : [ \n        235, \n        500, \n        58, \n        57, \n        0, \n        0 \n      ] \n    }, \n    \"bytesReceived\" : { \n      \"sum\" : 197140, \n      \"count\" : 850, \n      \"counts\" : [ \n        625, \n        225, \n        0, \n        0, \n        0, \n        0 \n      ] \n    } \n  }, \n  \"http\" : { \n    \"requestsTotal\" : 850, \n    \"requestsAsync\" : 0, \n    \"requestsGet\" : 225, \n    \"requestsHead\" : 0, \n    \"requestsPost\" : 446, \n    \"requestsPut\" : 34, \n    \"requestsPatch\" : 3, \n    \"requestsDelete\" : 142, \n    \"requestsOptions\" : 0, \n    \"requestsOther\" : 0 \n  }, \n  \"server\" : { \n    \"uptime\" : 55.57714891433716, \n    \"physicalMemory\" : 4294967296 \n  }, \n  \"error\" : false, \n  \"code\" : 200 \n}\n\n</code></pre><br>",
                    "nickname": "readsTheStatistics"
                }
            ],
            "path": "/_admin/statistics"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Description was returned successfully. ",
                            "code": "200"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br>Returns a description of the statistics returned by <em>/_admin/statistics</em>. The returned objects contains a list of statistics groups in the attribute <em>groups</em> and a list of statistics figures in the attribute <em>figures</em>. <br><br>A statistics group is described by <br><br>- <em>group</em>: The identifier of the group.- <em>name</em>: The name of the group.- <em>description</em>: A description of the group.<br><br>A statistics figure is described by <br><br>- <em>group</em>: The identifier of the group to which this figure belongs.- <em>identifier</em>: The identifier of the figure. It is unique within the group.- <em>name</em>: The name of the figure.- <em>description</em>: A description of the figure.- <em>type</em>: Either <em>current</em>, <em>accumulated</em>, or <em>distribution</em>.- <em>cuts</em>: The distribution vector.- <em>units</em>: Units in which the figure is measured.<br><br>",
                    "summary": "statistics description",
                    "httpMethod": "GET",
                    "examples": "<br><br><pre><code class=\"json\" >unix> curl --dump - http://localhost:8529/_admin/statistics-description\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"groups\" : [ \n    { \n      \"group\" : \"system\", \n      \"name\" : \"Process Statistics\", \n      \"description\" : \"Statistics about the ArangoDB process\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"name\" : \"Client Connection Statistics\", \n      \"description\" : \"Statistics about the connections.\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"name\" : \"HTTP Request Statistics\", \n      \"description\" : \"Statistics about the HTTP requests.\" \n    }, \n    { \n      \"group\" : \"server\", \n      \"name\" : \"Server Statistics\", \n      \"description\" : \"Statistics about the ArangoDB server\" \n    } \n  ], \n  \"figures\" : [ \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"userTime\", \n      \"name\" : \"User Time\", \n      \"description\" : \"Amount of time that this process has been scheduled in user mode, measured in cl...\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"systemTime\", \n      \"name\" : \"System Time\", \n      \"description\" : \"Amount of time that this process has been scheduled in kernel mode, measured in ...\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"numberOfThreads\", \n      \"name\" : \"Number of Threads\", \n      \"description\" : \"Number of threads in this process.\", \n      \"type\" : \"current\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"residentSize\", \n      \"name\" : \"Resident Set Size\", \n      \"description\" : \"The total size of the number of pages the process has in real memory. This is ju...\", \n      \"type\" : \"current\", \n      \"units\" : \"bytes\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"residentSizePercent\", \n      \"name\" : \"Resident Set Size\", \n      \"description\" : \"The percentage of physical memory used as resident set size\", \n      \"type\" : \"current\", \n      \"units\" : \"percent\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"virtualSize\", \n      \"name\" : \"Virtual Memory Size\", \n      \"description\" : \"The size of the virtual memory the process is using.\", \n      \"type\" : \"current\", \n      \"units\" : \"bytes\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"minorPageFaults\", \n      \"name\" : \"Minor Page Faults\", \n      \"description\" : \"The number of minor faults the process has made which have not required loading ...\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"system\", \n      \"identifier\" : \"majorPageFaults\", \n      \"name\" : \"Major Page Faults\", \n      \"description\" : \"The number of major faults the process has made which have required loading a me...\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"httpConnections\", \n      \"name\" : \"Client Connections\", \n      \"description\" : \"The number of connections that are currently open.\", \n      \"type\" : \"current\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"totalTime\", \n      \"name\" : \"Total Time\", \n      \"description\" : \"Total time needed to answer a request.\", \n      \"type\" : \"distribution\", \n      \"cuts\" : [ \n        0.01, \n        0.05, \n        0.1, \n        0.2, \n        0.5, \n        1 \n      ], \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"requestTime\", \n      \"name\" : \"Request Time\", \n      \"description\" : \"Request time needed to answer a request.\", \n      \"type\" : \"distribution\", \n      \"cuts\" : [ \n        0.01, \n        0.05, \n        0.1, \n        0.2, \n        0.5, \n        1 \n      ], \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"queueTime\", \n      \"name\" : \"Queue Time\", \n      \"description\" : \"Queue time needed to answer a request.\", \n      \"type\" : \"distribution\", \n      \"cuts\" : [ \n        0.01, \n        0.05, \n        0.1, \n        0.2, \n        0.5, \n        1 \n      ], \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"bytesSent\", \n      \"name\" : \"Bytes Sent\", \n      \"description\" : \"Bytes sents for a request.\", \n      \"type\" : \"distribution\", \n      \"cuts\" : [ \n        250, \n        1000, \n        2000, \n        5000, \n        10000 \n      ], \n      \"units\" : \"bytes\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"bytesReceived\", \n      \"name\" : \"Bytes Received\", \n      \"description\" : \"Bytes receiveds for a request.\", \n      \"type\" : \"distribution\", \n      \"cuts\" : [ \n        250, \n        1000, \n        2000, \n        5000, \n        10000 \n      ], \n      \"units\" : \"bytes\" \n    }, \n    { \n      \"group\" : \"client\", \n      \"identifier\" : \"connectionTime\", \n      \"name\" : \"Connection Time\", \n      \"description\" : \"Total connection time of a client.\", \n      \"type\" : \"distribution\", \n      \"cuts\" : [ \n        0.1, \n        1, \n        60 \n      ], \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsTotal\", \n      \"name\" : \"Total requests\", \n      \"description\" : \"Total number of HTTP requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsAsync\", \n      \"name\" : \"Async requests\", \n      \"description\" : \"Number of asynchronously executed HTTP requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsGet\", \n      \"name\" : \"HTTP GET requests\", \n      \"description\" : \"Number of HTTP GET requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsHead\", \n      \"name\" : \"HTTP HEAD requests\", \n      \"description\" : \"Number of HTTP HEAD requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsPost\", \n      \"name\" : \"HTTP POST requests\", \n      \"description\" : \"Number of HTTP POST requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsPut\", \n      \"name\" : \"HTTP PUT requests\", \n      \"description\" : \"Number of HTTP PUT requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsPatch\", \n      \"name\" : \"HTTP PATCH requests\", \n      \"description\" : \"Number of HTTP PATCH requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsDelete\", \n      \"name\" : \"HTTP DELETE requests\", \n      \"description\" : \"Number of HTTP DELETE requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsOptions\", \n      \"name\" : \"HTTP OPTIONS requests\", \n      \"description\" : \"Number of HTTP OPTIONS requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"http\", \n      \"identifier\" : \"requestsOther\", \n      \"name\" : \"other HTTP requests\", \n      \"description\" : \"Number of other HTTP requests.\", \n      \"type\" : \"accumulated\", \n      \"units\" : \"number\" \n    }, \n    { \n      \"group\" : \"server\", \n      \"identifier\" : \"uptime\", \n      \"name\" : \"Server Uptime\", \n      \"description\" : \"Number of seconds elapsed since server start.\", \n      \"type\" : \"current\", \n      \"units\" : \"seconds\" \n    }, \n    { \n      \"group\" : \"server\", \n      \"identifier\" : \"physicalMemory\", \n      \"name\" : \"Physical Memory\", \n      \"description\" : \"Physical memory in bytes.\", \n      \"type\" : \"current\", \n      \"units\" : \"bytes\" \n    } \n  ], \n  \"error\" : false, \n  \"code\" : 200 \n}\n\n</code></pre><br>",
                    "nickname": "statisticsDescription"
                }
            ],
            "path": "/_admin/statistics-description"
        },
        {
            "operations": [
                {
                    "errorResponses": [],
                    "parameters": [
                        {
                            "dataType": "Javascript",
                            "paramType": "body",
                            "required": "true",
                            "name": "body",
                            "description": "A JSON body containing an attribute \"tests\" which lists the files  containing the test suites. "
                        }
                    ],
                    "notes": "<br><br>Executes the specified tests on the server and returns an object with the test results. The object has an attribute \"error\" which states whether  any error occurred. The object also has an attribute \"passed\" which  indicates which tests passed and which did not. ",
                    "summary": "runs tests on the server",
                    "httpMethod": "POST",
                    "examples": "",
                    "nickname": "runsTestsOnTheServer"
                }
            ],
            "path": "/_admin/test"
        },
        {
            "operations": [
                {
                    "errorResponses": [],
                    "parameters": [
                        {
                            "dataType": "Javascript",
                            "paramType": "body",
                            "required": "true",
                            "name": "body",
                            "description": "The body to be executed.  "
                        }
                    ],
                    "notes": "<br><br>Executes the javascript code in the body on the server as the body of a function with no arguments. If you have a <em>return</em> statement then the return value you produce will be returned as content type <em>application/json</em>. If the parameter <em>returnAsJSON</em> is set to <em>true</em>, the result will be a JSON object describing the return value directly, otherwise a string produced by JSON.stringify will be returned. ",
                    "summary": "executes a program",
                    "httpMethod": "POST",
                    "examples": "",
                    "nickname": "executesAProgram"
                }
            ],
            "path": "/_admin/execute"
        }
    ]
}
