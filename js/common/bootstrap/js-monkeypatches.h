static string JS_common_bootstrap_monkeypatches = 
  "/*jslint indent: 2,\n"
  "         nomen: true,\n"
  "         maxlen: 100,\n"
  "         sloppy: true,\n"
  "         plusplus: true */\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief Monkeypatches to built-in prototypes\n"
  "///\n"
  "/// @file\n"
  "///\n"
  "/// DISCLAIMER\n"
  "///\n"
  "/// Copyright 2010-2012 triagens GmbH, Cologne, Germany\n"
  "///\n"
  "/// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
  "/// you may not use this file except in compliance with the License.\n"
  "/// You may obtain a copy of the License at\n"
  "///\n"
  "///     http://www.apache.org/licenses/LICENSE-2.0\n"
  "///\n"
  "/// Unless required by applicable law or agreed to in writing, software\n"
  "/// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
  "/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
  "/// See the License for the specific language governing permissions and\n"
  "/// limitations under the License.\n"
  "///\n"
  "/// Copyright holder is triAGENS GmbH, Cologne, Germany\n"
  "///\n"
  "/// @author Dr. Frank Celler, Lucas Dohmen\n"
  "/// @author Copyright 2011-2012, triAGENS GmbH, Cologne, Germany\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief remove last occurrence of element from an array\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "Object.defineProperty(Array.prototype, \"removeLastOccurrenceOf\", {\n"
  "  value: function (element) {\n"
  "    return this.splice(this.lastIndexOf(element), 1);\n"
  "  }\n"
  "});\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief return the union with another array\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "Object.defineProperty(Array.prototype, \"unite\", {\n"
  "  value: function (other_array) {\n"
  "    return other_array.concat(this.filter(function (element) {\n"
  "      return (other_array.indexOf(element) === -1);\n"
  "    }));\n"
  "  }\n"
  "});\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief return the intersection with another array\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "Object.defineProperty(Array.prototype, \"intersect\", {\n"
  "  value: function (other_array) {\n"
  "    return this.filter(function (element) {\n"
  "      return (other_array.indexOf(element) > -1);\n"
  "    });\n"
  "  }\n"
  "});\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief shallow copy properties\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "Object.defineProperty(Object.prototype, \"shallowCopy\", {\n"
  "  get: function () {\n"
  "    var that = this;\n"
  "\n"
  "    return this.propertyKeys.reduce(function (previous, element) {\n"
  "      previous[element] = that[element];\n"
  "      return previous;\n"
  "    }, {});\n"
  "  }\n"
  "});\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief property keys\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "Object.defineProperty(Object.prototype, \"propertyKeys\", {\n"
  "  get: function () {\n"
  "    return Object.keys(this).filter(function (element) {\n"
  "      return (element[0] !== '_' && element[0] !== '$');\n"
  "    });\n"
  "  }\n"
  "});\n"
;
