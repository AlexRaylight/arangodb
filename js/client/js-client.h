static string JS_client_client = 
  "////////////////////////////////////////////////////////////////////////////////////\n"
  "//\n"
  "// global variables\n"
  "//\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "var DEFAULT_QUERY_COLLECTION = \"query\";\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "//\n"
  "// Helper functions\n"
  "//\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "function isErrorResult (requestResult) {\n"
  "\n"
  "  if (requestResult == undefined) {    \n"
  "    requestResult = {\n"
  "      \"error\" : true,\n"
  "      \"code\"  : 0,\n"
  "      \"errorNum\" : 0,\n"
  "      \"errorMessage\" : \"Unknown error. Request result is empty\"\n"
  "    }    \n"
  "  }\n"
  "  \n"
  "  if (requestResult[\"error\"] != undefined && requestResult[\"error\"]) {    \n"
  "    var code     = requestResult[\"code\"];\n"
  "    var errorNum     = requestResult[\"errorNum\"];\n"
  "    var errorMessage = requestResult[\"errorMessage\"];\n"
  "\n"
  "    if ( typeof(COLOR_BRIGHT) != \"undefined\" ) {\n"
  "      internal.output(COLOR_BRIGHT);\n"
  "      internal.output(\"Error: \");\n"
  "      internal.output(COLOR_OUTPUT_RESET);\n"
  "    }\n"
  "    else  {\n"
  "      internal.output(\"Error: \");      \n"
  "    }\n"
  "\n"
  "    internal.output(\"[\"); \n"
  "    internal.output(code); \n"
  "    internal.output(\":\"); \n"
  "    internal.output(errorNum); \n"
  "    internal.output(\"] \"); \n"
  "    print(errorMessage);\n"
  "    \n"
  "    return true;\n"
  "  }  \n"
  "  return false;\n"
  "}\n"
  "\n"
  "function getHeadline(text) {\n"
  "  var x = parseInt((78 - text.length) / 2);\n"
  "  \n"
  "  var p = \"\";\n"
  "  for (var i = 0; i < x; ++i) {\n"
  "    p += \"-\";\n"
  "  }\n"
  "  \n"
  "  if ( typeof(COLOR_BRIGHT) != \"undefined\" ) {\n"
  "     return COLOR_BRIGHT + p + \" \" + text + \" \" + p + COLOR_OUTPUT_RESET + \"\\n\";\n"
  "  }\n"
  "  else {\n"
  "     return p + \" \" + text + \" \" + p + \"\\n\";\n"
  "  }\n"
  "}\n"
  "\n"
  "\n"
  "var HELP = \n"
  "getHeadline(\"Help\") +\n"
  "'Predefined objects:                                                 ' + \"\\n\" +\n"
  "'  avocado:                               AvocadoConnection          ' + \"\\n\" +\n"
  "'  db:                                    AvocadoDatabase            ' + \"\\n\" +\n"
  "'Example:                                                            ' + \"\\n\" +\n"
  "' > db._collections();                    list all collections       ' + \"\\n\" +\n"
  "' > db.<coll_name>.all();                 list all documents         ' + \"\\n\" +\n"
  "' > id = db.<coll_name>.save({ ... });    save a document            ' + \"\\n\" +\n"
  "' > db.<coll_name>.delete(<_id>);         delete a document          ' + \"\\n\" +\n"
  "' > db.<coll_name>.document(<_id>);       get a document             ' + \"\\n\" +\n"
  "' > help                                  show help pages            ' + \"\\n\" +\n"
  "' > helpQueries                           query help                 ' + \"\\n\" +\n"
  "' > exit                                                             ';\n"
  "\n"
  "var helpQueries = \n"
  "getHeadline(\"Simple queries help\") +\n"
  "'Create query template:                                              ' + \"\\n\" +\n"
  "' > qt1 = db.createQueryTemplate(\"select ...\");     simple query     ' + \"\\n\" +\n"
  "' > qt2 = db.createQueryTemplate(                   complex query    ' + \"\\n\" +\n"
  "'             {query:\"select...\",                                    ' + \"\\n\" +\n"
  "'              name:\"qname\",                                         ' + \"\\n\" +\n"
  "'              collection:\"q\"                                        ' + \"\\n\" +\n"
  "'              ... }                                                 ' + \"\\n\" +\n"
  "' > qt3 = db.getQueryTemplate(\"4334:2334\");         query by id      ' + \"\\n\" +\n"
  "' > qt1.update(\"select ...\");                       update           ' + \"\\n\" +\n"
  "' > qt1.delete(\"4334:2334\");                        delete           ' + \"\\n\" +\n"
  "'Create query instance:                                              ' + \"\\n\" +\n"
  "' > qi1 = qt1.getInstance();                        from tmplate     ' + \"\\n\" +\n"
  "' > qi2 = db.createQueryInstance(\"select...\");      without template ' + \"\\n\" +\n"
  "' > qi2.bind(\"key\", \"value\");                                        ' + \"\\n\" +\n"
  "'Execute query:                                                      ' + \"\\n\" +\n"
  "' > cu1 = qi1.execute();                            returns cursor   ' + \"\\n\" +\n"
  "'Get all elements:                                                   ' + \"\\n\" +\n"
  "' > el = cu1.elements();                                             ' + \"\\n\" +\n"
  "'or loop over all results:                                           ' + \"\\n\" +\n"
  "' > while (cu1.hasNext()) { print( cu1.next() ); }                   ';\n"
  "\n"
  "var helpAvocadoDatabase = \n"
  "getHeadline(\"AvocadoDatabase help\") +\n"
  "'AvocadoDatabase constructor:                                        ' + \"\\n\" +\n"
  "' > db2 = new AvocadoDatabase(connection);                           ' + \"\\n\" +\n"
  "'Functions:                                                          ' + \"\\n\" +\n"
  "'  _collections();                list all collections               ' + \"\\n\" +\n"
  "'                                 returns: list of AvocadoCollection ' + \"\\n\" +\n"
  "'  _collection(<name>);           get collection by name             ' + \"\\n\" +\n"
  "'                                 returns: AvocadoCollection         ' + \"\\n\" +\n"
  "'  createQueryTemplate(<data>);   create and return query template   ' + \"\\n\" +\n"
  "'                                 returns: AvocadoQueryTemplate      ' + \"\\n\" +\n"
  "'  getQueryTemplate(<id>);        get query template by id           ' + \"\\n\" +\n"
  "'                                 returns: dvocadoQueryTemplate      ' + \"\\n\" +\n"
  "'  createQueryInstance(<data>);   create and return query instance   ' + \"\\n\" +\n"
  "'                                 returns: AvocadoQueryInstance      ' + \"\\n\" +\n"
  "'  _help();                       this help                          ' + \"\\n\" +\n"
  "'Attributes:                                                         ' + \"\\n\" +\n"
  "'  <collection names>                                                ';\n"
  "\n"
  "var helpAvocadoCollection = \n"
  "getHeadline(\"AvocadoCollection help\") +\n"
  "'AvocadoCollection constructor:                                      ' + \"\\n\" +\n"
  "' > col = db.mycoll;                                                 ' + \"\\n\" +\n"
  "'Functions:                                                          ' + \"\\n\" +\n"
  "'  save(<data>);                   create document and return id     ' + \"\\n\" +\n"
  "'  document(<id>);                 get document by id                ' + \"\\n\" +\n"
  "'  update(<id>, <new data>);       over writes document by id        ' + \"\\n\" +\n"
  "'  delete(<id>);                   deletes document by id            ' + \"\\n\" +\n"
  "'  _help();                        this help                         ' + \"\\n\" +\n"
  "'Attributes:                                                         ' + \"\\n\" +\n"
  "'  _database                       database object                   ' + \"\\n\" +\n"
  "'  _id                             collection id                     ' + \"\\n\" +\n"
  "'  name                            collection name                   ' + \"\\n\" +\n"
  "'  status                          status id                         ' + \"\\n\" +\n"
  "'  figures                                                           ';\n"
  "\n"
  "var helpAvocadoQueryCursor = \n"
  "getHeadline(\"AvocadoQueryCursor help\") +\n"
  "'AvocadoQueryCursor constructor:                                     ' + \"\\n\" +\n"
  "' > cu1 = qi1.execute();                                             ' + \"\\n\" +\n"
  "'Functions:                                                          ' + \"\\n\" +\n"
  "'  hasMore();                            returns true if there       ' + \"\\n\" +\n"
  "'                                        are more results            ' + \"\\n\" +\n"
  "'  next();                               returns the next document   ' + \"\\n\" +\n"
  "'  elements();                           returns all documents       ' + \"\\n\" +\n"
  "'  _help();                              this help                   ' + \"\\n\" +\n"
  "'Attributes:                                                         ' + \"\\n\" +\n"
  "'  _database                             database object             ' + \"\\n\" +\n"
  "'Example:                                                            ' + \"\\n\" +\n"
  "' > qi2 = db.createQueryInstance(\"select a from colA a\");            ' + \"\\n\" +\n"
  "' > cu1 = qi2.execute();                                             ' + \"\\n\" +\n"
  "' > documents = cu1.elements();                                      ' + \"\\n\" +\n"
  "' > cu1 = qi2.execute();                                             ' + \"\\n\" +\n"
  "' > while (cu1.hasNext()) { print( cu1.next() ); }                   ';\n"
  "\n"
  "var helpAvocadoQueryInstance = \n"
  "getHeadline(\"AvocadoQueryInstance help\") +\n"
  "'AvocadoQueryInstance constructor:                                   ' + \"\\n\" +\n"
  "' > qi1 = qt1.getInstance();                                         ' + \"\\n\" +\n"
  "' > qi2 = db.createQueryInstance(\"select ....\");                     ' + \"\\n\" +\n"
  "'Functions:                                                          ' + \"\\n\" +\n"
  "'  bind(<key>, <value>);                 bind vars                   ' + \"\\n\" +\n"
  "'  setCount(true);                                                   ' + \"\\n\" +\n"
  "'  setMax(<max>);                                                    ' + \"\\n\" +\n"
  "'  execute();                            execute query and return    ' + \"\\n\" +\n"
  "'                                        query cursor                ' + \"\\n\" +\n"
  "'  _help();                              this help                   ' + \"\\n\" +\n"
  "'Attributes:                                                         ' + \"\\n\" +\n"
  "'  _database                             database object             ' + \"\\n\" +\n"
  "'  bindVars                              bind vars                   ' + \"\\n\" +\n"
  "'  doCount                               count results in server     ' + \"\\n\" +\n"
  "'  maxResults                            maximum number of results   ' + \"\\n\" +\n"
  "'  query                                 the query string            ' + \"\\n\" +\n"
  "'Example:                                                            ' + \"\\n\" +\n"
  "' > qi2 = db.createQueryInstance(\"select a from colA a               ' + \"\\n\" +\n"
  "'                             where a.x = @a@ and a.y = @b@\");       ' + \"\\n\" +\n"
  "' > qi2.bind(\"a\", \"hello\");                                          ' + \"\\n\" +\n"
  "' > qi2.bind(\"b\", \"world\");                                          ' + \"\\n\" +\n"
  "' > cu1 = qi1.execute();                                             ';\n"
  "\n"
  "var helpAvocadoQueryTemplate = \n"
  "getHeadline(\"AvocadoQueryTemplate help\") +\n"
  "'AvocadoQueryTemplate constructor:                                   ' + \"\\n\" +\n"
  "' > qt1 = db.createQueryTemplate(\"select ...\");     simple query     ' + \"\\n\" +\n"
  "' > qt2 = db.createQueryTemplate(                   complex query    ' + \"\\n\" +\n"
  "'             {query:\"select...\",                                    ' + \"\\n\" +\n"
  "'              name:\"qname\",                                         ' + \"\\n\" +\n"
  "'              collection:\"q\"                                        ' + \"\\n\" +\n"
  "'              ... }                                                 ' + \"\\n\" +\n"
  "'Functions:                                                          ' + \"\\n\" +\n"
  "'  update(<new data>);                  update query template        ' + \"\\n\" +\n"
  "'  delete(<id>);                        delete query template by id  ' + \"\\n\" +\n"
  "'  getInstance();                       get a query instance         ' + \"\\n\" +\n"
  "'                                       returns: AvocadoQueryInstance' + \"\\n\" +\n"
  "'  _help();                             this help                    ' + \"\\n\" +\n"
  "'Attributes:                                                         ' + \"\\n\" +\n"
  "'  _database                            database object              ' + \"\\n\" +\n"
  "'  _id                                  template id                  ' + \"\\n\" +\n"
  "'  name                                 collection name              ' + \"\\n\" +\n"
  "'Example:                                                            ' + \"\\n\" +\n"
  "' > qt1 = db.getQueryTemplate(\"4334:2334\");                          ' + \"\\n\" +\n"
  "' > qt1.update(\"select a from collA a\");                             ' + \"\\n\" +\n"
  "' > qi1 = qt1.getInstance();                                         ' + \"\\n\" +\n"
  "' > qt1.delete(\"4334:2334\");                                         ';\n"
  "\n"
  "function help () {\n"
  "  print(HELP);\n"
  "  print(helpQueries);\n"
  "  print(helpAvocadoDatabase);\n"
  "  print(helpAvocadoCollection);\n"
  "  print(helpAvocadoQueryTemplate);\n"
  "  print(helpAvocadoQueryInstance);\n"
  "  print(helpAvocadoQueryCursor);\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "//\n"
  "// AvocadoCollection\n"
  "//\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "function AvocadoCollection (database, data) {\n"
  "  this._database = database;\n"
  "\n"
  "  if (typeof data === \"string\") {\n"
  "    this.name = data;\n"
  "  }\n"
  "  else {\n"
  "    for (var i in data) {\n"
  "      this[i] = data[i];\n"
  "    }\n"
  "  }\n"
  "}\n"
  "\n"
  "AvocadoCollection.prototype.all = function () {\n"
  "  var str = this._database._connection.get(\"/_api/documents/\" + encodeURIComponent(this.name));\n"
  "\n"
  "  var requestResult = undefined;\n"
  "  if (str != undefined) {\n"
  "    requestResult = JSON.parse(str);\n"
  "  }\n"
  "    \n"
  "  if (isErrorResult(requestResult)) {\n"
  "    return undefined;\n"
  "  }\n"
  "\n"
  "  return requestResult[\"documents\"];    \n"
  "}\n"
  "\n"
  "AvocadoCollection.prototype.document = function (id) {\n"
  "  var str = this._database._connection.get(\"/_api/document/\" + encodeURIComponent(this.name) + \"/\" + encodeURIComponent(id));\n"
  "  \n"
  "  var requestResult = undefined;\n"
  "  if (str != undefined) {\n"
  "    requestResult = JSON.parse(str);\n"
  "  }\n"
  "\n"
  "  if (isErrorResult(requestResult)) {\n"
  "    return undefined;\n"
  "  }\n"
  "\n"
  "  return requestResult[\"document\"];\n"
  "}\n"
  "\n"
  "AvocadoCollection.prototype.save = function (data) {    \n"
  "  var str = this._database._connection.post(\"/_api/document/\" + encodeURIComponent(this.name), JSON.stringify(data));\n"
  "  \n"
  "  var requestResult = undefined;\n"
  "  if (str != undefined) {\n"
  "    requestResult = JSON.parse(str);\n"
  "  }\n"
  "  \n"
  "  if (isErrorResult(requestResult)) {\n"
  "    return undefined;\n"
  "  }\n"
  "\n"
  "  return requestResult[\"_id\"];\n"
  "}\n"
  "\n"
  "AvocadoCollection.prototype.delete = function (id) {    \n"
  "  var str = this._database._connection.delete(\"/_api/document/\" + encodeURIComponent(this.name) + \"/\" + encodeURIComponent(id));\n"
  "  \n"
  "  var requestResult = undefined;\n"
  "  if (str != undefined) {\n"
  "    requestResult = JSON.parse(str);\n"
  "  }\n"
  "\n"
  "  return !isErrorResult(requestResult);\n"
  "}\n"
  "\n"
  "AvocadoCollection.prototype.update = function (id, data) {    \n"
  "  var str = this._database._connection.put(\"/_api/document/\" + encodeURIComponent(this.name) + \"/\" + encodeURIComponent(id), JSON.stringify(data));\n"
  "  \n"
  "  var requestResult = undefined;\n"
  "  if (str != undefined) {\n"
  "    requestResult = JSON.parse(str);\n"
  "  }\n"
  "\n"
  "  return !isErrorResult(requestResult);\n"
  "}\n"
  "\n"
  "AvocadoCollection.prototype._help = function () {  \n"
  "  print(helpAvocadoCollection);\n"
  "}\n"
  "\n"
  "AvocadoCollection.prototype.toString = function () {  \n"
  "  result  = \"[object AvocadoCollection]\";\n"
  "  return result;\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "//\n"
  "// AvocadoQueryCursor\n"
  "//\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "function AvocadoQueryCursor (database, data) {\n"
  "  this._database = database;\n"
  "  this.data = data;\n"
  "  this._hasNext = false;\n"
  "  this._hasMore = false;\n"
  "  this._pos = 0;\n"
  "  this._count = 0;\n"
  "  this._total = 0;\n"
  "  \n"
  "  if (data.result != undefined) {\n"
  "    this._count = data.result.length;\n"
  "    \n"
  "    if (this._pos < this._count) {\n"
  "      this._hasNext = true;\n"
  "    }\n"
  "    \n"
  "    if (data.hasMore != undefined && data.hasMore) {\n"
  "      this._hasMore = true;\n"
  "    }    \n"
  "  }\n"
  "}\n"
  "\n"
  "AvocadoQueryCursor.prototype.hasNext = function () {\n"
  "  return this._hasNext;\n"
  "}\n"
  "\n"
  "AvocadoQueryCursor.prototype.next = function () {\n"
  "  if (!this._hasNext) {\n"
  "      throw \"No more results\";\n"
  "  }\n"
  "  \n"
  "  var result = this.data.result[this._pos];\n"
  "  this._pos++;\n"
  "    \n"
  "  if (this._pos == this._count) {\n"
  "    // reached last result\n"
  "    \n"
  "    this._hasNext = false;\n"
  "    this._pos = 0;\n"
  "    \n"
  "    if (this._hasMore) {\n"
  "      this._hasMore = false;\n"
  "      \n"
  "      // load more results      \n"
  "      var str = this._database._connection.put(\"/_api/cursor/\"+ encodeURIComponent(this.data._id),  \"\");\n"
  "\n"
  "      var requestResult = undefined;\n"
  "      if (str != undefined) {\n"
  "        requestResult = JSON.parse(str);\n"
  "      }\n"
  "    \n"
  "      if (isErrorResult(requestResult)) {\n"
  "        return undefined;\n"
  "      }\n"
  "      \n"
  "      this.data = requestResult;\n"
  "      this._count = requestResult.result.length;\n"
  "    \n"
  "      if (this._pos < this._count) {\n"
  "        this._hasNext = true;\n"
  "      }\n"
  "    \n"
  "      if (requestResult.hasMore != undefined && requestResult.hasMore) {\n"
  "        this._hasMore = true;\n"
  "      }                \n"
  "    }    \n"
  "  }\n"
  "    \n"
  "  return result;\n"
  "}\n"
  "\n"
  "AvocadoQueryCursor.prototype.elements = function () {  \n"
  "  var result = [];\n"
  "  \n"
  "  while (this.hasNext()) { \n"
  "    result.push( this.next() ); \n"
  "  }\n"
  "  \n"
  "  return result;\n"
  "}\n"
  "\n"
  "AvocadoQueryCursor.prototype._help = function () {\n"
  "  print(helpAvocadoQueryCursor);\n"
  "}\n"
  "\n"
  "AvocadoQueryCursor.prototype.toString = function () {  \n"
  "  result  = \"[object AvocadoQueryCursor]\";\n"
  "  return result;\n"
  "}\n"
  "\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "//\n"
  "// AvocadoQueryInstance\n"
  "//\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "function AvocadoQueryInstance (database, data) {\n"
  "  this._database = database;\n"
  "  this.doCount = false;\n"
  "  this.maxResults = null;\n"
  "  this.bindVars = {};\n"
  "  \n"
  "  if (typeof data === \"string\") {\n"
  "    this.query = data;\n"
  "  }\n"
  "  else if (data instanceof AvocadoQueryTemplate) {\n"
  "    if (data.document.query == undefined) {\n"
  "      data.load();\n"
  "      if (data.document.query == undefined) {\n"
  "        throw \"could not load query string\";\n"
  "      }\n"
  "    }\n"
  "    this.query = data.document.query;\n"
  "  }   \n"
  "}\n"
  "\n"
  "AvocadoQueryInstance.prototype.bind = function (key, value) {\n"
  "  this.bindVars[key] = value;\n"
  "}\n"
  "\n"
  "AvocadoQueryInstance.prototype.setCount = function (bool) {\n"
  "  if (bool) {\n"
  "    this.doCount = true;\n"
  "  }\n"
  "  else {\n"
  "    this.doCount = false;    \n"
  "  }\n"
  "}\n"
  "\n"
  "AvocadoQueryInstance.prototype.setMax = function (value) {\n"
  "  if (parseInt(value) > 0) {\n"
  "    this.maxResults = parseInt(value);\n"
  "  }\n"
  "}\n"
  "\n"
  "AvocadoQueryInstance.prototype.execute = function () {\n"
  "  var body = {\n"
  "    query : this.query,\n"
  "    count : this.doCount,\n"
  "    bindVars : this.bindVars\n"
  "  }\n"
  "\n"
  "  if (this.maxResults) {\n"
  "    body[\"maxResults\"] = this.maxResults;\n"
  "  }\n"
  "  \n"
  "  var str = this._database._connection.post(\"/_api/cursor\", JSON.stringify(body));\n"
  "\n"
  "  var requestResult = undefined;\n"
  "  if (str != undefined) {\n"
  "    requestResult = JSON.parse(str);\n"
  "  }\n"
  "    \n"
  "  if (isErrorResult(requestResult)) {\n"
  "    return undefined;\n"
  "  }\n"
  "\n"
  "  return new AvocadoQueryCursor(this._database, requestResult);\n"
  "}\n"
  "\n"
  "AvocadoQueryInstance.prototype._help = function () {\n"
  "  print(helpAvocadoQueryInstance);\n"
  "}\n"
  "\n"
  "AvocadoQueryInstance.prototype.toString = function () {  \n"
  "  result  = \"[object AvocadoQueryInstance]\";\n"
  "  return result;\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "//\n"
  "// AvocadoQueryTemplate\n"
  "//\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "function AvocadoQueryTemplate (database, data) {\n"
  "  this._database = database;\n"
  "\n"
  "  this.document = {\n"
  "    collection : DEFAULT_QUERY_COLLECTION\n"
  "  };\n"
  "  \n"
  "  if (typeof data === \"string\") {\n"
  "    this.document.query = data;\n"
  "  }\n"
  "  else {    \n"
  "    if (data[\"query\"] != undefined) {\n"
  "      this.document.query = data[\"query\"];\n"
  "    }\n"
  "\n"
  "    if (data[\"_id\"] != undefined) {\n"
  "      this.document._id = data[\"_id\"];\n"
  "      this._id = this.document._id;\n"
  "    }\n"
  "\n"
  "    if (data[\"collection\"] != undefined) {\n"
  "      this.document.collection = data[\"collection\"];\n"
  "    }    \n"
  "\n"
  "    if (data[\"name\"] != undefined) {\n"
  "      this.document.name = data[\"name\"];\n"
  "    }    \n"
  "\n"
  "    // TODO additional attributes\n"
  "  }\n"
  "  \n"
  "  if (this.document.query == undefined && this.document._id == undefined) {\n"
  "    throw \"AvocadoQueryTemplate needs query or _id.\";\n"
  "  }\n"
  "}\n"
  "\n"
  "AvocadoQueryTemplate.prototype.getInstance = function () {\n"
  "  if (this.document._id == undefined) {\n"
  "    throw \"no _id found\";    \n"
  "  }\n"
  "  \n"
  "  return new AvocadoQueryInstance(this._database, this);\n"
  "}\n"
  "\n"
  "AvocadoQueryTemplate.prototype.update = function (data) {\n"
  "  if (this.document._id == undefined) {\n"
  "    throw \"no _id found\";    \n"
  "  }\n"
  "  \n"
  "  if (typeof data === \"string\") {\n"
  "    this.document.query = data;\n"
  "  }\n"
  "  else {\n"
  "    // update query or name    \n"
  "    if (data[\"query\"] != undefined) {\n"
  "      this.document.query = data[\"query\"];\n"
  "    }\n"
  "\n"
  "    if (data[\"name\"] != undefined) {\n"
  "      this.document.name = data[\"name\"];\n"
  "    }    \n"
  "\n"
  "    // TODO additional attributes\n"
  "  }\n"
  "  \n"
  "  var queryCollection = new AvocadoCollection(this._database, this.document.collection);\n"
  "  if (queryCollection.update(this.document._id, this.document)) {\n"
  "    return true;\n"
  "  }\n"
  "  \n"
  "  return false;\n"
  "}\n"
  "\n"
  "AvocadoQueryTemplate.prototype.delete = function () {\n"
  "  if (this.document._id == undefined) {\n"
  "    throw \"no _id found\";    \n"
  "  }\n"
  "\n"
  "  var queryCollection = new AvocadoCollection(this._database, this.document.collection);\n"
  "  if (queryCollection.delete(this.document._id)) {\n"
  "    this.document = {};\n"
  "    return true;\n"
  "  }\n"
  "  \n"
  "  return false;\n"
  "}\n"
  "\n"
  "AvocadoQueryTemplate.prototype.load = function () {\n"
  "  if (this.document._id == undefined) {\n"
  "    throw \"AvocadoQueryTemplate needs _id for loading\";    \n"
  "  }\n"
  "\n"
  "  var coll = this.document.collection;\n"
  "  var queryCollection = new AvocadoCollection(this._database, coll);\n"
  "  var requestResult = queryCollection.document(this.document._id);\n"
  "    \n"
  "  if (requestResult != undefined) {\n"
  "\n"
  "    if (requestResult.query == undefined) {\n"
  "      throw \"document is not a query\";    \n"
  "    }\n"
  "    // loaded\n"
  "    this.document = requestResult;\n"
  "    \n"
  "    if (this.document.collection == undefined) {\n"
  "      this.document.collection = coll;\n"
  "    }\n"
  "    \n"
  "    return true;\n"
  "  }\n"
  "  return false;  \n"
  "\n"
  "}\n"
  "\n"
  "AvocadoQueryTemplate.prototype.save = function () {\n"
  "  if (this.document._id != undefined) {\n"
  "    throw \"use update to save changes\";    \n"
  "  }\n"
  "  \n"
  "  var queryCollection = new AvocadoCollection(this._database, this.document.collection);\n"
  "  var requestResult = queryCollection.save(this.document);\n"
  "    \n"
  "  if (requestResult != undefined) {\n"
  "    // document saved\n"
  "    this.document._id = requestResult;\n"
  "    this._id = this.document._id;\n"
  "    return true;\n"
  "  }\n"
  "  \n"
  "  return false;  \n"
  "}\n"
  "\n"
  "AvocadoQueryTemplate.prototype._help = function () {\n"
  "  print(helpAvocadoQueryTemplate);\n"
  "}\n"
  "\n"
  "AvocadoQueryTemplate.prototype.toString = function () {  \n"
  "  result  = \"[object AvocadoQueryTemplate]\";\n"
  "  return result;\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "//\n"
  "// AvocadoDatabase\n"
  "//\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "function AvocadoDatabase (connection) {\n"
  "  this._connection = connection;\n"
  "}\n"
  "\n"
  "AvocadoDatabase.prototype._collections = function () {\n"
  "  var str = this._connection.get(\"/_api/collections\");\n"
  "  \n"
  "  var requestResult = undefined;\n"
  "  if (str != undefined) {\n"
  "    requestResult = JSON.parse(str);\n"
  "  }\n"
  "  \n"
  "  if (isErrorResult(requestResult)) {\n"
  "    return undefined;\n"
  "  }\n"
  "\n"
  "  if (requestResult[\"collections\"] != undefined) {\n"
  "    \n"
  "    // add all collentions to object\n"
  "    for (var i in requestResult[\"collections\"]) {\n"
  "      this[i] = new AvocadoCollection(this, requestResult[\"collections\"][i]);\n"
  "    }\n"
  "      \n"
  "    return requestResult[\"collections\"];\n"
  "  }\n"
  "  \n"
  "  return undefined;\n"
  "}\n"
  "\n"
  "AvocadoDatabase.prototype._collection = function (id) {\n"
  "  var str = this._connection.get(\"/_api/collection/\" + encodeURIComponent(id));\n"
  "  \n"
  "  var requestResult = undefined;\n"
  "  if (str != undefined) {\n"
  "    requestResult = JSON.parse(str);\n"
  "  }\n"
  "  \n"
  "  if (isErrorResult(requestResult)) {\n"
  "    return undefined;\n"
  "  }\n"
  "\n"
  "  if (requestResult[\"name\"] != undefined) {\n"
  "    \n"
  "    this[requestResult[\"name\"]] = new AvocadoCollection(this, requestResult);\n"
  "      \n"
  "    return requestResult;\n"
  "  }\n"
  "  \n"
  "  return undefined;\n"
  "}\n"
  "\n"
  "AvocadoDatabase.prototype.createQueryTemplate = function (queryData) {  \n"
  "  var qt = new AvocadoQueryTemplate(this, queryData);\n"
  "  if (qt.save()) {\n"
  "    return qt;\n"
  "  }\n"
  "  \n"
  "  return undefined;\n"
  "}\n"
  "\n"
  "AvocadoDatabase.prototype.getQueryTemplate = function (id) {  \n"
  "  var qt = new AvocadoQueryTemplate(this, {\"_id\" : id});\n"
  "  if (qt.load()) {\n"
  "    return qt;\n"
  "  }\n"
  "  \n"
  "  return undefined;\n"
  "}\n"
  "\n"
  "AvocadoDatabase.prototype.createQueryInstance = function (queryData) {  \n"
  "  return new AvocadoQueryInstance(this, queryData);\n"
  "}\n"
  "\n"
  "AvocadoDatabase.prototype._help = function () {  \n"
  "  print(helpAvocadoDatabase);\n"
  "}\n"
  "\n"
  "AvocadoDatabase.prototype.toString = function () {  \n"
  "  result  = \"[object AvocadoDatabase]\";\n"
  "  return result;\n"
  "}\n"
  "\n"
  "function printPlain(data) {\n"
  "  var p = PRETTY_PRINT;\n"
  "  PRETTY_PRINT = false;\n"
  "  var c;\n"
  "  if (typeof(COLOR_OUTPUT) != undefined) {\n"
  "    c = COLOR_OUTPUT;\n"
  "    COLOR_OUTPUT = undefined;\n"
  "  }\n"
  "  \n"
  "  try {\n"
  "   print(data);\n"
  "   PRETTY_PRINT = p;\n"
  "    if (typeof(c) != undefined) {\n"
  "      COLOR_OUTPUT = c;\n"
  "    }   \n"
  "  }\n"
  "  catch (e) {\n"
  "   PRETTY_PRINT = p;\n"
  "    if (typeof(c) != undefined) {\n"
  "      COLOR_OUTPUT = c;\n"
  "    }   \n"
  "    throw e.message;    \n"
  "  }  \n"
  "}\n"
  "\n"
  "try {\n"
  "\n"
  "  //\n"
  "  // default database\n"
  "  // \n"
  "  db = new AvocadoDatabase(avocado);\n"
  "\n"
  "  //\n"
  "  // load collection data\n"
  "  // \n"
  "  db._collections();\n"
  "\n"
  "  print(HELP);\n"
  "}\n"
  "catch (err) {\n"
  "  print(COLOR_RED + \"connection failure: \" + err + COLOR_BLACK);\n"
  "}\n"
;
