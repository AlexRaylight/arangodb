static string JS_server_aql = 
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief Avocado Query Language\n"
  "///\n"
  "/// @file\n"
  "///\n"
  "/// DISCLAIMER\n"
  "///\n"
  "/// Copyright 2010-2012 triagens GmbH, Cologne, Germany\n"
  "///\n"
  "/// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
  "/// you may not use this file except in compliance with the License.\n"
  "/// You may obtain a copy of the License at\n"
  "///\n"
  "///     http://www.apache.org/licenses/LICENSE-2.0\n"
  "///\n"
  "/// Unless required by applicable law or agreed to in writing, software\n"
  "/// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
  "/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
  "/// See the License for the specific language governing permissions and\n"
  "/// limitations under the License.\n"
  "///\n"
  "/// Copyright holder is triAGENS GmbH, Cologne, Germany\n"
  "///\n"
  "/// @author Dr. Frank Celler\n"
  "/// @author Copyright 2012, triAGENS GmbH, Cologne, Germany\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @page FluentInterface Fluent Interface\n"
  "///\n"
  "/// The fluent interface for queries allows you to build simple queries\n"
  "/// involving just one collection in a very natural way.\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                                      FLUENT QUERY\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                      constructors and destructors\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @addtogroup AQL\n"
  "/// @{\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief abstract fluent query constructor\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "function AvocadoFluentQuery2 () {\n"
  "  this._execution = null;\n"
  "\n"
  "  this._skip = 0;\n"
  "  this._limit = null;\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief fluent query constructor for abstract representation\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "function AvocadoFluentQueryAbstract (collection, query) {\n"
  "  this._collection = collection;\n"
  "\n"
  "  this._query = query;\n"
  "  this._current = 0;\n"
  "}\n"
  "\n"
  "AvocadoFluentQueryAbstract.prototype = new AvocadoFluentQuery2();\n"
  "AvocadoFluentQueryAbstract.prototype.constructor = AvocadoFluentQueryAbstract;\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief fluent query constructor for array representation\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "function AvocadoFluentQueryArray (collection, documents) {\n"
  "  this._collection = collection;\n"
  "\n"
  "  this._documents = documents;\n"
  "  this._current = 0;\n"
  "}\n"
  "\n"
  "AvocadoFluentQueryArray.prototype = new AvocadoFluentQuery2();\n"
  "AvocadoFluentQueryArray.prototype.constructor = AvocadoFluentQueryArray;\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief fluent query constructor for internal representation\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "function AvocadoFluentQueryInternal (collection) {\n"
  "  this._collection = collection;\n"
  "\n"
  "  this._query = null;\n"
  "\n"
  "  this._select = null;\n"
  "  this._joins = null;\n"
  "  this._where = null;\n"
  "}\n"
  "\n"
  "AvocadoFluentQueryInternal.prototype = new AvocadoFluentQuery2();\n"
  "AvocadoFluentQueryInternal.prototype.constructor = AvocadoFluentQueryInternal;\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @}\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                                      FLUENT QUERY\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                                  public functions\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @addtogroup AQL\n"
  "/// @{\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief looks up a document\n"
  "///\n"
  "/// @FUN{document(@FA{document-identifier})}\n"
  "///\n"
  "/// The @FN{document} operator finds a document given it's identifier.  It\n"
  "/// returns the empty result set or a result set containing the document with\n"
  "/// document identifier @FA{document-identifier}.\n"
  "///\n"
  "/// @verbinclude fluent54\n"
  "///\n"
  "/// The corresponding AQL query would be:\n"
  "///\n"
  "/// @verbinclude fluent54-aql\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQuery2.prototype.document = function (id) {\n"
  "  var copy;\n"
  "  var doc;\n"
  "\n"
  "  if (this._execution != null) {\n"
  "    throw \"query is already executing\";\n"
  "  }\n"
  "\n"
  "  copy = this.copyQuery();\n"
  "\n"
  "  // try to find a document\n"
  "  while (copy.hasNext()) {\n"
  "    doc = copy.next();\n"
  "\n"
  "    if (doc._id == id) {\n"
  "      return new AvocadoFluentQueryArray(this._collection, [ doc ]);\n"
  "    }\n"
  "  }\n"
  "\n"
  "  // nothing found\n"
  "  return new AvocadoFluentQueryArray(this._collection, []);\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief limits an existing query\n"
  "///\n"
  "/// @FUN{limit(@FA{number})}\n"
  "///\n"
  "/// Limits a result to the first @FA{number} documents. Specifying a limit of\n"
  "/// @CODE{0} returns no documents at all. If you do not need a limit, just do\n"
  "/// not add the limit operator. If you specifiy a negtive limit of @CODE{-n},\n"
  "/// this will return the last @CODE{n} documents instead.\n"
  "///\n"
  "/// @verbinclude fluent30\n"
  "///\n"
  "/// The corresponding AQL queries would be:\n"
  "///\n"
  "/// @verbinclude fluent30-aql\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQuery2.prototype.limit = function (limit) {\n"
  "  var copy;\n"
  "\n"
  "  if (this._execution != null) {\n"
  "    throw \"query is already executing\";\n"
  "  }\n"
  "\n"
  "  if (limit == 0) {\n"
  "    return new AvocadoFluentQueryArray(this._collection, []);\n"
  "  }\n"
  "\n"
  "  copy = this.copyQuery();\n"
  "\n"
  "  if (limit == null || copy._limit == 0) {\n"
  "    return copy;\n"
  "  }\n"
  "\n"
  "  if (copy._limit == null) {\n"
  "    copy._limit = limit;\n"
  "  }\n"
  "  else if (0 < limit) {\n"
  "    if (0 < copy._limit && limit < copy._limit) {\n"
  "      copy._limit = limit;\n"
  "    }\n"
  "    else if (copy._limit < 0) {\n"
  "      copy = new AvocadoFluentQueryArray(copy._collection, copy.toArray());\n"
  "\n"
  "      copy._limit = limit;\n"
  "    }\n"
  "  }\n"
  "  else {\n"
  "    if (copy._limit < 0 && copy._limit < limit) {\n"
  "      copy._limit = limit;\n"
  "    }\n"
  "    else if (0 < copy._limit) {\n"
  "      copy = new AvocadoFluentQueryArray(copy._collection, copy.toArray());\n"
  "\n"
  "      copy._limit = limit;\n"
  "    }\n"
  "  }\n"
  "\n"
  "  return copy;\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief skips an existing query\n"
  "///\n"
  "/// @FUN{skip(@FA{number})}\n"
  "///\n"
  "/// Skips the first @FA{number} documents.\n"
  "///\n"
  "/// @verbinclude fluent31\n"
  "///\n"
  "/// The corresponding AQL queries would be:\n"
  "///\n"
  "/// @verbinclude fluent31-aql\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQuery2.prototype.skip = function (skip) {\n"
  "  var copy;\n"
  "\n"
  "  if (skip == null) {\n"
  "    skip = 0;\n"
  "  }\n"
  "\n"
  "  if (skip < 0) {\n"
  "    throw \"skip must be non-negative\";\n"
  "  }\n"
  "\n"
  "  if (this._execution != null) {\n"
  "    throw \"query is already executing\";\n"
  "  }\n"
  "\n"
  "  copy = this.copyQuery();\n"
  "\n"
  "  if (skip != 0) {\n"
  "    if (copy._limit == null) {\n"
  "      copy._skip = copy._skip + skip;\n"
  "    }\n"
  "    else {\n"
  "      copy = new AvocadoFluentQueryAbstract(copy._collection, copy);\n"
  "\n"
  "      copy._skip = skip;\n"
  "    }\n"
  "  }\n"
  "\n"
  "  return copy;\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief converts into an array\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQuery2.prototype.toArray = function () {\n"
  "  var cursor;\n"
  "  var result;\n"
  "\n"
  "  if (this._execution != null) {\n"
  "    throw \"query is already executing\";\n"
  "  }\n"
  "\n"
  "  result = [];\n"
  "\n"
  "  while (this.hasNext()) {\n"
  "    result.push(this.next());\n"
  "  }\n"
  "\n"
  "  return result;\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief returns all elements\n"
  "///\n"
  "/// @FUN{all()}\n"
  "///\n"
  "/// Selects all documents of a collection.\n"
  "///\n"
  "/// @verbinclude fluent23\n"
  "///\n"
  "/// The corresponding AQL query would be:\n"
  "///\n"
  "/// @verbinclude fluent23-aql\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQuery2.prototype.all = function () {\n"
  "  if (this._execution != null) {\n"
  "    throw \"query is already executing\";\n"
  "  }\n"
  "\n"
  "  return this.copyQuery();\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @}\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                           ABSTRACT REPRESENTATION\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                                 private functions\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @addtogroup AQL\n"
  "/// @{\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief copies an abstract fluent query\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryAbstract.prototype.copyQuery = function () {\n"
  "  var copy;\n"
  "\n"
  "  copy = new AvocadoFluentQueryAbstract(this._collection, this._query.copyQuery());\n"
  "\n"
  "  copy._skip = this._skip;\n"
  "  copy._limit = this._limit;\n"
  "\n"
  "  return copy;\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief executes an abstract fluent query\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryAbstract.prototype.execute = function () {\n"
  "  if (this._execution == null) {\n"
  "    if (this._limit < 0) {\n"
  "      throw \"limit must be non-negative\";\n"
  "    }\n"
  "\n"
  "    this._execution = true;\n"
  "\n"
  "    if (0 < this._skip) {\n"
  "      for (var i = 0;  i < this._skip && this._query.hasNext();  ++i) {\n"
  "        this._query.useNext();\n"
  "      }\n"
  "    }\n"
  "\n"
  "    this._current = 0;\n"
  "  }\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @}\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                                  public functions\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @addtogroup AQL\n"
  "/// @{\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief checks if the cursor is exhausted\n"
  "///\n"
  "/// @FUN{hasNext()}\n"
  "///\n"
  "/// The @FN{hasNext} operator returns @LIT{true}, if the cursor still has\n"
  "/// documents.  In this case the next document can be accessed using the\n"
  "/// @FN{next} operator, which will advance the cursor.\n"
  "///\n"
  "/// @verbinclude fluent3\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryAbstract.prototype.hasNext = function () {\n"
  "  this.execute();\n"
  "\n"
  "  if (this._limit != null && this._limit <= this._current) {\n"
  "    return false;\n"
  "  }\n"
  "\n"
  "  if (! this._query.hasNext()) {\n"
  "    this._limit = 0;\n"
  "    return false;\n"
  "  }\n"
  "\n"
  "  return true;\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief returns the next result document\n"
  "///\n"
  "/// @FUN{next()}\n"
  "///\n"
  "/// If the @FN{hasNext} operator returns @LIT{true}, if the cursor still has\n"
  "/// documents.  In this case the next document can be accessed using the @FN{next}\n"
  "/// operator, which will advance the cursor.\n"
  "///\n"
  "/// @verbinclude fluent28\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryAbstract.prototype.next = function() {\n"
  "  this.execute();\n"
  "\n"
  "  if (this._limit != null) {\n"
  "    if (this._limit <= this._current) {\n"
  "      return false;\n"
  "    }\n"
  "\n"
  "    ++this._limit;\n"
  "  }\n"
  "\n"
  "  return this._query.next();\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief returns the next result document\n"
  "///\n"
  "/// @FUN{nextRef()}\n"
  "///\n"
  "/// If the @FN{hasNext} operator returns @LIT{true}, if the cursor still has\n"
  "/// documents.  In this case the next document reference can be\n"
  "/// accessed using the @FN{nextRef} operator, which will advance the\n"
  "/// cursor.\n"
  "///\n"
  "/// @verbinclude fluent51\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryAbstract.prototype.nextRef = function() {\n"
  "  this.execute();\n"
  "\n"
  "  if (this._limit != null) {\n"
  "    if (this._limit <= this._current) {\n"
  "      return false;\n"
  "    }\n"
  "\n"
  "    ++this._limit;\n"
  "  }\n"
  "\n"
  "  return this._query.nextRef();\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief uses the next document\n"
  "///\n"
  "/// @FUN{useNext()}\n"
  "///\n"
  "/// If the @FN{hasNext} operator returns @LIT{true}, then the cursor still has\n"
  "/// documents.  In this case the next document can be skipped using the\n"
  "/// @FN{useNext} operator, which will advance the cursor and return @LIT{true}.\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryAbstract.prototype.useNext = function() {\n"
  "  this.execute();\n"
  "\n"
  "  if (this._limit != null) {\n"
  "    if (this._limit <= this._current) {\n"
  "      return;\n"
  "    }\n"
  "\n"
  "    ++this._limit;\n"
  "  }\n"
  "\n"
  "  this._query.useNext();\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @}\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                              ARRAY REPRESENTATION\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                                 private functions\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @addtogroup AQL\n"
  "/// @{\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief copies an array fluent query\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryArray.prototype.copyQuery = function() {\n"
  "  var copy;\n"
  "\n"
  "  copy = new AvocadoFluentQueryArray(this._collection, this._documents);\n"
  "\n"
  "  copy._skip = this._skip;\n"
  "  copy._limit = this._limit;\n"
  "\n"
  "  return copy;\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief executes an array fluent query\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryArray.prototype.execute = function () {\n"
  "  if (this._execution == null) {\n"
  "    this._execution = true;\n"
  "\n"
  "    if (this._skip == null || this._skip <= 0) {\n"
  "      this._skip = 0;\n"
  "    }\n"
  "\n"
  "    if (this._skip != 0 && this._limit == null) {\n"
  "      this._current = this._skip;\n"
  "    }\n"
  "    else if (this._limit != null) {\n"
  "      var documents;\n"
  "      var start;\n"
  "      var end;\n"
  "\n"
  "      if (0 == this._limit) {\n"
  "        start = 0;\n"
  "        end = 0;\n"
  "      }\n"
  "      else if (0 < this._limit) {\n"
  "        start = this._skip;\n"
  "        end = this._skip + this._limit;\n"
  "      }\n"
  "      else {\n"
  "        start = this._documents.length + this._limit - this._skip;\n"
  "        end = this._documents.length - this._skip;\n"
  "      }\n"
  "\n"
  "      if (start < 0) {\n"
  "        start = 0;\n"
  "      }\n"
  "\n"
  "      if (this._documents.length < end) {\n"
  "        end = this._documents.length;\n"
  "      }\n"
  "\n"
  "      documents = [];\n"
  "\n"
  "      for (var i = start;  i < end;  ++i) {\n"
  "        documents.push(this._documents[i]);\n"
  "      }\n"
  "\n"
  "      this._documents = documents;\n"
  "      this._skip = 0;\n"
  "      this._limit = null;\n"
  "    }\n"
  "  }\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @}\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                                  public functions\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @addtogroup AQL\n"
  "/// @{\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief checks if the cursor is exhausted\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryArray.prototype.hasNext = function () {\n"
  "  this.execute();\n"
  "\n"
  "  return this._current < this._documents.length;\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief returns the next result document\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryArray.prototype.next = function() {\n"
  "  this.execute();\n"
  "\n"
  "  if (this._current < this._documents.length) {\n"
  "    return this._documents[this._current++];\n"
  "  }\n"
  "  else {\n"
  "    return undefined;\n"
  "  }\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief returns the next result document\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryArray.prototype.nextRef = function() {\n"
  "  this.execute();\n"
  "\n"
  "  if (this._current < this._documents.length) {\n"
  "    return this._documents[this._current++]._id;\n"
  "  }\n"
  "  else {\n"
  "    return undefined;\n"
  "  }\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief uses the next document\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryArray.prototype.useNext = function() {\n"
  "  this.execute();\n"
  "\n"
  "  if (this._current < this._documents.length) {\n"
  "    this._current++;\n"
  "  }\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @}\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                           INTERNAL REPRESENTATION\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                                 private functions\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @addtogroup AQL\n"
  "/// @{\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief copies an internal fluent query\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryInternal.prototype.copyQuery = function() {\n"
  "  var copy;\n"
  "\n"
  "  copy = new AvocadoFluentQueryInternal(this._collection);\n"
  "\n"
  "  copy._select = this._select;\n"
  "  copy._joins = this._joins;\n"
  "  copy._where = this._where;\n"
  "  copy._skip = this._skip;\n"
  "  copy._limit = this._limit;\n"
  "\n"
  "  return copy;\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief executes an internal fluent query\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryInternal.prototype.execute = function () {\n"
  "  if (this._execution == null) {\n"
  "    this._query = AQL_SELECT(this._select,\n"
  "                             \"$\",\n"
  "                             this._collection,\n"
  "                             this._joins,\n"
  "                             this._where,\n"
  "                             this._skip,\n"
  "                             this._limit);\n"
  "\n"
  "    this._execution = this._query.execute();\n"
  "  }\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @}\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                                  public functions\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @addtogroup AQL\n"
  "/// @{\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief checks if the cursor is exhausted\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryInternal.prototype.hasNext = function () {\n"
  "  this.execute();\n"
  "\n"
  "  return this._execution.hasNext();\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief returns the next result document\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryInternal.prototype.next = function () {\n"
  "  this.execute();\n"
  "\n"
  "  return this._execution.next();\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief returns the next result document\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryInternal.prototype.nextRef = function () {\n"
  "  this.execute();\n"
  "\n"
  "  return this._execution.nextRef();\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief uses the next document\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoFluentQueryInternal.prototype.useNext = function () {\n"
  "  this.execute();\n"
  "\n"
  "  return this._execution.useNext();\n"
  "}\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @}\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                                        COLLECTION\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "// -----------------------------------------------------------------------------\n"
  "// --SECTION--                                                  public functions\n"
  "// -----------------------------------------------------------------------------\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @addtogroup AQL\n"
  "/// @{\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief returns all elements\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoCollection.prototype.T_all = function () {\n"
  "  return new AvocadoFluentQueryInternal(this);\n"
  "}\n"
  "\n"
  "AvocadoEdgesCollection.prototype.T_all = AvocadoCollection.prototype.T_all;\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief looks up a document\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoCollection.prototype.T_document = function (id) {\n"
  "  var query;\n"
  "\n"
  "  query = new AvocadoFluentQueryInternal(this);\n"
  "  query._where = AQL_WHERE_PRIMARY_CONST(id);\n"
  "\n"
  "  return query;\n"
  "}\n"
  "\n"
  "AvocadoEdgesCollection.prototype.T_document = AvocadoCollection.prototype.T_document;\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief limits an existing query\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoCollection.prototype.T_limit = function (limit) {\n"
  "  var query;\n"
  "\n"
  "  query = new AvocadoFluentQueryInternal(this);\n"
  "  query._limit = limit;\n"
  "\n"
  "  return query;\n"
  "}\n"
  "\n"
  "AvocadoEdgesCollection.prototype.T_limit = AvocadoCollection.prototype.T_limit;\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief skips an existing query\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoCollection.prototype.T_skip = function (skip) {\n"
  "  var query;\n"
  "\n"
  "  if (skip < 0) {\n"
  "    throw \"skip must be non-negative\";\n"
  "  }\n"
  "\n"
  "  query = new AvocadoFluentQueryInternal(this);\n"
  "  query._skip = skip;\n"
  "\n"
  "  return query;\n"
  "}\n"
  "\n"
  "AvocadoEdgesCollection.prototype.T_skip = AvocadoCollection.prototype.T_skip;\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @brief converts into an array\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "AvocadoCollection.prototype.toArray = function () {\n"
  "  var cursor;\n"
  "  var result;\n"
  "\n"
  "  cursor = this.T_all();\n"
  "  result = [];\n"
  "\n"
  "  while (cursor.hasNext()) {\n"
  "    result.push(cursor.next());\n"
  "  }\n"
  "\n"
  "  return result;\n"
  "}\n"
  "\n"
  "AvocadoEdgesCollection.prototype.toArray = AvocadoCollection.prototype.toArray;\n"
  "\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "/// @}\n"
  "////////////////////////////////////////////////////////////////////////////////\n"
  "\n"
  "// Local Variables:\n"
  "// mode: outline-minor\n"
  "// outline-regexp: \"^\\\\(/// @brief\\\\|/// @addtogroup\\\\|// --SECTION--\\\\|/// @page\\\\|/// @}\\\\)\"\n"
  "// End:\n"
;
