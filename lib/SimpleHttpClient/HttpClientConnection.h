////////////////////////////////////////////////////////////////////////////////
/// @brief http client connection
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2011 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Jan Steemann
/// @author Copyright 2009-2012, triagens GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef TRIAGENS_SIMPLE_HTTP_CLIENT_HTTP_CLIENT_CONNECTION_H
#define TRIAGENS_SIMPLE_HTTP_CLIENT_HTTP_CLIENT_CONNECTION_H 1

#include "SimpleHttpClient/ClientConnection.h"

// -----------------------------------------------------------------------------
// --SECTION--                                              HttpClientConnection
// -----------------------------------------------------------------------------

namespace triagens {
  namespace httpclient {
      
////////////////////////////////////////////////////////////////////////////////
/// @brief client connection
////////////////////////////////////////////////////////////////////////////////

    class HttpClientConnection : public ClientConnection {

// -----------------------------------------------------------------------------
// --SECTION--                                        constructors / destructors
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup httpclient
/// @{
////////////////////////////////////////////////////////////////////////////////

      private:

        HttpClientConnection (HttpClientConnection const&);
        HttpClientConnection& operator= (HttpClientConnection const&);

      public:

////////////////////////////////////////////////////////////////////////////////
/// @brief creates a new HTTP client connection
////////////////////////////////////////////////////////////////////////////////

        HttpClientConnection (triagens::rest::Endpoint* endpoint,
                              double,
                              double,
                              size_t);

////////////////////////////////////////////////////////////////////////////////
/// @brief destroys an HTTP client connection
////////////////////////////////////////////////////////////////////////////////

        virtual ~HttpClientConnection ();

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                         protected virtual methods
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup httpclient
/// @{
////////////////////////////////////////////////////////////////////////////////

      protected:

////////////////////////////////////////////////////////////////////////////////
/// @brief connect
////////////////////////////////////////////////////////////////////////////////
    
        bool connectSocket ();

////////////////////////////////////////////////////////////////////////////////
/// @brief prepare connection for read/write I/O
////////////////////////////////////////////////////////////////////////////////
     
        bool prepare (const double, const bool) const;

////////////////////////////////////////////////////////////////////////////////
/// @brief write data to the connection
////////////////////////////////////////////////////////////////////////////////
    
        bool write (void*, size_t, size_t*);

////////////////////////////////////////////////////////////////////////////////
/// @brief read data from the connection
////////////////////////////////////////////////////////////////////////////////
    
        bool read (triagens::basics::StringBuffer&);

////////////////////////////////////////////////////////////////////////////////
/// @brief return whether the connection is readable
////////////////////////////////////////////////////////////////////////////////
    
        bool readable ();

////////////////////////////////////////////////////////////////////////////////
/// @brief check whether the socket is still alive
////////////////////////////////////////////////////////////////////////////////
    
        bool checkSocket ();

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

// -----------------------------------------------------------------------------
// --SECTION--                                                 private variables
// -----------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
/// @addtogroup httpclient
/// @{
////////////////////////////////////////////////////////////////////////////////

      private:
      
////////////////////////////////////////////////////////////////////////////////
/// @brief the underlying socket
////////////////////////////////////////////////////////////////////////////////
      
        socket_t _socket;         

////////////////////////////////////////////////////////////////////////////////
/// @}
////////////////////////////////////////////////////////////////////////////////

    };
  }
}

#endif
