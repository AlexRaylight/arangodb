////////////////////////////////////////////////////////////////////////////////
/// @brief sharding configuration
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2004-2013 triAGENS GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Jan Steemann 
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef TRIAGENS_SHARDING_APPLICATION_SHARDING_H
#define TRIAGENS_SHARDING_APPLICATION_SHARDING_H 1

#include "ApplicationServer/ApplicationFeature.h"

namespace triagens {
  namespace arango {

    class HeartbeatThread;

////////////////////////////////////////////////////////////////////////////////
/// @brief sharding feature configuration
////////////////////////////////////////////////////////////////////////////////

    class ApplicationSharding: public rest::ApplicationFeature { 

// -----------------------------------------------------------------------------
// --SECTION--                                      constructors and destructors
// -----------------------------------------------------------------------------
      
      private:
        ApplicationSharding (ApplicationSharding const&);
        ApplicationSharding& operator= (ApplicationSharding const&);

      public:

////////////////////////////////////////////////////////////////////////////////
/// @brief constructor
////////////////////////////////////////////////////////////////////////////////

        ApplicationSharding ();

////////////////////////////////////////////////////////////////////////////////
/// @brief destructor
////////////////////////////////////////////////////////////////////////////////

        ~ApplicationSharding ();

// -----------------------------------------------------------------------------
// --SECTION--                                                    public methods
// -----------------------------------------------------------------------------

      public:

        inline bool enabled () const {
          return _enableCluster;
        }

// -----------------------------------------------------------------------------
// --SECTION--                                        ApplicationFeature methods
// -----------------------------------------------------------------------------

      public:

////////////////////////////////////////////////////////////////////////////////
/// {@inheritDoc}
////////////////////////////////////////////////////////////////////////////////

        void setupOptions (map<string, basics::ProgramOptionsDescription>&);

////////////////////////////////////////////////////////////////////////////////
/// {@inheritDoc}
////////////////////////////////////////////////////////////////////////////////

        bool prepare ();

////////////////////////////////////////////////////////////////////////////////
/// {@inheritDoc}
////////////////////////////////////////////////////////////////////////////////

        bool start ();

////////////////////////////////////////////////////////////////////////////////
/// {@inheritDoc}
////////////////////////////////////////////////////////////////////////////////

        void close ();

////////////////////////////////////////////////////////////////////////////////
/// {@inheritDoc}
////////////////////////////////////////////////////////////////////////////////

        void stop ();

// -----------------------------------------------------------------------------
// --SECTION--                                                 private variables
// -----------------------------------------------------------------------------

       private:

////////////////////////////////////////////////////////////////////////////////
/// @brief thread for heartbeat
////////////////////////////////////////////////////////////////////////////////

         HeartbeatThread* _heartbeat;

////////////////////////////////////////////////////////////////////////////////
/// @brief heartbeat interval (in ms)
////////////////////////////////////////////////////////////////////////////////

         uint64_t _heartbeatInterval;

////////////////////////////////////////////////////////////////////////////////
/// @brief list of agency endpoints
////////////////////////////////////////////////////////////////////////////////
         
         std::vector<std::string> _agencyEndpoints;

////////////////////////////////////////////////////////////////////////////////
/// @brief global agency prefix
////////////////////////////////////////////////////////////////////////////////
         
         std::string _agencyPrefix;

////////////////////////////////////////////////////////////////////////////////
/// @brief this server's id
////////////////////////////////////////////////////////////////////////////////

         std::string _myId;

////////////////////////////////////////////////////////////////////////////////
/// @brief this server's address / endpoint
////////////////////////////////////////////////////////////////////////////////

         std::string _myAddress;

////////////////////////////////////////////////////////////////////////////////
/// @brief whether or not the cluster feature is enabled
////////////////////////////////////////////////////////////////////////////////

         bool _enableCluster;

    };
  }
}

#endif

// Local Variables:
// mode: outline-minor
// outline-regexp: "/// @brief\\|/// {@inheritDoc}\\|/// @addtogroup\\|/// @page\\|// --SECTION--\\|/// @\\}"
// End:
