////////////////////////////////////////////////////////////////////////////////
/// @brief transaction context
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2004-2013 triAGENS GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Jan Steemann
/// @author Copyright 2011-2013, triAGENS GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef TRIAGENS_TRANSACTION_CONTEXT_H
#define TRIAGENS_TRANSACTION_CONTEXT_H 1

#include "Basics/Common.h"

extern "C" {
  struct TRI_vocbase_s;
}

namespace triagens {
  namespace transaction {

    class Manager;

    class Transaction;

// -----------------------------------------------------------------------------
// --SECTION--                                                     class Context
// -----------------------------------------------------------------------------

    class Context {

////////////////////////////////////////////////////////////////////////////////
/// @brief Context
////////////////////////////////////////////////////////////////////////////////

      private:
        Context (Context const&);
        Context& operator= (Context const&);

// -----------------------------------------------------------------------------
// --SECTION--                                      constructors and destructors
// -----------------------------------------------------------------------------

      public:

////////////////////////////////////////////////////////////////////////////////
/// @brief create a transaction context
////////////////////////////////////////////////////////////////////////////////

        Context (Manager*,
                 Context**); 

////////////////////////////////////////////////////////////////////////////////
/// @brief destroy a transaction context
////////////////////////////////////////////////////////////////////////////////

        ~Context ();

// -----------------------------------------------------------------------------
// --SECTION--                                                    public methods
// -----------------------------------------------------------------------------

      public:

////////////////////////////////////////////////////////////////////////////////
/// @brief return the current transaction
////////////////////////////////////////////////////////////////////////////////

        inline Transaction* transaction () const {
          return _transaction;
        }

////////////////////////////////////////////////////////////////////////////////
/// @brief return the current nesting level
////////////////////////////////////////////////////////////////////////////////

        inline int level () const {
          return _level;
        }

////////////////////////////////////////////////////////////////////////////////
/// @brief get or create a transaction context
////////////////////////////////////////////////////////////////////////////////

        static Context* getContext (Manager*, 
                                    Context**);

////////////////////////////////////////////////////////////////////////////////
/// @brief create a transaction context
////////////////////////////////////////////////////////////////////////////////

        static Context* getContext (Manager*);

////////////////////////////////////////////////////////////////////////////////
/// @brief increase the reference count
////////////////////////////////////////////////////////////////////////////////

        void increaseRefCount (); 

////////////////////////////////////////////////////////////////////////////////
/// @brief decrease the reference count
/// the last user that calls this will destroy the context!
////////////////////////////////////////////////////////////////////////////////

        void decreaseRefCount (); 

////////////////////////////////////////////////////////////////////////////////
/// @brief start a new unit of work
////////////////////////////////////////////////////////////////////////////////

        int startWorkUnit (struct TRI_vocbase_s*,
                           bool);

////////////////////////////////////////////////////////////////////////////////
/// @brief end a unit of work
////////////////////////////////////////////////////////////////////////////////

        int endWorkUnit ();

// -----------------------------------------------------------------------------
// --SECTION--                                                   private methods
// -----------------------------------------------------------------------------

      private:

////////////////////////////////////////////////////////////////////////////////
/// @brief create a new transaction context
////////////////////////////////////////////////////////////////////////////////

        static Context* createContext (Manager*,
                                       Context**);

// -----------------------------------------------------------------------------
// --SECTION--                                                 private variables
// -----------------------------------------------------------------------------

      private:

////////////////////////////////////////////////////////////////////////////////
/// @brief the transaction manager
////////////////////////////////////////////////////////////////////////////////

        Manager* _manager;

////////////////////////////////////////////////////////////////////////////////
/// @brief address to update with our context
////////////////////////////////////////////////////////////////////////////////

        Context** _globalContext;

////////////////////////////////////////////////////////////////////////////////
/// @brief the underlying transaction
////////////////////////////////////////////////////////////////////////////////

        Transaction* _transaction;

////////////////////////////////////////////////////////////////////////////////
/// @brief the current nesting level for work units
////////////////////////////////////////////////////////////////////////////////

        int _level;

////////////////////////////////////////////////////////////////////////////////
/// @brief the current number of users of this context
////////////////////////////////////////////////////////////////////////////////
        
        int _refCount;

    };

  }
}

#endif

// Local Variables:
// mode: outline-minor
// outline-regexp: "/// @brief\\|/// {@inheritDoc}\\|/// @addtogroup\\|/// @page\\|// --SECTION--\\|/// @\\}"
// End:
