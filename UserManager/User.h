////////////////////////////////////////////////////////////////////////////////
/// @brief a user
///
/// @file
///
/// DISCLAIMER
///
/// Copyright 2010-2011 triagens GmbH, Cologne, Germany
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// Copyright holder is triAGENS GmbH, Cologne, Germany
///
/// @author Dr. Frank Celler
/// @author Copyright 2011, triagens GmbH, Cologne, Germany
////////////////////////////////////////////////////////////////////////////////

#ifndef TRIAGENS_USER_MANAGER_USER_H
#define TRIAGENS_USER_MANAGER_USER_H 1

#include <Basics/Common.h>

#include <Admin/Right.h>

namespace triagens {
  namespace admin {
    class Role;

    ////////////////////////////////////////////////////////////////////////////////
    /// @brief a user
    ////////////////////////////////////////////////////////////////////////////////

    class User : noncopyable {
      public:

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief adds a new user
        ////////////////////////////////////////////////////////////////////////////////

        static User* create (string const& name, Role*);

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief returns a role by name
        ////////////////////////////////////////////////////////////////////////////////

        static User* lookup (string const& name);

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief removes a user
        ///
        /// Remove will also delete the user object.
        ////////////////////////////////////////////////////////////////////////////////

        static bool remove (User*);

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief returns a role by name
        ////////////////////////////////////////////////////////////////////////////////

        static vector<User*> users ();

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief loads the user database
        ////////////////////////////////////////////////////////////////////////////////

        static bool loadUser (string const& file);

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief saves the user database
        ////////////////////////////////////////////////////////////////////////////////

        static void saveUser ();

      public:

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief returns the name of a user
        ////////////////////////////////////////////////////////////////////////////////

        string const& getName () const {
          return _name;
        }

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief returns the role of a user
        ////////////////////////////////////////////////////////////////////////////////

        Role* getRole () const {
          return _role;
        }

      public:

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief changes the password of a user
        ////////////////////////////////////////////////////////////////////////////////

        bool changePassword (string const& password);

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief checks the password of a user
        ////////////////////////////////////////////////////////////////////////////////

        bool checkPassword (string const& password);

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief has right
        ////////////////////////////////////////////////////////////////////////////////

        bool hasRight (right_t);

      protected:

        ////////////////////////////////////////////////////////////////////////////////
        /// @brief creates a new user
        ////////////////////////////////////////////////////////////////////////////////

        User (string const& name, Role*);

      private:
        string const _name;
        string _password;
        Role* _role;
    };
  }
}

#endif
