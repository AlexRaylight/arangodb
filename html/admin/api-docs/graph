{
    "basePath": "/",
    "swaggerVersion": "1.1",
    "apiVersion": "0.1",
    "apis": [
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the graph was created sucessfully and `waitForSync` was `true`. ",
                            "code": "201"
                        },
                        {
                            "reason": "is returned if the graph was created sucessfully and `waitForSync` was `false`. ",
                            "code": "202"
                        },
                        {
                            "reason": "is returned if it failed. The response body contains an error document in this case. ",
                            "code": "400"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "body",
                            "required": "false",
                            "name": "body",
                            "description": "A valid json document for your data, for instance {\"hello\": \"world\"}."
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "waitForSync",
                            "description": "Wait until document has been sync to disk. "
                        }
                    ],
                    "notes": "Creates a new graph. <br><br>The call expects a JSON hash array as body with the following attributes: <br><br>- <b>_key</b>: The name of the new graph.<br>- <b>vertices</b>: The name of the vertices collection.<br>- <b>edges</b>: The name of the egde collection.<br><br>Returns an object with an attribute <b>graph</b> containing a list of all graph properties. <br><br>",
                    "summary": "create graph",
                    "httpMethod": "POST",
                    "examples": "<br><br><pre><code class=\"json\" >> curl --data @- -X POST --dump - http://localhost:8529/_api/graph\n{\"_key\" : \"graph1\", \"vertices\" : \"v\", \"edges\" : \"e\"}\n\nHTTP/1.1 201 Created\ncontent-type: application/json; charset=utf-8\netag: 11767958\n\n{\n  \"graph\": {\n    \"_id\": \"_graphs/graph1\",\n    \"_rev\": \"11767958\",\n    \"_key\": \"graph1\",\n    \"vertices\": \"v\",\n    \"edges\": \"e\"\n  },\n  \"error\": false,\n  \"code\": 201\n}\n</code></pre><br>",
                    "nickname": "createGraph"
                }
            ],
            "path": "/_api/graph"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the graph was found ",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the graph was not found. The response body contains an error document in this case. ",
                            "code": "404"
                        },
                        {
                            "reason": "\"If-None-Match\" header is given and the current graph has not a different  version ",
                            "code": "304"
                        },
                        {
                            "reason": "\"If-Match\" header or <b>rev</b> is given and the current graph has  a different version ",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "false",
                            "name": "rev",
                            "description": "Revision of a graph "
                        }
                    ],
                    "notes": "<br><br>Returns an object with an attribute <b>graph</b> containing a list of all graph properties. <br><br>If the \"If-None-Match\" header is given, then it must contain exactly one etag. The document is returned, if it has a different revision than the given etag. Otherwise a <b>HTTP 304</b> is returned. <br><br>If the \"If-Match\" header is given, then it must contain exactly one etag. The document is returned, if it has the same revision ad the given etag. Otherwise a <b>HTTP 412</b> is returned. As an alternative you can supply the etag in an attribute <b>rev</b> in the URL. <br><br>",
                    "summary": "get graph properties",
                    "httpMethod": "GET",
                    "examples": "get graph by name <br><br><pre><code class=\"json\" >> curl -X GET --dump - http://localhost:8529/_api/graph/graph1\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: 11767958\n\n{\n  \"graph\": {\n    \"_id\": \"_graphs/graph1\",\n    \"_rev\": \"11767958\",\n    \"_key\": \"graph1\",\n    \"vertices\": \"v\",\n    \"edges\": \"e\"\n  },\n  \"error\": false,\n  \"code\": 200\n}\n</code></pre><br>",
                    "nickname": "getGraphProperties"
                }
            ],
            "path": "/_api/graph"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the graph was deleted ",
                            "code": "204"
                        },
                        {
                            "reason": "is returned if the graph was not found. The response body contains an error document in this case. ",
                            "code": "404"
                        },
                        {
                            "reason": "\"If-Match\" header or <b>rev</b> is given and the current graph has  a different version ",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "waitForSync",
                            "description": "Wait until document has been sync to disk. "
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "false",
                            "name": "rev",
                            "description": "Revision of a graph "
                        }
                    ],
                    "notes": "Deletes graph, edges and vertices <br><br>If the \"If-Match\" header is given, then it must contain exactly one etag. The document is deleted, if it has the same revision ad the given etag. Otherwise a <b>HTTP 412</b> is returned. As an alternative you can supply the etag in an attribute <b>rev</b> in the URL. <br><br>",
                    "summary": "delete graph",
                    "httpMethod": "DELETE",
                    "examples": "<br><br><pre><code class=\"json\" >> curl -X DELETE --dump - http://localhost:8529/_api/graph/graph1\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{\n  \"deleted\": true,\n  \"error\": false,\n  \"code\": 200\n}\n</code></pre><br>",
                    "nickname": "deleteGraph"
                }
            ],
            "path": "/_api/graph"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the graph was created sucessfully and `waitForSync` was `true`. ",
                            "code": "201"
                        },
                        {
                            "reason": "is returned if the graph was created sucessfully and `waitForSync` was `false`. ",
                            "code": "202"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "body",
                            "required": "false",
                            "name": "body",
                            "description": "A valid json document for your data, for instance {\"hello\": \"world\"}."
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "waitForSync",
                            "description": "Wait until document has been sync to disk. "
                        }
                    ],
                    "notes": "Creates a vertex in a graph. <br><br>The call expects a JSON hash array as body with the vertex properties: <br><br>- <b>_key</b>: The name of the vertex (optional).<br>- further optional attributes.<br><br>Returns an object with an attribute <b>vertex</b> containing a list of all vertex properties. <br><br>",
                    "summary": "create vertex",
                    "httpMethod": "POST",
                    "examples": "<br><br><pre><code class=\"json\" >> curl --data @- -X POST --dump - http://localhost:8529/_api/graph/graph1/vertex\n{\"_key\" : \"v1\", \"optional1\" : \"val1\", \"optional2\" : \"val2\"}\n\nHTTP/1.1 201 Created\ncontent-type: application/json; charset=utf-8\netag: 24332177\n\n{\n  \"vertex\": {\n    \"_id\": \"v/v1\",\n    \"_rev\": \"24332177\",\n    \"_key\": \"v1\",\n    \"optional1\": \"val1\",\n    \"optional2\": \"val2\"\n  },\n  \"error\": false,\n  \"code\": 201\n}\n</code></pre><br>",
                    "nickname": "createVertex"
                }
            ],
            "path": "/_api/graph/{graph-name}/vertex"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the graph was found ",
                            "code": "200"
                        },
                        {
                            "reason": "\"If-Match\" header is given and the current graph has not a different  version ",
                            "code": "304"
                        },
                        {
                            "reason": "is returned if the graph or vertex was not found. The response body contains an error document in this case. ",
                            "code": "404"
                        },
                        {
                            "reason": "\"If-None-Match\" header or <b>rev</b> is given and the current graph has  a different version ",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "false",
                            "name": "rev",
                            "description": "Revision of a vertex "
                        }
                    ],
                    "notes": "Returns an object with an attribute <b>vertex</b> containing a list of all vertex properties. <br><br>If the \"If-None-Match\" header is given, then it must contain exactly one etag. The document is returned, if it has a different revision than the given etag. Otherwise a <b>HTTP 304</b> is returned. <br><br>If the \"If-Match\" header is given, then it must contain exactly one etag. The document is returned, if it has the same revision ad the given etag. Otherwise a <b>HTTP 412</b> is returned. As an alternative you can supply the etag in an attribute <b>rev</b> in the URL. <br><br>",
                    "summary": "get vertex",
                    "httpMethod": "GET",
                    "examples": "get vertex properties by name <br><br><pre><code class=\"json\" >> curl -X GET --dump - http://localhost:8529/_api/graph/graph1/vertex/v1\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: 24332177\n\n{\n  \"vertex\": {\n    \"_id\": \"v/v1\",\n    \"_rev\": \"24332177\",\n    \"_key\": \"v1\",\n    \"optional1\": \"val1\",\n    \"optional2\": \"val2\"\n  },\n  \"error\": false,\n  \"code\": 200\n}\n</code></pre><br>",
                    "nickname": "getVertex"
                }
            ],
            "path": "/_api/graph/{graph-name}/vertex"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the vertex was deleted ",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the graph or the vertex was not found. The response body contains an error document in this case. ",
                            "code": "404"
                        },
                        {
                            "reason": "\"If-Match\" header or <b>rev</b> is given and the current vertex has  a different version ",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "waitForSync",
                            "description": "Wait until document has been sync to disk. "
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "false",
                            "name": "rev",
                            "description": "Revision of a vertex "
                        }
                    ],
                    "notes": "Deletes vertex and all in and out edges of the vertex <br><br>If the \"If-Match\" header is given, then it must contain exactly one etag. The document is deleted, if it has the same revision ad the given etag. Otherwise a <b>HTTP 412</b> is returned. As an alternative you can supply the etag in an attribute <b>rev</b> in the URL. <br><br>",
                    "summary": "delete vertex",
                    "httpMethod": "DELETE",
                    "examples": "<br><br><pre><code class=\"json\" >> curl -X DELETE --dump - http://localhost:8529/_api/graph/graph1/vertex/v1\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{\n  \"deleted\": true,\n  \"error\": false,\n  \"code\": 200\n}\n</code></pre><br>",
                    "nickname": "deleteVertex"
                }
            ],
            "path": "/_api/graph/{graph-name}/vertex"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the vertex was updated sucessfully and `waitForSync` was `true`. ",
                            "code": "201"
                        },
                        {
                            "reason": "is returned if the vertex was updated sucessfully and `waitForSync` was `false`. ",
                            "code": "202"
                        },
                        {
                            "reason": "is returned if the graph or the vertex was not found. The response body contains an error document in this case. ",
                            "code": "404"
                        },
                        {
                            "reason": "\"If-Match\" header or <b>rev</b> is given and the current vertex has  a different version ",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "waitForSync",
                            "description": "Wait until vertex has been sync to disk. "
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "false",
                            "name": "rev",
                            "description": "Revision of a vertex "
                        }
                    ],
                    "notes": "Replaces the vertex properties. <br><br>The call expects a JSON hash array as body with the new vertex properties. <br><br>Returns an object with an attribute <b>vertex</b> containing a list of all vertex properties. <br><br>If the \"If-Match\" header is given, then it must contain exactly one etag. The document is updated, if it has the same revision ad the given etag. Otherwise a <b>HTTP 412</b> is returned. As an alternative you can supply the etag in an attribute <b>rev</b> in the URL. <br><br>",
                    "summary": "update vertex",
                    "httpMethod": "PUT",
                    "examples": "<br><br><pre><code class=\"json\" >> curl --data @- -X PUT --dump - http://localhost:8529/_api/graph/graph1/vertex/v1\n{\"optional1\" : \"val2\"}\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: 24332190\n\n{\n  \"vertex\": {\n    \"_id\": \"v/v1\",\n    \"_rev\": \"24332190\",\n    \"_key\": \"v1\",\n    \"optional1\": \"val2\"\n  },\n  \"error\": false,\n  \"code\": 200\n}\n</code></pre><br>",
                    "nickname": "updateVertex"
                }
            ],
            "path": "/_api/graph/{graph-name}/vertex"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the vertex was updated sucessfully and `waitForSync` was `true`. ",
                            "code": "201"
                        },
                        {
                            "reason": "is returned if the vertex was updated sucessfully and `waitForSync` was `false`. ",
                            "code": "202"
                        },
                        {
                            "reason": "is returned if the graph or the vertex was not found. The response body contains an error document in this case. ",
                            "code": "404"
                        },
                        {
                            "reason": "\"If-Match\" header or <b>rev</b> is given and the current vertex has  a different version ",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "waitForSync",
                            "description": "Wait until vertex has been sync to disk. "
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "false",
                            "name": "rev",
                            "description": "Revision of a vertex "
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "keepNull",
                            "description": "Modify the behavior of the patch command to remove any attribute "
                        }
                    ],
                    "notes": "Partially updates the vertex properties. <br><br>The call expects a JSON hash array as body with the properties to patch. <br><br>Setting an attribute value to <b>null</b> in the patch document will cause a value  of <b>null</b> be saved for the attribute by default. If the intention is to  delete existing attributes with the patch command, the URL parameter  <b>keepNull</b> can be used with a value of <b>false</b>.  This will modify the behavior of the patch command to remove any attributes  from the existing document that are contained in the patch document  with an attribute value of <b>null</b>.  If the \"If-Match\" header is given, then it must contain exactly one etag. The document is updated, if it has the same revision ad the given etag. Otherwise a <b>HTTP 412</b> is returned. As an alternative you can supply the etag in an attribute <b>rev</b> in the URL. <br><br>Returns an object with an attribute <b>vertex</b> containing a list of all vertex properties. <br><br>",
                    "summary": "update vertex",
                    "httpMethod": "PATCH",
                    "examples": "<br><br><pre><code class=\"json\" >> curl --data @- -X PATCH --dump - http://localhost:8529/_api/graph/graph1/vertex/v1\n{\"optional2\" : \"vertexPatch2\"}\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: 24332193\n\n{\n  \"vertex\": {\n    \"_id\": \"v/v1\",\n    \"_rev\": \"24332193\",\n    \"_key\": \"v1\",\n    \"optional1\": \"val2\",\n    \"optional2\": \"vertexPatch2\"\n  },\n  \"error\": false,\n  \"code\": 200\n}\n\n> curl --data @- -X PATCH --dump - http://localhost:8529/_api/graph/graph1/vertex/v1?keepNull=false\n{\"optional2\" : null}\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: 24332199\n\n{\n  \"vertex\": {\n    \"_id\": \"v/v1\",\n    \"_rev\": \"24332199\",\n    \"_key\": \"v1\",\n    \"optional1\": \"val2\"\n  },\n  \"error\": false,\n  \"code\": 200\n}\n</code></pre><br>",
                    "nickname": "updateVertex"
                }
            ],
            "path": "/_api/graph/{graph-name}/vertex"
        },
        {
            "operations": [
                {
                    "errorResponses": [],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "body",
                            "required": "false",
                            "name": "body",
                            "description": "A valid json document for your data, for instance {\"hello\": \"world\"}."
                        }
                    ],
                    "notes": "",
                    "summary": "get vertices",
                    "httpMethod": "POST",
                    "examples": "",
                    "nickname": "getVertices"
                }
            ],
            "path": "/_api/graph/{graph-name}/vertices"
        },
        {
            "operations": [
                {
                    "errorResponses": [],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "body",
                            "required": "false",
                            "name": "body",
                            "description": "A valid json document for your data, for instance {\"hello\": \"world\"}."
                        }
                    ],
                    "notes": "",
                    "summary": "get vertices",
                    "httpMethod": "POST",
                    "examples": "",
                    "nickname": "getVertices"
                }
            ],
            "path": "/_api/graph/{graph-name}/vertices/{vertice-name}"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the edge was created sucessfully and `waitForSync` was `true`. ",
                            "code": "201"
                        },
                        {
                            "reason": "is returned if the edge was created sucessfully and `waitForSync` was `false`. ",
                            "code": "202"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "body",
                            "required": "false",
                            "name": "body",
                            "description": "A valid json document for your data, for instance {\"hello\": \"world\"}."
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "waitForSync",
                            "description": "Wait until edge has been sync to disk. "
                        }
                    ],
                    "notes": "Creates an edge in a graph. <br><br>The call expects a JSON hash array as body with the edge properties: <br><br>- <b>_key</b>: The name of the edge.<br>- <b>_from</b>: The name of the from vertex.<br>- <b>_to</b>: The name of the to vertex.<br>- <b>$label</b>: A label for the edge (optional).<br>- further optional attributes.<br><br>Returns an object with an attribute <b>edge</b> containing the list of all edge properties. <br><br>",
                    "summary": "create edge",
                    "httpMethod": "POST",
                    "examples": "<br><br><pre><code class=\"json\" >> curl --data @- -X POST --dump - http://localhost:8529/_api/graph/graph1/edge\n{\"_key\" : \"edge1\", \"_from\" : \"vert2\", \"_to\" : \"vert1\", \"optional1\" : \"val1\"}\n\nHTTP/1.1 201 Created\ncontent-type: application/json; charset=utf-8\netag: 57595366\n\n{\n  \"edge\": {\n    \"_id\": \"e/edge1\",\n    \"_rev\": \"57595366\",\n    \"_key\": \"edge1\",\n    \"_from\": \"v/vert2\",\n    \"_to\": \"v/vert1\",\n    \"$label\": null,\n    \"optional1\": \"val1\"\n  },\n  \"error\": false,\n  \"code\": 201\n}\n</code></pre><br>",
                    "nickname": "createEdge"
                }
            ],
            "path": "/_api/graph/{graph-name}/edge"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the edge was found ",
                            "code": "200"
                        },
                        {
                            "reason": "\"If-Match\" header is given and the current edge has not a different  version ",
                            "code": "304"
                        },
                        {
                            "reason": "is returned if the graph or edge was not found. The response body contains an error document in this case. ",
                            "code": "404"
                        },
                        {
                            "reason": "\"If-None-Match\" header or <b>rev</b> is given and the current edge has  a different version ",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "false",
                            "name": "rev",
                            "description": "Revision of an edge "
                        }
                    ],
                    "notes": "Returns an object with an attribute <b>edge</b> containing a list of all edge properties. <br><br>If the \"If-None-Match\" header is given, then it must contain exactly one etag. The document is returned, if it has a different revision than the given etag. Otherwise a <b>HTTP 304</b> is returned. <br><br>If the \"If-Match\" header is given, then it must contain exactly one etag. The document is returned, if it has the same revision ad the given etag. Otherwise a <b>HTTP 412</b> is returned. As an alternative you can supply the etag in an attribute <b>rev</b> in the URL. <br><br>",
                    "summary": "get edge",
                    "httpMethod": "GET",
                    "examples": "<br><br><pre><code class=\"json\" >> curl -X GET --dump - http://localhost:8529/_api/graph/graph1/edge/edge1\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: 57595366\n\n{\n  \"edge\": {\n    \"_id\": \"e/edge1\",\n    \"_rev\": \"57595366\",\n    \"_key\": \"edge1\",\n    \"_from\": \"v/vert2\",\n    \"_to\": \"v/vert1\",\n    \"$label\": null,\n    \"optional1\": \"val1\"\n  },\n  \"error\": false,\n  \"code\": 200\n}\n</code></pre><br>",
                    "nickname": "getEdge"
                }
            ],
            "path": "/_api/graph/{graph-name}/edge"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the edge was deletd sucessfully and `waitForSync` was `true`. ",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the edge was deleted sucessfully and `waitForSync` was `false`. ",
                            "code": "202"
                        },
                        {
                            "reason": "is returned if the graph or the edge was not found. The response body contains an error document in this case. ",
                            "code": "404"
                        },
                        {
                            "reason": "\"If-Match\" header or <b>rev</b> is given and the current edge has  a different version ",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "waitForSync",
                            "description": "Wait until edge has been sync to disk. "
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "false",
                            "name": "rev",
                            "description": "Revision of an edge "
                        }
                    ],
                    "notes": "Deletes an edge of the graph <br><br>If the \"If-Match\" header is given, then it must contain exactly one etag. The document is returned, if it has the same revision ad the given etag. Otherwise a <b>HTTP 412</b> is returned. As an alternative you can supply the etag in an attribute <b>rev</b> in the URL. <br><br>",
                    "summary": "delete edge",
                    "httpMethod": "DELETE",
                    "examples": "<br><br><pre><code class=\"json\" >> curl -X DELETE --dump - http://localhost:8529/_api/graph/graph1/edge/edge1\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{\n  \"deleted\": true,\n  \"error\": false,\n  \"code\": 200\n}\n</code></pre><br>",
                    "nickname": "deleteEdge"
                }
            ],
            "path": "/_api/graph/{graph-name}/edge"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the edge was updated sucessfully and `waitForSync` was `true`. ",
                            "code": "201"
                        },
                        {
                            "reason": "is returned if the edge was updated sucessfully and `waitForSync` was `false`. ",
                            "code": "202"
                        },
                        {
                            "reason": "is returned if the graph or the edge was not found. The response body contains an error document in this case. ",
                            "code": "404"
                        },
                        {
                            "reason": "\"If-Match\" header or <b>rev</b> is given and the current edge has  a different version ",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "waitForSync",
                            "description": "Wait until edge has been sync to disk. "
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "false",
                            "name": "rev",
                            "description": "Revision of an edge "
                        }
                    ],
                    "notes": "Replaces the optional edge properties. <br><br>The call expects a JSON hash array as body with the new edge properties. <br><br>If the \"If-Match\" header is given, then it must contain exactly one etag. The document is returned, if it has the same revision ad the given etag. Otherwise a <b>HTTP 412</b> is returned. As an alternative you can supply the etag in an attribute <b>rev</b> in the URL. <br><br>Returns an object with an attribute <b>edge</b> containing a list of all edge properties. <br><br>",
                    "summary": "update edge",
                    "httpMethod": "PUT",
                    "examples": "<br><br><pre><code class=\"json\" >> curl --data @- -X PUT --dump - http://localhost:8529/_api/graph/graph1/edge/edge1\n{\"optional2\" : \"val2\"}\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: 57595391\n\n{\n  \"edge\": {\n    \"_id\": \"e/edge1\",\n    \"_rev\": \"57595391\",\n    \"_key\": \"edge1\",\n    \"_from\": \"v/vert2\",\n    \"_to\": \"v/vert1\",\n    \"$label\": null,\n    \"optional2\": \"val2\"\n  },\n  \"error\": false,\n  \"code\": 200\n}\n</code></pre><br>",
                    "nickname": "updateEdge"
                }
            ],
            "path": "/_api/graph/{graph-name}/edge"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the edge was updated sucessfully and `waitForSync` was `true`. ",
                            "code": "201"
                        },
                        {
                            "reason": "is returned if the edge was updated sucessfully and `waitForSync` was `false`. ",
                            "code": "202"
                        },
                        {
                            "reason": "is returned if the graph or the edge was not found. The response body contains an error document in this case. ",
                            "code": "404"
                        },
                        {
                            "reason": "\"If-Match\" header or <b>rev</b> is given and the current edge has  a different version ",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "waitForSync",
                            "description": "Wait until edge has been sync to disk. "
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": "false",
                            "name": "rev",
                            "description": "Revision of an edge "
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": "false",
                            "name": "keepNull",
                            "description": "Modify the behavior of the patch command to remove any attribute "
                        }
                    ],
                    "notes": "Partially updates the edge properties. <br><br>The call expects a JSON hash array as body with the properties to patch. <br><br>Setting an attribute value to <b>null</b> in the patch document will cause a value  of <b>null</b> be saved for the attribute by default. If the intention is to  delete existing attributes with the patch command, the URL parameter  <b>keepNull</b> can be used with a value of <b>false</b>.  This will modify the behavior of the patch command to remove any attributes  from the existing document that are contained in the patch document  with an attribute value of <b>null</b>. <br><br>If the \"If-Match\" header is given, then it must contain exactly one etag. The document is returned, if it has the same revision ad the given etag. Otherwise a <b>HTTP 412</b> is returned. As an alternative you can supply the etag in an attribute <b>rev</b> in the URL.  Returns an object with an attribute <b>edge</b> containing a list of all edge properties. <br><br>",
                    "summary": "update edge",
                    "httpMethod": "PATCH",
                    "examples": "<br><br><pre><code class=\"json\" >> curl --data @- -X PATCH --dump - http://localhost:8529/_api/graph/graph1/edge/edge1\n{\"optional3\" : \"val3\"}\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: 57595398\n\n{\n  \"edge\": {\n    \"_id\": \"e/edge1\",\n    \"_rev\": \"57595398\",\n    \"_key\": \"edge1\",\n    \"_from\": \"v/vert2\",\n    \"_to\": \"v/vert1\",\n    \"$label\": null,\n    \"optional2\": \"val2\",\n    \"optional3\": \"val3\"\n  },\n  \"error\": false,\n  \"code\": 200\n}\n</code></pre><br>",
                    "nickname": "updateEdge"
                }
            ],
            "path": "/_api/graph/{graph-name}/edge"
        },
        {
            "operations": [
                {
                    "errorResponses": [],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "body",
                            "required": "false",
                            "name": "body",
                            "description": "A valid json document for your data, for instance {\"hello\": \"world\"}."
                        }
                    ],
                    "notes": "",
                    "summary": "get edges",
                    "httpMethod": "POST",
                    "examples": "",
                    "nickname": "getEdges"
                }
            ],
            "path": "/_api/graph/{graph-name}/edges"
        },
        {
            "operations": [
                {
                    "errorResponses": [],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "body",
                            "required": "false",
                            "name": "body",
                            "description": "A valid json document for your data, for instance {\"hello\": \"world\"}."
                        }
                    ],
                    "notes": "",
                    "summary": "get edges",
                    "httpMethod": "POST",
                    "examples": "",
                    "nickname": "getEdges"
                }
            ],
            "path": "/_api/graph/{graph-name}/edges/{vertex-name}"
        }
    ]
}
